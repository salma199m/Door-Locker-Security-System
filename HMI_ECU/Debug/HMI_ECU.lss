
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e6  00800060  000032d0  00003364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800146  00800146  0000344a  2**0
                  ALLOC
  3 .stab         00002f34  00000000  00000000  0000344c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001232  00000000  00000000  00006380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000075b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000076f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007862  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000094ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a396  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b144  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b531  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bcff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e2 16 	jmp	0x2dc4	; 0x2dc4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 34       	cpi	r26, 0x46	; 70
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e4       	ldi	r26, 0x46	; 70
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 34       	cpi	r26, 0x49	; 73
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7d 08 	call	0x10fa	; 0x10fa <main>
      8a:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e3       	ldi	r26, 0x30	; 48
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 06 19 	jmp	0x320c	; 0x320c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e3       	ldi	r24, 0x30	; 48
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 06 19 	jmp	0x320c	; 0x320c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 16 19 	jmp	0x322c	; 0x322c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER1_ticks>:
 * counts the ticks of the timer
 * It is the callback function
 */

void TIMER1_ticks()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     b4e:	80 91 46 01 	lds	r24, 0x0146
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 46 01 	sts	0x0146, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <enterpass>:

void enterpass(uint8 *pass)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	63 97       	sbiw	r28, 0x13	; 19
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	9b 8b       	std	Y+19, r25	; 0x13
     b74:	8a 8b       	std	Y+18, r24	; 0x12
	uint8 key_num;

	for (int i = 0; i < 5; i++) {
     b76:	18 8a       	std	Y+16, r1	; 0x10
     b78:	1f 86       	std	Y+15, r1	; 0x0f
     b7a:	89 c0       	rjmp	.+274    	; 0xc8e <enterpass+0x130>
		key_num = KEYPAD_getPressedKey();
     b7c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <KEYPAD_getPressedKey>
     b80:	89 8b       	std	Y+17, r24	; 0x11
		if ((key_num >= 0) && (key_num <= 9)) {
     b82:	89 89       	ldd	r24, Y+17	; 0x11
     b84:	8a 30       	cpi	r24, 0x0A	; 10
     b86:	60 f4       	brcc	.+24     	; 0xba0 <enterpass+0x42>
			pass[i] = key_num;
     b88:	2f 85       	ldd	r18, Y+15	; 0x0f
     b8a:	38 89       	ldd	r19, Y+16	; 0x10
     b8c:	8a 89       	ldd	r24, Y+18	; 0x12
     b8e:	9b 89       	ldd	r25, Y+19	; 0x13
     b90:	fc 01       	movw	r30, r24
     b92:	e2 0f       	add	r30, r18
     b94:	f3 1f       	adc	r31, r19
     b96:	89 89       	ldd	r24, Y+17	; 0x11
     b98:	80 83       	st	Z, r24
			LCD_displayCharacter('*'); /* display the pressed keypad switch */
     b9a:	8a e2       	ldi	r24, 0x2A	; 42
     b9c:	0e 94 0f 14 	call	0x281e	; 0x281e <LCD_displayCharacter>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	aa ef       	ldi	r26, 0xFA	; 250
     ba6:	b3 e4       	ldi	r27, 0x43	; 67
     ba8:	8b 87       	std	Y+11, r24	; 0x0b
     baa:	9c 87       	std	Y+12, r25	; 0x0c
     bac:	ad 87       	std	Y+13, r26	; 0x0d
     bae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb0:	6b 85       	ldd	r22, Y+11	; 0x0b
     bb2:	7c 85       	ldd	r23, Y+12	; 0x0c
     bb4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bb6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	4a e7       	ldi	r20, 0x7A	; 122
     bbe:	53 e4       	ldi	r21, 0x43	; 67
     bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	8f 83       	std	Y+7, r24	; 0x07
     bca:	98 87       	std	Y+8, r25	; 0x08
     bcc:	a9 87       	std	Y+9, r26	; 0x09
     bce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bd0:	6f 81       	ldd	r22, Y+7	; 0x07
     bd2:	78 85       	ldd	r23, Y+8	; 0x08
     bd4:	89 85       	ldd	r24, Y+9	; 0x09
     bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e8       	ldi	r20, 0x80	; 128
     bde:	5f e3       	ldi	r21, 0x3F	; 63
     be0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     be4:	88 23       	and	r24, r24
     be6:	2c f4       	brge	.+10     	; 0xbf2 <enterpass+0x94>
		__ticks = 1;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	9e 83       	std	Y+6, r25	; 0x06
     bee:	8d 83       	std	Y+5, r24	; 0x05
     bf0:	3f c0       	rjmp	.+126    	; 0xc70 <enterpass+0x112>
	else if (__tmp > 65535)
     bf2:	6f 81       	ldd	r22, Y+7	; 0x07
     bf4:	78 85       	ldd	r23, Y+8	; 0x08
     bf6:	89 85       	ldd	r24, Y+9	; 0x09
     bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	3f ef       	ldi	r19, 0xFF	; 255
     bfe:	4f e7       	ldi	r20, 0x7F	; 127
     c00:	57 e4       	ldi	r21, 0x47	; 71
     c02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c06:	18 16       	cp	r1, r24
     c08:	4c f5       	brge	.+82     	; 0xc5c <enterpass+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c10:	9e 85       	ldd	r25, Y+14	; 0x0e
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e2       	ldi	r20, 0x20	; 32
     c18:	51 e4       	ldi	r21, 0x41	; 65
     c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	bc 01       	movw	r22, r24
     c24:	cd 01       	movw	r24, r26
     c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	9e 83       	std	Y+6, r25	; 0x06
     c30:	8d 83       	std	Y+5, r24	; 0x05
     c32:	0f c0       	rjmp	.+30     	; 0xc52 <enterpass+0xf4>
     c34:	89 e1       	ldi	r24, 0x19	; 25
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	9c 83       	std	Y+4, r25	; 0x04
     c3a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	9c 81       	ldd	r25, Y+4	; 0x04
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <enterpass+0xe2>
     c44:	9c 83       	std	Y+4, r25	; 0x04
     c46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c48:	8d 81       	ldd	r24, Y+5	; 0x05
     c4a:	9e 81       	ldd	r25, Y+6	; 0x06
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	69 f7       	brne	.-38     	; 0xc34 <enterpass+0xd6>
     c5a:	14 c0       	rjmp	.+40     	; 0xc84 <enterpass+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c5c:	6f 81       	ldd	r22, Y+7	; 0x07
     c5e:	78 85       	ldd	r23, Y+8	; 0x08
     c60:	89 85       	ldd	r24, Y+9	; 0x09
     c62:	9a 85       	ldd	r25, Y+10	; 0x0a
     c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	9e 83       	std	Y+6, r25	; 0x06
     c6e:	8d 83       	std	Y+5, r24	; 0x05
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	9a 83       	std	Y+2, r25	; 0x02
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	9a 81       	ldd	r25, Y+2	; 0x02
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <enterpass+0x11e>
     c80:	9a 83       	std	Y+2, r25	; 0x02
     c82:	89 83       	std	Y+1, r24	; 0x01

void enterpass(uint8 *pass)
{
	uint8 key_num;

	for (int i = 0; i < 5; i++) {
     c84:	8f 85       	ldd	r24, Y+15	; 0x0f
     c86:	98 89       	ldd	r25, Y+16	; 0x10
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	98 8b       	std	Y+16, r25	; 0x10
     c8c:	8f 87       	std	Y+15, r24	; 0x0f
     c8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c90:	98 89       	ldd	r25, Y+16	; 0x10
     c92:	85 30       	cpi	r24, 0x05	; 5
     c94:	91 05       	cpc	r25, r1
     c96:	0c f4       	brge	.+2      	; 0xc9a <enterpass+0x13c>
     c98:	71 cf       	rjmp	.-286    	; 0xb7c <enterpass+0x1e>
			pass[i] = key_num;
			LCD_displayCharacter('*'); /* display the pressed keypad switch */
		}
		_delay_ms(500);
	}
}
     c9a:	63 96       	adiw	r28, 0x13	; 19
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	cd bf       	out	0x3d, r28	; 61
     ca6:	cf 91       	pop	r28
     ca8:	df 91       	pop	r29
     caa:	08 95       	ret

00000cac <sendpass>:

void sendpass(uint8 *pass)
{
     cac:	df 93       	push	r29
     cae:	cf 93       	push	r28
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	62 97       	sbiw	r28, 0x12	; 18
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	9a 8b       	std	Y+18, r25	; 0x12
     cc2:	89 8b       	std	Y+17, r24	; 0x11

	for (int i = 0; i < 5; i++) {
     cc4:	18 8a       	std	Y+16, r1	; 0x10
     cc6:	1f 86       	std	Y+15, r1	; 0x0f
     cc8:	81 c0       	rjmp	.+258    	; 0xdcc <sendpass+0x120>

		UART_sendByte(pass[i]);
     cca:	2f 85       	ldd	r18, Y+15	; 0x0f
     ccc:	38 89       	ldd	r19, Y+16	; 0x10
     cce:	89 89       	ldd	r24, Y+17	; 0x11
     cd0:	9a 89       	ldd	r25, Y+18	; 0x12
     cd2:	fc 01       	movw	r30, r24
     cd4:	e2 0f       	add	r30, r18
     cd6:	f3 1f       	adc	r31, r19
     cd8:	80 81       	ld	r24, Z
     cda:	0e 94 36 18 	call	0x306c	; 0x306c <UART_sendByte>
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	aa ef       	ldi	r26, 0xFA	; 250
     ce4:	b3 e4       	ldi	r27, 0x43	; 67
     ce6:	8b 87       	std	Y+11, r24	; 0x0b
     ce8:	9c 87       	std	Y+12, r25	; 0x0c
     cea:	ad 87       	std	Y+13, r26	; 0x0d
     cec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cee:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	4a e7       	ldi	r20, 0x7A	; 122
     cfc:	53 e4       	ldi	r21, 0x43	; 67
     cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	8f 83       	std	Y+7, r24	; 0x07
     d08:	98 87       	std	Y+8, r25	; 0x08
     d0a:	a9 87       	std	Y+9, r26	; 0x09
     d0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d0e:	6f 81       	ldd	r22, Y+7	; 0x07
     d10:	78 85       	ldd	r23, Y+8	; 0x08
     d12:	89 85       	ldd	r24, Y+9	; 0x09
     d14:	9a 85       	ldd	r25, Y+10	; 0x0a
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e8       	ldi	r20, 0x80	; 128
     d1c:	5f e3       	ldi	r21, 0x3F	; 63
     d1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d22:	88 23       	and	r24, r24
     d24:	2c f4       	brge	.+10     	; 0xd30 <sendpass+0x84>
		__ticks = 1;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	9e 83       	std	Y+6, r25	; 0x06
     d2c:	8d 83       	std	Y+5, r24	; 0x05
     d2e:	3f c0       	rjmp	.+126    	; 0xdae <sendpass+0x102>
	else if (__tmp > 65535)
     d30:	6f 81       	ldd	r22, Y+7	; 0x07
     d32:	78 85       	ldd	r23, Y+8	; 0x08
     d34:	89 85       	ldd	r24, Y+9	; 0x09
     d36:	9a 85       	ldd	r25, Y+10	; 0x0a
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	3f ef       	ldi	r19, 0xFF	; 255
     d3c:	4f e7       	ldi	r20, 0x7F	; 127
     d3e:	57 e4       	ldi	r21, 0x47	; 71
     d40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d44:	18 16       	cp	r1, r24
     d46:	4c f5       	brge	.+82     	; 0xd9a <sendpass+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d48:	6b 85       	ldd	r22, Y+11	; 0x0b
     d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e2       	ldi	r20, 0x20	; 32
     d56:	51 e4       	ldi	r21, 0x41	; 65
     d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	bc 01       	movw	r22, r24
     d62:	cd 01       	movw	r24, r26
     d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
     d70:	0f c0       	rjmp	.+30     	; 0xd90 <sendpass+0xe4>
     d72:	89 e1       	ldi	r24, 0x19	; 25
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	9c 83       	std	Y+4, r25	; 0x04
     d78:	8b 83       	std	Y+3, r24	; 0x03
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	9c 81       	ldd	r25, Y+4	; 0x04
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <sendpass+0xd2>
     d82:	9c 83       	std	Y+4, r25	; 0x04
     d84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d86:	8d 81       	ldd	r24, Y+5	; 0x05
     d88:	9e 81       	ldd	r25, Y+6	; 0x06
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	9e 83       	std	Y+6, r25	; 0x06
     d8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d90:	8d 81       	ldd	r24, Y+5	; 0x05
     d92:	9e 81       	ldd	r25, Y+6	; 0x06
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	69 f7       	brne	.-38     	; 0xd72 <sendpass+0xc6>
     d98:	14 c0       	rjmp	.+40     	; 0xdc2 <sendpass+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9a:	6f 81       	ldd	r22, Y+7	; 0x07
     d9c:	78 85       	ldd	r23, Y+8	; 0x08
     d9e:	89 85       	ldd	r24, Y+9	; 0x09
     da0:	9a 85       	ldd	r25, Y+10	; 0x0a
     da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	9e 83       	std	Y+6, r25	; 0x06
     dac:	8d 83       	std	Y+5, r24	; 0x05
     dae:	8d 81       	ldd	r24, Y+5	; 0x05
     db0:	9e 81       	ldd	r25, Y+6	; 0x06
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	89 83       	std	Y+1, r24	; 0x01
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <sendpass+0x10e>
     dbe:	9a 83       	std	Y+2, r25	; 0x02
     dc0:	89 83       	std	Y+1, r24	; 0x01
}

void sendpass(uint8 *pass)
{

	for (int i = 0; i < 5; i++) {
     dc2:	8f 85       	ldd	r24, Y+15	; 0x0f
     dc4:	98 89       	ldd	r25, Y+16	; 0x10
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	98 8b       	std	Y+16, r25	; 0x10
     dca:	8f 87       	std	Y+15, r24	; 0x0f
     dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dce:	98 89       	ldd	r25, Y+16	; 0x10
     dd0:	85 30       	cpi	r24, 0x05	; 5
     dd2:	91 05       	cpc	r25, r1
     dd4:	0c f4       	brge	.+2      	; 0xdd8 <sendpass+0x12c>
     dd6:	79 cf       	rjmp	.-270    	; 0xcca <sendpass+0x1e>
		UART_sendByte(pass[i]);
		_delay_ms(500);
	}


}
     dd8:	62 96       	adiw	r28, 0x12	; 18
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <newpass>:


void newpass(uint8 matched_flag1,uint8 *pass1,uint8 *pass2)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	a4 97       	sbiw	r28, 0x24	; 36
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	88 a3       	std	Y+32, r24	; 0x20
     e00:	7a a3       	std	Y+34, r23	; 0x22
     e02:	69 a3       	std	Y+33, r22	; 0x21
     e04:	5c a3       	std	Y+36, r21	; 0x24
     e06:	4b a3       	std	Y+35, r20	; 0x23
	uint8 step1=1;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	8f 8f       	std	Y+31, r24	; 0x1f
     e0c:	4c c1       	rjmp	.+664    	; 0x10a6 <newpass+0x2bc>
	while(step1)
	{
		LCD_clearScreen();
     e0e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
		LCD_displayString("Plz enter pass:");
     e12:	80 e6       	ldi	r24, 0x60	; 96
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_displayString>
		LCD_moveCursor(1, 0);
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_moveCursor>
		enterpass(pass1);
     e22:	89 a1       	ldd	r24, Y+33	; 0x21
     e24:	9a a1       	ldd	r25, Y+34	; 0x22
     e26:	0e 94 af 05 	call	0xb5e	; 0xb5e <enterpass>
		if(KEYPAD_getPressedKey() == '=')
     e2a:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <KEYPAD_getPressedKey>
     e2e:	8d 33       	cpi	r24, 0x3D	; 61
     e30:	49 f4       	brne	.+18     	; 0xe44 <newpass+0x5a>
		{
			LCD_clearScreen();
     e32:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
			UART_sendByte(STORE_EEPROM); /*       mc1 send pass to mc2 to store in eeprom         */
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	0e 94 36 18 	call	0x306c	; 0x306c <UART_sendByte>
			sendpass(pass1);
     e3c:	89 a1       	ldd	r24, Y+33	; 0x21
     e3e:	9a a1       	ldd	r25, Y+34	; 0x22
     e40:	0e 94 56 06 	call	0xcac	; 0xcac <sendpass>
		}
		LCD_clearScreen();
     e44:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
		LCD_displayString("Reenter password:");
     e48:	80 e7       	ldi	r24, 0x70	; 112
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_displayString>
		LCD_moveCursor(1, 0);
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_moveCursor>
		enterpass(pass2);
     e58:	8b a1       	ldd	r24, Y+35	; 0x23
     e5a:	9c a1       	ldd	r25, Y+36	; 0x24
     e5c:	0e 94 af 05 	call	0xb5e	; 0xb5e <enterpass>

		if (KEYPAD_getPressedKey() == '=') {
     e60:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <KEYPAD_getPressedKey>
     e64:	8d 33       	cpi	r24, 0x3D	; 61
     e66:	09 f0       	breq	.+2      	; 0xe6a <newpass+0x80>
     e68:	1e c1       	rjmp	.+572    	; 0x10a6 <newpass+0x2bc>
			LCD_clearScreen();
     e6a:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
			for (int i = 0; i < 5; i++) {
     e6e:	1e 8e       	std	Y+30, r1	; 0x1e
     e70:	1d 8e       	std	Y+29, r1	; 0x1d
     e72:	1c c0       	rjmp	.+56     	; 0xeac <newpass+0xc2>
				if (pass1[i] == pass2[i]) {
     e74:	2d 8d       	ldd	r18, Y+29	; 0x1d
     e76:	3e 8d       	ldd	r19, Y+30	; 0x1e
     e78:	89 a1       	ldd	r24, Y+33	; 0x21
     e7a:	9a a1       	ldd	r25, Y+34	; 0x22
     e7c:	fc 01       	movw	r30, r24
     e7e:	e2 0f       	add	r30, r18
     e80:	f3 1f       	adc	r31, r19
     e82:	40 81       	ld	r20, Z
     e84:	2d 8d       	ldd	r18, Y+29	; 0x1d
     e86:	3e 8d       	ldd	r19, Y+30	; 0x1e
     e88:	8b a1       	ldd	r24, Y+35	; 0x23
     e8a:	9c a1       	ldd	r25, Y+36	; 0x24
     e8c:	fc 01       	movw	r30, r24
     e8e:	e2 0f       	add	r30, r18
     e90:	f3 1f       	adc	r31, r19
     e92:	80 81       	ld	r24, Z
     e94:	48 17       	cp	r20, r24
     e96:	39 f4       	brne	.+14     	; 0xea6 <newpass+0xbc>
					matched_flag1 = 0;
     e98:	18 a2       	std	Y+32, r1	; 0x20
		LCD_moveCursor(1, 0);
		enterpass(pass2);

		if (KEYPAD_getPressedKey() == '=') {
			LCD_clearScreen();
			for (int i = 0; i < 5; i++) {
     e9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e9e:	01 96       	adiw	r24, 0x01	; 1
     ea0:	9e 8f       	std	Y+30, r25	; 0x1e
     ea2:	8d 8f       	std	Y+29, r24	; 0x1d
     ea4:	03 c0       	rjmp	.+6      	; 0xeac <newpass+0xc2>
				if (pass1[i] == pass2[i]) {
					matched_flag1 = 0;
				} else {
					matched_flag1 = 1;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	88 a3       	std	Y+32, r24	; 0x20
     eaa:	05 c0       	rjmp	.+10     	; 0xeb6 <newpass+0xcc>
		LCD_moveCursor(1, 0);
		enterpass(pass2);

		if (KEYPAD_getPressedKey() == '=') {
			LCD_clearScreen();
			for (int i = 0; i < 5; i++) {
     eac:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eae:	9e 8d       	ldd	r25, Y+30	; 0x1e
     eb0:	85 30       	cpi	r24, 0x05	; 5
     eb2:	91 05       	cpc	r25, r1
     eb4:	fc f2       	brlt	.-66     	; 0xe74 <newpass+0x8a>
				} else {
					matched_flag1 = 1;
					break;
				}
			}
			if (matched_flag1 == 0) {
     eb6:	88 a1       	ldd	r24, Y+32	; 0x20
     eb8:	88 23       	and	r24, r24
     eba:	09 f0       	breq	.+2      	; 0xebe <newpass+0xd4>
     ebc:	7a c0       	rjmp	.+244    	; 0xfb2 <newpass+0x1c8>
				LCD_displayString("Saved");
     ebe:	82 e8       	ldi	r24, 0x82	; 130
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_displayString>
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	aa ef       	ldi	r26, 0xFA	; 250
     ecc:	b3 e4       	ldi	r27, 0x43	; 67
     ece:	89 8f       	std	Y+25, r24	; 0x19
     ed0:	9a 8f       	std	Y+26, r25	; 0x1a
     ed2:	ab 8f       	std	Y+27, r26	; 0x1b
     ed4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed6:	69 8d       	ldd	r22, Y+25	; 0x19
     ed8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     edc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	4a e7       	ldi	r20, 0x7A	; 122
     ee4:	53 e4       	ldi	r21, 0x43	; 67
     ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	8d 8b       	std	Y+21, r24	; 0x15
     ef0:	9e 8b       	std	Y+22, r25	; 0x16
     ef2:	af 8b       	std	Y+23, r26	; 0x17
     ef4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ef6:	6d 89       	ldd	r22, Y+21	; 0x15
     ef8:	7e 89       	ldd	r23, Y+22	; 0x16
     efa:	8f 89       	ldd	r24, Y+23	; 0x17
     efc:	98 8d       	ldd	r25, Y+24	; 0x18
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e8       	ldi	r20, 0x80	; 128
     f04:	5f e3       	ldi	r21, 0x3F	; 63
     f06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f0a:	88 23       	and	r24, r24
     f0c:	2c f4       	brge	.+10     	; 0xf18 <newpass+0x12e>
		__ticks = 1;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	9c 8b       	std	Y+20, r25	; 0x14
     f14:	8b 8b       	std	Y+19, r24	; 0x13
     f16:	3f c0       	rjmp	.+126    	; 0xf96 <newpass+0x1ac>
	else if (__tmp > 65535)
     f18:	6d 89       	ldd	r22, Y+21	; 0x15
     f1a:	7e 89       	ldd	r23, Y+22	; 0x16
     f1c:	8f 89       	ldd	r24, Y+23	; 0x17
     f1e:	98 8d       	ldd	r25, Y+24	; 0x18
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	3f ef       	ldi	r19, 0xFF	; 255
     f24:	4f e7       	ldi	r20, 0x7F	; 127
     f26:	57 e4       	ldi	r21, 0x47	; 71
     f28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f2c:	18 16       	cp	r1, r24
     f2e:	4c f5       	brge	.+82     	; 0xf82 <newpass+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f30:	69 8d       	ldd	r22, Y+25	; 0x19
     f32:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f34:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f36:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	40 e2       	ldi	r20, 0x20	; 32
     f3e:	51 e4       	ldi	r21, 0x41	; 65
     f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	bc 01       	movw	r22, r24
     f4a:	cd 01       	movw	r24, r26
     f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	9c 8b       	std	Y+20, r25	; 0x14
     f56:	8b 8b       	std	Y+19, r24	; 0x13
     f58:	0f c0       	rjmp	.+30     	; 0xf78 <newpass+0x18e>
     f5a:	89 e1       	ldi	r24, 0x19	; 25
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	9a 8b       	std	Y+18, r25	; 0x12
     f60:	89 8b       	std	Y+17, r24	; 0x11
     f62:	89 89       	ldd	r24, Y+17	; 0x11
     f64:	9a 89       	ldd	r25, Y+18	; 0x12
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	f1 f7       	brne	.-4      	; 0xf66 <newpass+0x17c>
     f6a:	9a 8b       	std	Y+18, r25	; 0x12
     f6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6e:	8b 89       	ldd	r24, Y+19	; 0x13
     f70:	9c 89       	ldd	r25, Y+20	; 0x14
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	9c 8b       	std	Y+20, r25	; 0x14
     f76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f78:	8b 89       	ldd	r24, Y+19	; 0x13
     f7a:	9c 89       	ldd	r25, Y+20	; 0x14
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	69 f7       	brne	.-38     	; 0xf5a <newpass+0x170>
     f80:	14 c0       	rjmp	.+40     	; 0xfaa <newpass+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f82:	6d 89       	ldd	r22, Y+21	; 0x15
     f84:	7e 89       	ldd	r23, Y+22	; 0x16
     f86:	8f 89       	ldd	r24, Y+23	; 0x17
     f88:	98 8d       	ldd	r25, Y+24	; 0x18
     f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	9c 8b       	std	Y+20, r25	; 0x14
     f94:	8b 8b       	std	Y+19, r24	; 0x13
     f96:	8b 89       	ldd	r24, Y+19	; 0x13
     f98:	9c 89       	ldd	r25, Y+20	; 0x14
     f9a:	98 8b       	std	Y+16, r25	; 0x10
     f9c:	8f 87       	std	Y+15, r24	; 0x0f
     f9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa0:	98 89       	ldd	r25, Y+16	; 0x10
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <newpass+0x1b8>
     fa6:	98 8b       	std	Y+16, r25	; 0x10
     fa8:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				LCD_clearScreen();
     faa:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
				step1=0;
     fae:	1f 8e       	std	Y+31, r1	; 0x1f
     fb0:	7a c0       	rjmp	.+244    	; 0x10a6 <newpass+0x2bc>
			} else {
				LCD_clearScreen();
     fb2:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
				LCD_displayString("Wrong password");
     fb6:	88 e8       	ldi	r24, 0x88	; 136
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_displayString>
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	aa ef       	ldi	r26, 0xFA	; 250
     fc4:	b3 e4       	ldi	r27, 0x43	; 67
     fc6:	8b 87       	std	Y+11, r24	; 0x0b
     fc8:	9c 87       	std	Y+12, r25	; 0x0c
     fca:	ad 87       	std	Y+13, r26	; 0x0d
     fcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fce:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	4a e7       	ldi	r20, 0x7A	; 122
     fdc:	53 e4       	ldi	r21, 0x43	; 67
     fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	8f 83       	std	Y+7, r24	; 0x07
     fe8:	98 87       	std	Y+8, r25	; 0x08
     fea:	a9 87       	std	Y+9, r26	; 0x09
     fec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fee:	6f 81       	ldd	r22, Y+7	; 0x07
     ff0:	78 85       	ldd	r23, Y+8	; 0x08
     ff2:	89 85       	ldd	r24, Y+9	; 0x09
     ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	40 e8       	ldi	r20, 0x80	; 128
     ffc:	5f e3       	ldi	r21, 0x3F	; 63
     ffe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1002:	88 23       	and	r24, r24
    1004:	2c f4       	brge	.+10     	; 0x1010 <newpass+0x226>
		__ticks = 1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	9e 83       	std	Y+6, r25	; 0x06
    100c:	8d 83       	std	Y+5, r24	; 0x05
    100e:	3f c0       	rjmp	.+126    	; 0x108e <newpass+0x2a4>
	else if (__tmp > 65535)
    1010:	6f 81       	ldd	r22, Y+7	; 0x07
    1012:	78 85       	ldd	r23, Y+8	; 0x08
    1014:	89 85       	ldd	r24, Y+9	; 0x09
    1016:	9a 85       	ldd	r25, Y+10	; 0x0a
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	3f ef       	ldi	r19, 0xFF	; 255
    101c:	4f e7       	ldi	r20, 0x7F	; 127
    101e:	57 e4       	ldi	r21, 0x47	; 71
    1020:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1024:	18 16       	cp	r1, r24
    1026:	4c f5       	brge	.+82     	; 0x107a <newpass+0x290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1028:	6b 85       	ldd	r22, Y+11	; 0x0b
    102a:	7c 85       	ldd	r23, Y+12	; 0x0c
    102c:	8d 85       	ldd	r24, Y+13	; 0x0d
    102e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e2       	ldi	r20, 0x20	; 32
    1036:	51 e4       	ldi	r21, 0x41	; 65
    1038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	bc 01       	movw	r22, r24
    1042:	cd 01       	movw	r24, r26
    1044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	9e 83       	std	Y+6, r25	; 0x06
    104e:	8d 83       	std	Y+5, r24	; 0x05
    1050:	0f c0       	rjmp	.+30     	; 0x1070 <newpass+0x286>
    1052:	89 e1       	ldi	r24, 0x19	; 25
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	9c 83       	std	Y+4, r25	; 0x04
    1058:	8b 83       	std	Y+3, r24	; 0x03
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	9c 81       	ldd	r25, Y+4	; 0x04
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <newpass+0x274>
    1062:	9c 83       	std	Y+4, r25	; 0x04
    1064:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1066:	8d 81       	ldd	r24, Y+5	; 0x05
    1068:	9e 81       	ldd	r25, Y+6	; 0x06
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	9e 83       	std	Y+6, r25	; 0x06
    106e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	9e 81       	ldd	r25, Y+6	; 0x06
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	69 f7       	brne	.-38     	; 0x1052 <newpass+0x268>
    1078:	14 c0       	rjmp	.+40     	; 0x10a2 <newpass+0x2b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107a:	6f 81       	ldd	r22, Y+7	; 0x07
    107c:	78 85       	ldd	r23, Y+8	; 0x08
    107e:	89 85       	ldd	r24, Y+9	; 0x09
    1080:	9a 85       	ldd	r25, Y+10	; 0x0a
    1082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	9e 83       	std	Y+6, r25	; 0x06
    108c:	8d 83       	std	Y+5, r24	; 0x05
    108e:	8d 81       	ldd	r24, Y+5	; 0x05
    1090:	9e 81       	ldd	r25, Y+6	; 0x06
    1092:	9a 83       	std	Y+2, r25	; 0x02
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	9a 81       	ldd	r25, Y+2	; 0x02
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <newpass+0x2b0>
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				LCD_clearScreen();
    10a2:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>


void newpass(uint8 matched_flag1,uint8 *pass1,uint8 *pass2)
{
	uint8 step1=1;
	while(step1)
    10a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10a8:	88 23       	and	r24, r24
    10aa:	09 f0       	breq	.+2      	; 0x10ae <newpass+0x2c4>
    10ac:	b0 ce       	rjmp	.-672    	; 0xe0e <newpass+0x24>

		}

	}

}
    10ae:	a4 96       	adiw	r28, 0x24	; 36
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <BUZZER>:

void BUZZER()
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(BUZZER_ON); /* a command to make the CONTROL_ECU ready for using the buzzer */
    10c8:	86 ef       	ldi	r24, 0xF6	; 246
    10ca:	0e 94 36 18 	call	0x306c	; 0x306c <UART_sendByte>
	LCD_clearScreen();
    10ce:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
	LCD_displayString("ERROR!!!!");
    10d2:	87 e9       	ldi	r24, 0x97	; 151
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_displayString>
	g_tick = 0; /* begin the counts again to get the needed 60 seconds (1 minute) */
    10da:	10 92 46 01 	sts	0x0146, r1
	while (g_tick <= 60)
    10de:	80 91 46 01 	lds	r24, 0x0146
    10e2:	8d 33       	cpi	r24, 0x3D	; 61
    10e4:	e0 f3       	brcs	.-8      	; 0x10de <BUZZER+0x1e>
		;		/* wait until the 60 seconds more are over */
	g_tick = 0; /* make the counter zero again as it finished */
    10e6:	10 92 46 01 	sts	0x0146, r1
	LCD_clearScreen();
    10ea:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
	UART_sendByte(BUZZER_OFF);
    10ee:	87 ef       	ldi	r24, 0xF7	; 247
    10f0:	0e 94 36 18 	call	0x306c	; 0x306c <UART_sendByte>
}
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <main>:


int main()
{
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	cf 56       	subi	r28, 0x6F	; 111
    1108:	d0 40       	sbci	r29, 0x00	; 0
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
	uint8 password1[5];
	uint8 password2[5];
	uint8 eeprom_password[5];
	uint8 old_password[5];     /*old password entered by the user*/
	uint8 matched_flag1=0;
    1114:	fe 01       	movw	r30, r28
    1116:	ec 5b       	subi	r30, 0xBC	; 188
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	10 82       	st	Z, r1
	uint8 matched_flag2=0;
    111c:	fe 01       	movw	r30, r28
    111e:	ed 5b       	subi	r30, 0xBD	; 189
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	10 82       	st	Z, r1
	uint8 error_flag=0;
    1124:	fe 01       	movw	r30, r28
    1126:	ee 5b       	subi	r30, 0xBE	; 190
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	10 82       	st	Z, r1
	uint8 correct_flag=0;
    112c:	fe 01       	movw	r30, r28
    112e:	ef 5b       	subi	r30, 0xBF	; 191
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	10 82       	st	Z, r1
	 * parity check is disabled
	 * stop bit is one bit
	 * baud rate is 9600
	 */

	UART_ConfigType config1 = {EIGHT, DISABLED, ONE_BIT, BR7};
    1134:	ce 01       	movw	r24, r28
    1136:	87 5a       	subi	r24, 0xA7	; 167
    1138:	9f 4f       	sbci	r25, 0xFF	; 255
    113a:	a8 96       	adiw	r28, 0x28	; 40
    113c:	9f af       	std	Y+63, r25	; 0x3f
    113e:	8e af       	std	Y+62, r24	; 0x3e
    1140:	a8 97       	sbiw	r28, 0x28	; 40
    1142:	8e e3       	ldi	r24, 0x3E	; 62
    1144:	91 e0       	ldi	r25, 0x01	; 1
    1146:	aa 96       	adiw	r28, 0x2a	; 42
    1148:	9f af       	std	Y+63, r25	; 0x3f
    114a:	8e af       	std	Y+62, r24	; 0x3e
    114c:	aa 97       	sbiw	r28, 0x2a	; 42
    114e:	97 e0       	ldi	r25, 0x07	; 7
    1150:	ab 96       	adiw	r28, 0x2b	; 43
    1152:	9f af       	std	Y+63, r25	; 0x3f
    1154:	ab 97       	sbiw	r28, 0x2b	; 43
    1156:	aa 96       	adiw	r28, 0x2a	; 42
    1158:	ee ad       	ldd	r30, Y+62	; 0x3e
    115a:	ff ad       	ldd	r31, Y+63	; 0x3f
    115c:	aa 97       	sbiw	r28, 0x2a	; 42
    115e:	00 80       	ld	r0, Z
    1160:	aa 96       	adiw	r28, 0x2a	; 42
    1162:	8e ad       	ldd	r24, Y+62	; 0x3e
    1164:	9f ad       	ldd	r25, Y+63	; 0x3f
    1166:	aa 97       	sbiw	r28, 0x2a	; 42
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	aa 96       	adiw	r28, 0x2a	; 42
    116c:	9f af       	std	Y+63, r25	; 0x3f
    116e:	8e af       	std	Y+62, r24	; 0x3e
    1170:	aa 97       	sbiw	r28, 0x2a	; 42
    1172:	a8 96       	adiw	r28, 0x28	; 40
    1174:	ee ad       	ldd	r30, Y+62	; 0x3e
    1176:	ff ad       	ldd	r31, Y+63	; 0x3f
    1178:	a8 97       	sbiw	r28, 0x28	; 40
    117a:	00 82       	st	Z, r0
    117c:	a8 96       	adiw	r28, 0x28	; 40
    117e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1180:	9f ad       	ldd	r25, Y+63	; 0x3f
    1182:	a8 97       	sbiw	r28, 0x28	; 40
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	a8 96       	adiw	r28, 0x28	; 40
    1188:	9f af       	std	Y+63, r25	; 0x3f
    118a:	8e af       	std	Y+62, r24	; 0x3e
    118c:	a8 97       	sbiw	r28, 0x28	; 40
    118e:	ab 96       	adiw	r28, 0x2b	; 43
    1190:	9f ad       	ldd	r25, Y+63	; 0x3f
    1192:	ab 97       	sbiw	r28, 0x2b	; 43
    1194:	91 50       	subi	r25, 0x01	; 1
    1196:	ab 96       	adiw	r28, 0x2b	; 43
    1198:	9f af       	std	Y+63, r25	; 0x3f
    119a:	ab 97       	sbiw	r28, 0x2b	; 43
    119c:	ab 96       	adiw	r28, 0x2b	; 43
    119e:	ef ad       	ldd	r30, Y+63	; 0x3f
    11a0:	ab 97       	sbiw	r28, 0x2b	; 43
    11a2:	ee 23       	and	r30, r30
    11a4:	c1 f6       	brne	.-80     	; 0x1156 <main+0x5c>
	UART_init(&config1); /* Initialize UART with the required configurations */
    11a6:	ce 01       	movw	r24, r28
    11a8:	87 5a       	subi	r24, 0xA7	; 167
    11aa:	9f 4f       	sbci	r25, 0xFF	; 255
    11ac:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <UART_init>
	 * initial value is 0
	 * compare value is 999
	 * prescaler is 1024
	 * the mode is compare mode
	 */
	Timer1_ConfigType config2 = {0, 999, F_CPU_1024, CTC};
    11b0:	ce 01       	movw	r24, r28
    11b2:	80 5a       	subi	r24, 0xA0	; 160
    11b4:	9f 4f       	sbci	r25, 0xFF	; 255
    11b6:	ad 96       	adiw	r28, 0x2d	; 45
    11b8:	9f af       	std	Y+63, r25	; 0x3f
    11ba:	8e af       	std	Y+62, r24	; 0x3e
    11bc:	ad 97       	sbiw	r28, 0x2d	; 45
    11be:	88 e3       	ldi	r24, 0x38	; 56
    11c0:	91 e0       	ldi	r25, 0x01	; 1
    11c2:	af 96       	adiw	r28, 0x2f	; 47
    11c4:	9f af       	std	Y+63, r25	; 0x3f
    11c6:	8e af       	std	Y+62, r24	; 0x3e
    11c8:	af 97       	sbiw	r28, 0x2f	; 47
    11ca:	96 e0       	ldi	r25, 0x06	; 6
    11cc:	e0 96       	adiw	r28, 0x30	; 48
    11ce:	9f af       	std	Y+63, r25	; 0x3f
    11d0:	e0 97       	sbiw	r28, 0x30	; 48
    11d2:	af 96       	adiw	r28, 0x2f	; 47
    11d4:	ee ad       	ldd	r30, Y+62	; 0x3e
    11d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    11d8:	af 97       	sbiw	r28, 0x2f	; 47
    11da:	00 80       	ld	r0, Z
    11dc:	af 96       	adiw	r28, 0x2f	; 47
    11de:	8e ad       	ldd	r24, Y+62	; 0x3e
    11e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    11e2:	af 97       	sbiw	r28, 0x2f	; 47
    11e4:	01 96       	adiw	r24, 0x01	; 1
    11e6:	af 96       	adiw	r28, 0x2f	; 47
    11e8:	9f af       	std	Y+63, r25	; 0x3f
    11ea:	8e af       	std	Y+62, r24	; 0x3e
    11ec:	af 97       	sbiw	r28, 0x2f	; 47
    11ee:	ad 96       	adiw	r28, 0x2d	; 45
    11f0:	ee ad       	ldd	r30, Y+62	; 0x3e
    11f2:	ff ad       	ldd	r31, Y+63	; 0x3f
    11f4:	ad 97       	sbiw	r28, 0x2d	; 45
    11f6:	00 82       	st	Z, r0
    11f8:	ad 96       	adiw	r28, 0x2d	; 45
    11fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    11fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    11fe:	ad 97       	sbiw	r28, 0x2d	; 45
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	ad 96       	adiw	r28, 0x2d	; 45
    1204:	9f af       	std	Y+63, r25	; 0x3f
    1206:	8e af       	std	Y+62, r24	; 0x3e
    1208:	ad 97       	sbiw	r28, 0x2d	; 45
    120a:	e0 96       	adiw	r28, 0x30	; 48
    120c:	9f ad       	ldd	r25, Y+63	; 0x3f
    120e:	e0 97       	sbiw	r28, 0x30	; 48
    1210:	91 50       	subi	r25, 0x01	; 1
    1212:	e0 96       	adiw	r28, 0x30	; 48
    1214:	9f af       	std	Y+63, r25	; 0x3f
    1216:	e0 97       	sbiw	r28, 0x30	; 48
    1218:	e0 96       	adiw	r28, 0x30	; 48
    121a:	ef ad       	ldd	r30, Y+63	; 0x3f
    121c:	e0 97       	sbiw	r28, 0x30	; 48
    121e:	ee 23       	and	r30, r30
    1220:	c1 f6       	brne	.-80     	; 0x11d2 <main+0xd8>

	Timer1_init(&config2); /* Initialize TIMER1 with the required configurations */
    1222:	ce 01       	movw	r24, r28
    1224:	80 5a       	subi	r24, 0xA0	; 160
    1226:	9f 4f       	sbci	r25, 0xFF	; 255
    1228:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <Timer1_init>



	Timer1_setCallBack(TIMER1_ticks); /* set the TIMER1_ticks to be the callback function */
    122c:	83 ea       	ldi	r24, 0xA3	; 163
    122e:	95 e0       	ldi	r25, 0x05	; 5
    1230:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <Timer1_setCallBack>

	LCD_init();							  /* Initialize the LCD */
    1234:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_init>

	newpass(matched_flag1,password1,password2);
    1238:	fe 01       	movw	r30, r28
    123a:	ec 5b       	subi	r30, 0xBC	; 188
    123c:	ff 4f       	sbci	r31, 0xFF	; 255
    123e:	9e 01       	movw	r18, r28
    1240:	2b 5b       	subi	r18, 0xBB	; 187
    1242:	3f 4f       	sbci	r19, 0xFF	; 255
    1244:	ae 01       	movw	r20, r28
    1246:	46 5b       	subi	r20, 0xB6	; 182
    1248:	5f 4f       	sbci	r21, 0xFF	; 255
    124a:	80 81       	ld	r24, Z
    124c:	b9 01       	movw	r22, r18
    124e:	0e 94 f5 06 	call	0xdea	; 0xdea <newpass>
	matched_flag1=0;
    1252:	fe 01       	movw	r30, r28
    1254:	ec 5b       	subi	r30, 0xBC	; 188
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	10 82       	st	Z, r1

	/* receive password from eeprom interfaced with MC2  */
	UART_sendByte(MC_READY);
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	0e 94 36 18 	call	0x306c	; 0x306c <UART_sendByte>
	for (int i = 0; i < 5; i++) {
    1260:	fe 01       	movw	r30, r28
    1262:	ff 96       	adiw	r30, 0x3f	; 63
    1264:	11 82       	std	Z+1, r1	; 0x01
    1266:	10 82       	st	Z, r1
    1268:	89 c0       	rjmp	.+274    	; 0x137c <main+0x282>
		eeprom_password[i] = UART_recieveByte();
    126a:	fe 01       	movw	r30, r28
    126c:	ff 96       	adiw	r30, 0x3f	; 63
    126e:	00 81       	ld	r16, Z
    1270:	11 81       	ldd	r17, Z+1	; 0x01
    1272:	0e 94 4d 18 	call	0x309a	; 0x309a <UART_recieveByte>
    1276:	28 2f       	mov	r18, r24
    1278:	ce 01       	movw	r24, r28
    127a:	81 5b       	subi	r24, 0xB1	; 177
    127c:	9f 4f       	sbci	r25, 0xFF	; 255
    127e:	fc 01       	movw	r30, r24
    1280:	e0 0f       	add	r30, r16
    1282:	f1 1f       	adc	r31, r17
    1284:	20 83       	st	Z, r18
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	a8 ec       	ldi	r26, 0xC8	; 200
    128c:	b2 e4       	ldi	r27, 0x42	; 66
    128e:	8d ab       	std	Y+53, r24	; 0x35
    1290:	9e ab       	std	Y+54, r25	; 0x36
    1292:	af ab       	std	Y+55, r26	; 0x37
    1294:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1296:	6d a9       	ldd	r22, Y+53	; 0x35
    1298:	7e a9       	ldd	r23, Y+54	; 0x36
    129a:	8f a9       	ldd	r24, Y+55	; 0x37
    129c:	98 ad       	ldd	r25, Y+56	; 0x38
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	4a e7       	ldi	r20, 0x7A	; 122
    12a4:	53 e4       	ldi	r21, 0x43	; 67
    12a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	89 ab       	std	Y+49, r24	; 0x31
    12b0:	9a ab       	std	Y+50, r25	; 0x32
    12b2:	ab ab       	std	Y+51, r26	; 0x33
    12b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12b6:	69 a9       	ldd	r22, Y+49	; 0x31
    12b8:	7a a9       	ldd	r23, Y+50	; 0x32
    12ba:	8b a9       	ldd	r24, Y+51	; 0x33
    12bc:	9c a9       	ldd	r25, Y+52	; 0x34
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e8       	ldi	r20, 0x80	; 128
    12c4:	5f e3       	ldi	r21, 0x3F	; 63
    12c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ca:	88 23       	and	r24, r24
    12cc:	2c f4       	brge	.+10     	; 0x12d8 <main+0x1de>
		__ticks = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	98 ab       	std	Y+48, r25	; 0x30
    12d4:	8f a7       	std	Y+47, r24	; 0x2f
    12d6:	3f c0       	rjmp	.+126    	; 0x1356 <main+0x25c>
	else if (__tmp > 65535)
    12d8:	69 a9       	ldd	r22, Y+49	; 0x31
    12da:	7a a9       	ldd	r23, Y+50	; 0x32
    12dc:	8b a9       	ldd	r24, Y+51	; 0x33
    12de:	9c a9       	ldd	r25, Y+52	; 0x34
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	3f ef       	ldi	r19, 0xFF	; 255
    12e4:	4f e7       	ldi	r20, 0x7F	; 127
    12e6:	57 e4       	ldi	r21, 0x47	; 71
    12e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ec:	18 16       	cp	r1, r24
    12ee:	4c f5       	brge	.+82     	; 0x1342 <main+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f0:	6d a9       	ldd	r22, Y+53	; 0x35
    12f2:	7e a9       	ldd	r23, Y+54	; 0x36
    12f4:	8f a9       	ldd	r24, Y+55	; 0x37
    12f6:	98 ad       	ldd	r25, Y+56	; 0x38
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e2       	ldi	r20, 0x20	; 32
    12fe:	51 e4       	ldi	r21, 0x41	; 65
    1300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	98 ab       	std	Y+48, r25	; 0x30
    1316:	8f a7       	std	Y+47, r24	; 0x2f
    1318:	0f c0       	rjmp	.+30     	; 0x1338 <main+0x23e>
    131a:	89 e1       	ldi	r24, 0x19	; 25
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9e a7       	std	Y+46, r25	; 0x2e
    1320:	8d a7       	std	Y+45, r24	; 0x2d
    1322:	8d a5       	ldd	r24, Y+45	; 0x2d
    1324:	9e a5       	ldd	r25, Y+46	; 0x2e
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <main+0x22c>
    132a:	9e a7       	std	Y+46, r25	; 0x2e
    132c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1330:	98 a9       	ldd	r25, Y+48	; 0x30
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	98 ab       	std	Y+48, r25	; 0x30
    1336:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1338:	8f a5       	ldd	r24, Y+47	; 0x2f
    133a:	98 a9       	ldd	r25, Y+48	; 0x30
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	69 f7       	brne	.-38     	; 0x131a <main+0x220>
    1340:	14 c0       	rjmp	.+40     	; 0x136a <main+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1342:	69 a9       	ldd	r22, Y+49	; 0x31
    1344:	7a a9       	ldd	r23, Y+50	; 0x32
    1346:	8b a9       	ldd	r24, Y+51	; 0x33
    1348:	9c a9       	ldd	r25, Y+52	; 0x34
    134a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	98 ab       	std	Y+48, r25	; 0x30
    1354:	8f a7       	std	Y+47, r24	; 0x2f
    1356:	8f a5       	ldd	r24, Y+47	; 0x2f
    1358:	98 a9       	ldd	r25, Y+48	; 0x30
    135a:	9c a7       	std	Y+44, r25	; 0x2c
    135c:	8b a7       	std	Y+43, r24	; 0x2b
    135e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1360:	9c a5       	ldd	r25, Y+44	; 0x2c
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <main+0x268>
    1366:	9c a7       	std	Y+44, r25	; 0x2c
    1368:	8b a7       	std	Y+43, r24	; 0x2b
	newpass(matched_flag1,password1,password2);
	matched_flag1=0;

	/* receive password from eeprom interfaced with MC2  */
	UART_sendByte(MC_READY);
	for (int i = 0; i < 5; i++) {
    136a:	fe 01       	movw	r30, r28
    136c:	ff 96       	adiw	r30, 0x3f	; 63
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	fe 01       	movw	r30, r28
    1376:	ff 96       	adiw	r30, 0x3f	; 63
    1378:	91 83       	std	Z+1, r25	; 0x01
    137a:	80 83       	st	Z, r24
    137c:	fe 01       	movw	r30, r28
    137e:	ff 96       	adiw	r30, 0x3f	; 63
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	85 30       	cpi	r24, 0x05	; 5
    1386:	91 05       	cpc	r25, r1
    1388:	0c f4       	brge	.+2      	; 0x138c <main+0x292>
    138a:	6f cf       	rjmp	.-290    	; 0x126a <main+0x170>
	while(1)
	{

		/* Display the main options on the screen */

		LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    138c:	21 ea       	ldi	r18, 0xA1	; 161
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	a9 01       	movw	r20, r18
    1396:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(0, 13, "   ");
    139a:	2f ea       	ldi	r18, 0xAF	; 175
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	6d e0       	ldi	r22, 0x0D	; 13
    13a2:	a9 01       	movw	r20, r18
    13a4:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    13a8:	23 eb       	ldi	r18, 0xB3	; 179
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	a9 01       	movw	r20, r18
    13b2:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 15, "  ");
    13b6:	23 ec       	ldi	r18, 0xC3	; 195
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	6f e0       	ldi	r22, 0x0F	; 15
    13be:	a9 01       	movw	r20, r18
    13c0:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <LCD_displayStringRowColumn>

		if (KEYPAD_getPressedKey() == '+')
    13c4:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <KEYPAD_getPressedKey>
    13c8:	8b 32       	cpi	r24, 0x2B	; 43
    13ca:	09 f0       	breq	.+2      	; 0x13ce <main+0x2d4>
    13cc:	32 c1       	rjmp	.+612    	; 0x1632 <main+0x538>
    13ce:	17 c1       	rjmp	.+558    	; 0x15fe <main+0x504>
		{
			while ((error_flag < 3) && (correct_flag == 0))
			{
				LCD_clearScreen();
    13d0:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
				LCD_displayString("enter password :");
    13d4:	86 ec       	ldi	r24, 0xC6	; 198
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_displayString>
				LCD_moveCursor(1, 0);
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_moveCursor>
				enterpass(old_password);
    13e4:	ce 01       	movw	r24, r28
    13e6:	8c 5a       	subi	r24, 0xAC	; 172
    13e8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ea:	0e 94 af 05 	call	0xb5e	; 0xb5e <enterpass>
				if ((KEYPAD_getPressedKey()) == '=') {
    13ee:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <KEYPAD_getPressedKey>
    13f2:	8d 33       	cpi	r24, 0x3D	; 61
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <main+0x2fe>
    13f6:	03 c1       	rjmp	.+518    	; 0x15fe <main+0x504>
					for (int i = 0; i < 5; i++) {
    13f8:	1e ae       	std	Y+62, r1	; 0x3e
    13fa:	1d ae       	std	Y+61, r1	; 0x3d
    13fc:	24 c0       	rjmp	.+72     	; 0x1446 <main+0x34c>
						if (old_password[i] == eeprom_password[i]) {
    13fe:	2d ad       	ldd	r18, Y+61	; 0x3d
    1400:	3e ad       	ldd	r19, Y+62	; 0x3e
    1402:	ce 01       	movw	r24, r28
    1404:	8c 5a       	subi	r24, 0xAC	; 172
    1406:	9f 4f       	sbci	r25, 0xFF	; 255
    1408:	fc 01       	movw	r30, r24
    140a:	e2 0f       	add	r30, r18
    140c:	f3 1f       	adc	r31, r19
    140e:	40 81       	ld	r20, Z
    1410:	2d ad       	ldd	r18, Y+61	; 0x3d
    1412:	3e ad       	ldd	r19, Y+62	; 0x3e
    1414:	ce 01       	movw	r24, r28
    1416:	81 5b       	subi	r24, 0xB1	; 177
    1418:	9f 4f       	sbci	r25, 0xFF	; 255
    141a:	fc 01       	movw	r30, r24
    141c:	e2 0f       	add	r30, r18
    141e:	f3 1f       	adc	r31, r19
    1420:	80 81       	ld	r24, Z
    1422:	48 17       	cp	r20, r24
    1424:	51 f4       	brne	.+20     	; 0x143a <main+0x340>
							matched_flag2 = 0;
    1426:	fe 01       	movw	r30, r28
    1428:	ed 5b       	subi	r30, 0xBD	; 189
    142a:	ff 4f       	sbci	r31, 0xFF	; 255
    142c:	10 82       	st	Z, r1
				LCD_clearScreen();
				LCD_displayString("enter password :");
				LCD_moveCursor(1, 0);
				enterpass(old_password);
				if ((KEYPAD_getPressedKey()) == '=') {
					for (int i = 0; i < 5; i++) {
    142e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1430:	9e ad       	ldd	r25, Y+62	; 0x3e
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	9e af       	std	Y+62, r25	; 0x3e
    1436:	8d af       	std	Y+61, r24	; 0x3d
    1438:	06 c0       	rjmp	.+12     	; 0x1446 <main+0x34c>
						if (old_password[i] == eeprom_password[i]) {
							matched_flag2 = 0;
						} else {
							matched_flag2 = 1;
    143a:	fe 01       	movw	r30, r28
    143c:	ed 5b       	subi	r30, 0xBD	; 189
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	80 83       	st	Z, r24
    1444:	05 c0       	rjmp	.+10     	; 0x1450 <main+0x356>
				LCD_clearScreen();
				LCD_displayString("enter password :");
				LCD_moveCursor(1, 0);
				enterpass(old_password);
				if ((KEYPAD_getPressedKey()) == '=') {
					for (int i = 0; i < 5; i++) {
    1446:	8d ad       	ldd	r24, Y+61	; 0x3d
    1448:	9e ad       	ldd	r25, Y+62	; 0x3e
    144a:	85 30       	cpi	r24, 0x05	; 5
    144c:	91 05       	cpc	r25, r1
    144e:	bc f2       	brlt	.-82     	; 0x13fe <main+0x304>
						} else {
							matched_flag2 = 1;
							break;
						}
					}
					if (matched_flag2 == 0)
    1450:	fe 01       	movw	r30, r28
    1452:	ed 5b       	subi	r30, 0xBD	; 189
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	80 81       	ld	r24, Z
    1458:	88 23       	and	r24, r24
    145a:	09 f0       	breq	.+2      	; 0x145e <main+0x364>
    145c:	47 c0       	rjmp	.+142    	; 0x14ec <main+0x3f2>
					{

						LCD_clearScreen();
    145e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "Door is");
    1462:	27 ed       	ldi	r18, 0xD7	; 215
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	a9 01       	movw	r20, r18
    146c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 0, "Unlocking");
    1470:	2f ed       	ldi	r18, 0xDF	; 223
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	a9 01       	movw	r20, r18
    147a:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <LCD_displayStringRowColumn>
						UART_sendByte(OPEN);     /* a command to make the CONTROL_ECU ready for using the door(motor) */
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	0e 94 36 18 	call	0x306c	; 0x306c <UART_sendByte>

						g_tick = 0; /* begin the counts again to get the needed 15 seconds */
    1484:	10 92 46 01 	sts	0x0146, r1

						while (g_tick <= 15)
    1488:	80 91 46 01 	lds	r24, 0x0146
    148c:	80 31       	cpi	r24, 0x10	; 16
    148e:	e0 f3       	brcs	.-8      	; 0x1488 <main+0x38e>
							; /* wait until the 15 seconds are over */
						LCD_clearScreen();
    1490:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
						LCD_displayString("WARNING..."); /* warning to warn the user that the door will close in 3 seconds */
    1494:	89 ee       	ldi	r24, 0xE9	; 233
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_displayString>
						UART_sendByte(WAIT);
    149c:	85 ef       	ldi	r24, 0xF5	; 245
    149e:	0e 94 36 18 	call	0x306c	; 0x306c <UART_sendByte>

						while (g_tick <= 18)
    14a2:	80 91 46 01 	lds	r24, 0x0146
    14a6:	83 31       	cpi	r24, 0x13	; 19
    14a8:	e0 f3       	brcs	.-8      	; 0x14a2 <main+0x3a8>
							; /* wait until the 3 seconds more are over */

						LCD_clearScreen();
    14aa:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "Door is");
    14ae:	27 ed       	ldi	r18, 0xD7	; 215
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	a9 01       	movw	r20, r18
    14b8:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 0, "Locking");
    14bc:	24 ef       	ldi	r18, 0xF4	; 244
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	a9 01       	movw	r20, r18
    14c6:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <LCD_displayStringRowColumn>
						UART_sendByte(CLOSE);
    14ca:	84 e0       	ldi	r24, 0x04	; 4
    14cc:	0e 94 36 18 	call	0x306c	; 0x306c <UART_sendByte>
						while (g_tick <= 33)
    14d0:	80 91 46 01 	lds	r24, 0x0146
    14d4:	82 32       	cpi	r24, 0x22	; 34
    14d6:	e0 f3       	brcs	.-8      	; 0x14d0 <main+0x3d6>
							; /* wait until the 15 seconds more are over */

						g_tick = 0; /* make the counter zero again as it finished */
    14d8:	10 92 46 01 	sts	0x0146, r1
						LCD_clearScreen();
    14dc:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
						correct_flag = 1;
    14e0:	fe 01       	movw	r30, r28
    14e2:	ef 5b       	subi	r30, 0xBF	; 191
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	80 83       	st	Z, r24
    14ea:	89 c0       	rjmp	.+274    	; 0x15fe <main+0x504>
					}
					else{
						LCD_clearScreen();
    14ec:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
						LCD_displayString("wrong password");
    14f0:	8c ef       	ldi	r24, 0xFC	; 252
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_displayString>
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a8 ec       	ldi	r26, 0xC8	; 200
    14fe:	b3 e4       	ldi	r27, 0x43	; 67
    1500:	8f a3       	std	Y+39, r24	; 0x27
    1502:	98 a7       	std	Y+40, r25	; 0x28
    1504:	a9 a7       	std	Y+41, r26	; 0x29
    1506:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1508:	6f a1       	ldd	r22, Y+39	; 0x27
    150a:	78 a5       	ldd	r23, Y+40	; 0x28
    150c:	89 a5       	ldd	r24, Y+41	; 0x29
    150e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	4a e7       	ldi	r20, 0x7A	; 122
    1516:	53 e4       	ldi	r21, 0x43	; 67
    1518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	8b a3       	std	Y+35, r24	; 0x23
    1522:	9c a3       	std	Y+36, r25	; 0x24
    1524:	ad a3       	std	Y+37, r26	; 0x25
    1526:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1528:	6b a1       	ldd	r22, Y+35	; 0x23
    152a:	7c a1       	ldd	r23, Y+36	; 0x24
    152c:	8d a1       	ldd	r24, Y+37	; 0x25
    152e:	9e a1       	ldd	r25, Y+38	; 0x26
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e8       	ldi	r20, 0x80	; 128
    1536:	5f e3       	ldi	r21, 0x3F	; 63
    1538:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    153c:	88 23       	and	r24, r24
    153e:	2c f4       	brge	.+10     	; 0x154a <main+0x450>
		__ticks = 1;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	9a a3       	std	Y+34, r25	; 0x22
    1546:	89 a3       	std	Y+33, r24	; 0x21
    1548:	3f c0       	rjmp	.+126    	; 0x15c8 <main+0x4ce>
	else if (__tmp > 65535)
    154a:	6b a1       	ldd	r22, Y+35	; 0x23
    154c:	7c a1       	ldd	r23, Y+36	; 0x24
    154e:	8d a1       	ldd	r24, Y+37	; 0x25
    1550:	9e a1       	ldd	r25, Y+38	; 0x26
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	3f ef       	ldi	r19, 0xFF	; 255
    1556:	4f e7       	ldi	r20, 0x7F	; 127
    1558:	57 e4       	ldi	r21, 0x47	; 71
    155a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    155e:	18 16       	cp	r1, r24
    1560:	4c f5       	brge	.+82     	; 0x15b4 <main+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1562:	6f a1       	ldd	r22, Y+39	; 0x27
    1564:	78 a5       	ldd	r23, Y+40	; 0x28
    1566:	89 a5       	ldd	r24, Y+41	; 0x29
    1568:	9a a5       	ldd	r25, Y+42	; 0x2a
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	40 e2       	ldi	r20, 0x20	; 32
    1570:	51 e4       	ldi	r21, 0x41	; 65
    1572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	bc 01       	movw	r22, r24
    157c:	cd 01       	movw	r24, r26
    157e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9a a3       	std	Y+34, r25	; 0x22
    1588:	89 a3       	std	Y+33, r24	; 0x21
    158a:	0f c0       	rjmp	.+30     	; 0x15aa <main+0x4b0>
    158c:	89 e1       	ldi	r24, 0x19	; 25
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	98 a3       	std	Y+32, r25	; 0x20
    1592:	8f 8f       	std	Y+31, r24	; 0x1f
    1594:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1596:	98 a1       	ldd	r25, Y+32	; 0x20
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <main+0x49e>
    159c:	98 a3       	std	Y+32, r25	; 0x20
    159e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a0:	89 a1       	ldd	r24, Y+33	; 0x21
    15a2:	9a a1       	ldd	r25, Y+34	; 0x22
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	9a a3       	std	Y+34, r25	; 0x22
    15a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15aa:	89 a1       	ldd	r24, Y+33	; 0x21
    15ac:	9a a1       	ldd	r25, Y+34	; 0x22
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	69 f7       	brne	.-38     	; 0x158c <main+0x492>
    15b2:	14 c0       	rjmp	.+40     	; 0x15dc <main+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b4:	6b a1       	ldd	r22, Y+35	; 0x23
    15b6:	7c a1       	ldd	r23, Y+36	; 0x24
    15b8:	8d a1       	ldd	r24, Y+37	; 0x25
    15ba:	9e a1       	ldd	r25, Y+38	; 0x26
    15bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	9a a3       	std	Y+34, r25	; 0x22
    15c6:	89 a3       	std	Y+33, r24	; 0x21
    15c8:	89 a1       	ldd	r24, Y+33	; 0x21
    15ca:	9a a1       	ldd	r25, Y+34	; 0x22
    15cc:	9e 8f       	std	Y+30, r25	; 0x1e
    15ce:	8d 8f       	std	Y+29, r24	; 0x1d
    15d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <main+0x4da>
    15d8:	9e 8f       	std	Y+30, r25	; 0x1e
    15da:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(400);
						error_flag++;
    15dc:	de 01       	movw	r26, r28
    15de:	ae 5b       	subi	r26, 0xBE	; 190
    15e0:	bf 4f       	sbci	r27, 0xFF	; 255
    15e2:	fe 01       	movw	r30, r28
    15e4:	ee 5b       	subi	r30, 0xBE	; 190
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	80 81       	ld	r24, Z
    15ea:	8f 5f       	subi	r24, 0xFF	; 255
    15ec:	8c 93       	st	X, r24
						if (error_flag == 3){
    15ee:	fe 01       	movw	r30, r28
    15f0:	ee 5b       	subi	r30, 0xBE	; 190
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	80 81       	ld	r24, Z
    15f6:	83 30       	cpi	r24, 0x03	; 3
    15f8:	11 f4       	brne	.+4      	; 0x15fe <main+0x504>
							BUZZER();
    15fa:	0e 94 60 08 	call	0x10c0	; 0x10c0 <BUZZER>
		LCD_displayStringRowColumn(1, 0, "- : Change Pass");
		LCD_displayStringRowColumn(1, 15, "  ");

		if (KEYPAD_getPressedKey() == '+')
		{
			while ((error_flag < 3) && (correct_flag == 0))
    15fe:	fe 01       	movw	r30, r28
    1600:	ee 5b       	subi	r30, 0xBE	; 190
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	80 81       	ld	r24, Z
    1606:	83 30       	cpi	r24, 0x03	; 3
    1608:	38 f4       	brcc	.+14     	; 0x1618 <main+0x51e>
    160a:	fe 01       	movw	r30, r28
    160c:	ef 5b       	subi	r30, 0xBF	; 191
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	80 81       	ld	r24, Z
    1612:	88 23       	and	r24, r24
    1614:	09 f4       	brne	.+2      	; 0x1618 <main+0x51e>
    1616:	dc ce       	rjmp	.-584    	; 0x13d0 <main+0x2d6>
							BUZZER();
						}
					}
				}
			}
			matched_flag2 = 0;
    1618:	fe 01       	movw	r30, r28
    161a:	ed 5b       	subi	r30, 0xBD	; 189
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	10 82       	st	Z, r1
			error_flag = 0;
    1620:	fe 01       	movw	r30, r28
    1622:	ee 5b       	subi	r30, 0xBE	; 190
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	10 82       	st	Z, r1
			correct_flag = 0;
    1628:	fe 01       	movw	r30, r28
    162a:	ef 5b       	subi	r30, 0xBF	; 191
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	10 82       	st	Z, r1
    1630:	ad ce       	rjmp	.-678    	; 0x138c <main+0x292>
		}

		else if (KEYPAD_getPressedKey() == '-')
    1632:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <KEYPAD_getPressedKey>
    1636:	8d 32       	cpi	r24, 0x2D	; 45
    1638:	09 f0       	breq	.+2      	; 0x163c <main+0x542>
    163a:	a8 ce       	rjmp	.-688    	; 0x138c <main+0x292>
    163c:	7d c1       	rjmp	.+762    	; 0x1938 <main+0x83e>
		{
			while ((error_flag < 3) && (correct_flag == 0))          /* we can enter wrong password 3 times only */
			{
				LCD_clearScreen();
    163e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
				LCD_displayString("enter old password:");
    1642:	8b e0       	ldi	r24, 0x0B	; 11
    1644:	91 e0       	ldi	r25, 0x01	; 1
    1646:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_displayString>
				LCD_moveCursor(1, 0);
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_moveCursor>
				enterpass(old_password);
    1652:	ce 01       	movw	r24, r28
    1654:	8c 5a       	subi	r24, 0xAC	; 172
    1656:	9f 4f       	sbci	r25, 0xFF	; 255
    1658:	0e 94 af 05 	call	0xb5e	; 0xb5e <enterpass>
				if ((KEYPAD_getPressedKey()) == '=') {
    165c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <KEYPAD_getPressedKey>
    1660:	8d 33       	cpi	r24, 0x3D	; 61
    1662:	09 f0       	breq	.+2      	; 0x1666 <main+0x56c>
    1664:	69 c1       	rjmp	.+722    	; 0x1938 <main+0x83e>
					for (int i = 0; i < 5; i++) {
    1666:	1c ae       	std	Y+60, r1	; 0x3c
    1668:	1b ae       	std	Y+59, r1	; 0x3b
    166a:	24 c0       	rjmp	.+72     	; 0x16b4 <main+0x5ba>
						if (old_password[i] == eeprom_password[i]) {
    166c:	2b ad       	ldd	r18, Y+59	; 0x3b
    166e:	3c ad       	ldd	r19, Y+60	; 0x3c
    1670:	ce 01       	movw	r24, r28
    1672:	8c 5a       	subi	r24, 0xAC	; 172
    1674:	9f 4f       	sbci	r25, 0xFF	; 255
    1676:	fc 01       	movw	r30, r24
    1678:	e2 0f       	add	r30, r18
    167a:	f3 1f       	adc	r31, r19
    167c:	40 81       	ld	r20, Z
    167e:	2b ad       	ldd	r18, Y+59	; 0x3b
    1680:	3c ad       	ldd	r19, Y+60	; 0x3c
    1682:	ce 01       	movw	r24, r28
    1684:	81 5b       	subi	r24, 0xB1	; 177
    1686:	9f 4f       	sbci	r25, 0xFF	; 255
    1688:	fc 01       	movw	r30, r24
    168a:	e2 0f       	add	r30, r18
    168c:	f3 1f       	adc	r31, r19
    168e:	80 81       	ld	r24, Z
    1690:	48 17       	cp	r20, r24
    1692:	51 f4       	brne	.+20     	; 0x16a8 <main+0x5ae>
							matched_flag2 = 0;
    1694:	fe 01       	movw	r30, r28
    1696:	ed 5b       	subi	r30, 0xBD	; 189
    1698:	ff 4f       	sbci	r31, 0xFF	; 255
    169a:	10 82       	st	Z, r1
				LCD_clearScreen();
				LCD_displayString("enter old password:");
				LCD_moveCursor(1, 0);
				enterpass(old_password);
				if ((KEYPAD_getPressedKey()) == '=') {
					for (int i = 0; i < 5; i++) {
    169c:	8b ad       	ldd	r24, Y+59	; 0x3b
    169e:	9c ad       	ldd	r25, Y+60	; 0x3c
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	9c af       	std	Y+60, r25	; 0x3c
    16a4:	8b af       	std	Y+59, r24	; 0x3b
    16a6:	06 c0       	rjmp	.+12     	; 0x16b4 <main+0x5ba>
						if (old_password[i] == eeprom_password[i]) {
							matched_flag2 = 0;
						} else {
							matched_flag2 = 1;
    16a8:	fe 01       	movw	r30, r28
    16aa:	ed 5b       	subi	r30, 0xBD	; 189
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	80 83       	st	Z, r24
    16b2:	05 c0       	rjmp	.+10     	; 0x16be <main+0x5c4>
				LCD_clearScreen();
				LCD_displayString("enter old password:");
				LCD_moveCursor(1, 0);
				enterpass(old_password);
				if ((KEYPAD_getPressedKey()) == '=') {
					for (int i = 0; i < 5; i++) {
    16b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    16b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    16b8:	85 30       	cpi	r24, 0x05	; 5
    16ba:	91 05       	cpc	r25, r1
    16bc:	bc f2       	brlt	.-82     	; 0x166c <main+0x572>
						} else {
							matched_flag2 = 1;
							break;
						}
					}
					if (matched_flag2 == 0) {
    16be:	fe 01       	movw	r30, r28
    16c0:	ed 5b       	subi	r30, 0xBD	; 189
    16c2:	ff 4f       	sbci	r31, 0xFF	; 255
    16c4:	80 81       	ld	r24, Z
    16c6:	88 23       	and	r24, r24
    16c8:	09 f0       	breq	.+2      	; 0x16cc <main+0x5d2>
    16ca:	ad c0       	rjmp	.+346    	; 0x1826 <main+0x72c>
						LCD_clearScreen();
    16cc:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
						LCD_displayString("correct password");
    16d0:	8f e1       	ldi	r24, 0x1F	; 31
    16d2:	91 e0       	ldi	r25, 0x01	; 1
    16d4:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_displayString>
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	a8 ec       	ldi	r26, 0xC8	; 200
    16de:	b3 e4       	ldi	r27, 0x43	; 67
    16e0:	89 8f       	std	Y+25, r24	; 0x19
    16e2:	9a 8f       	std	Y+26, r25	; 0x1a
    16e4:	ab 8f       	std	Y+27, r26	; 0x1b
    16e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e8:	69 8d       	ldd	r22, Y+25	; 0x19
    16ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	4a e7       	ldi	r20, 0x7A	; 122
    16f6:	53 e4       	ldi	r21, 0x43	; 67
    16f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	8d 8b       	std	Y+21, r24	; 0x15
    1702:	9e 8b       	std	Y+22, r25	; 0x16
    1704:	af 8b       	std	Y+23, r26	; 0x17
    1706:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1708:	6d 89       	ldd	r22, Y+21	; 0x15
    170a:	7e 89       	ldd	r23, Y+22	; 0x16
    170c:	8f 89       	ldd	r24, Y+23	; 0x17
    170e:	98 8d       	ldd	r25, Y+24	; 0x18
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e8       	ldi	r20, 0x80	; 128
    1716:	5f e3       	ldi	r21, 0x3F	; 63
    1718:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    171c:	88 23       	and	r24, r24
    171e:	2c f4       	brge	.+10     	; 0x172a <main+0x630>
		__ticks = 1;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9c 8b       	std	Y+20, r25	; 0x14
    1726:	8b 8b       	std	Y+19, r24	; 0x13
    1728:	3f c0       	rjmp	.+126    	; 0x17a8 <main+0x6ae>
	else if (__tmp > 65535)
    172a:	6d 89       	ldd	r22, Y+21	; 0x15
    172c:	7e 89       	ldd	r23, Y+22	; 0x16
    172e:	8f 89       	ldd	r24, Y+23	; 0x17
    1730:	98 8d       	ldd	r25, Y+24	; 0x18
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	3f ef       	ldi	r19, 0xFF	; 255
    1736:	4f e7       	ldi	r20, 0x7F	; 127
    1738:	57 e4       	ldi	r21, 0x47	; 71
    173a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    173e:	18 16       	cp	r1, r24
    1740:	4c f5       	brge	.+82     	; 0x1794 <main+0x69a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1742:	69 8d       	ldd	r22, Y+25	; 0x19
    1744:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1746:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1748:	9c 8d       	ldd	r25, Y+28	; 0x1c
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e2       	ldi	r20, 0x20	; 32
    1750:	51 e4       	ldi	r21, 0x41	; 65
    1752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	bc 01       	movw	r22, r24
    175c:	cd 01       	movw	r24, r26
    175e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	9c 8b       	std	Y+20, r25	; 0x14
    1768:	8b 8b       	std	Y+19, r24	; 0x13
    176a:	0f c0       	rjmp	.+30     	; 0x178a <main+0x690>
    176c:	89 e1       	ldi	r24, 0x19	; 25
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	9a 8b       	std	Y+18, r25	; 0x12
    1772:	89 8b       	std	Y+17, r24	; 0x11
    1774:	89 89       	ldd	r24, Y+17	; 0x11
    1776:	9a 89       	ldd	r25, Y+18	; 0x12
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <main+0x67e>
    177c:	9a 8b       	std	Y+18, r25	; 0x12
    177e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1780:	8b 89       	ldd	r24, Y+19	; 0x13
    1782:	9c 89       	ldd	r25, Y+20	; 0x14
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	9c 8b       	std	Y+20, r25	; 0x14
    1788:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178a:	8b 89       	ldd	r24, Y+19	; 0x13
    178c:	9c 89       	ldd	r25, Y+20	; 0x14
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	69 f7       	brne	.-38     	; 0x176c <main+0x672>
    1792:	14 c0       	rjmp	.+40     	; 0x17bc <main+0x6c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1794:	6d 89       	ldd	r22, Y+21	; 0x15
    1796:	7e 89       	ldd	r23, Y+22	; 0x16
    1798:	8f 89       	ldd	r24, Y+23	; 0x17
    179a:	98 8d       	ldd	r25, Y+24	; 0x18
    179c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	9c 8b       	std	Y+20, r25	; 0x14
    17a6:	8b 8b       	std	Y+19, r24	; 0x13
    17a8:	8b 89       	ldd	r24, Y+19	; 0x13
    17aa:	9c 89       	ldd	r25, Y+20	; 0x14
    17ac:	98 8b       	std	Y+16, r25	; 0x10
    17ae:	8f 87       	std	Y+15, r24	; 0x0f
    17b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b2:	98 89       	ldd	r25, Y+16	; 0x10
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <main+0x6ba>
    17b8:	98 8b       	std	Y+16, r25	; 0x10
    17ba:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(400);
						LCD_clearScreen();
    17bc:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
						newpass(matched_flag1, password1,password2);
    17c0:	fe 01       	movw	r30, r28
    17c2:	ec 5b       	subi	r30, 0xBC	; 188
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	9e 01       	movw	r18, r28
    17c8:	2b 5b       	subi	r18, 0xBB	; 187
    17ca:	3f 4f       	sbci	r19, 0xFF	; 255
    17cc:	ae 01       	movw	r20, r28
    17ce:	46 5b       	subi	r20, 0xB6	; 182
    17d0:	5f 4f       	sbci	r21, 0xFF	; 255
    17d2:	80 81       	ld	r24, Z
    17d4:	b9 01       	movw	r22, r18
    17d6:	0e 94 f5 06 	call	0xdea	; 0xdea <newpass>
						matched_flag1 = 0;
    17da:	fe 01       	movw	r30, r28
    17dc:	ec 5b       	subi	r30, 0xBC	; 188
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	10 82       	st	Z, r1
						UART_sendByte(MC_READY);
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	0e 94 36 18 	call	0x306c	; 0x306c <UART_sendByte>
						for (int i = 0; i < 5; i++) {
    17e8:	1a ae       	std	Y+58, r1	; 0x3a
    17ea:	19 ae       	std	Y+57, r1	; 0x39
    17ec:	11 c0       	rjmp	.+34     	; 0x1810 <main+0x716>
							eeprom_password[i] = UART_recieveByte();
    17ee:	09 ad       	ldd	r16, Y+57	; 0x39
    17f0:	1a ad       	ldd	r17, Y+58	; 0x3a
    17f2:	0e 94 4d 18 	call	0x309a	; 0x309a <UART_recieveByte>
    17f6:	28 2f       	mov	r18, r24
    17f8:	ce 01       	movw	r24, r28
    17fa:	81 5b       	subi	r24, 0xB1	; 177
    17fc:	9f 4f       	sbci	r25, 0xFF	; 255
    17fe:	fc 01       	movw	r30, r24
    1800:	e0 0f       	add	r30, r16
    1802:	f1 1f       	adc	r31, r17
    1804:	20 83       	st	Z, r18
						_delay_ms(400);
						LCD_clearScreen();
						newpass(matched_flag1, password1,password2);
						matched_flag1 = 0;
						UART_sendByte(MC_READY);
						for (int i = 0; i < 5; i++) {
    1806:	89 ad       	ldd	r24, Y+57	; 0x39
    1808:	9a ad       	ldd	r25, Y+58	; 0x3a
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	9a af       	std	Y+58, r25	; 0x3a
    180e:	89 af       	std	Y+57, r24	; 0x39
    1810:	89 ad       	ldd	r24, Y+57	; 0x39
    1812:	9a ad       	ldd	r25, Y+58	; 0x3a
    1814:	85 30       	cpi	r24, 0x05	; 5
    1816:	91 05       	cpc	r25, r1
    1818:	54 f3       	brlt	.-44     	; 0x17ee <main+0x6f4>
							eeprom_password[i] = UART_recieveByte();
						}
						correct_flag = 1;
    181a:	fe 01       	movw	r30, r28
    181c:	ef 5b       	subi	r30, 0xBF	; 191
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	80 83       	st	Z, r24
    1824:	89 c0       	rjmp	.+274    	; 0x1938 <main+0x83e>
					}
					else{
						LCD_clearScreen();
    1826:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_clearScreen>
						LCD_displayString("wrong password");
    182a:	8c ef       	ldi	r24, 0xFC	; 252
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_displayString>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a8 ec       	ldi	r26, 0xC8	; 200
    1838:	b3 e4       	ldi	r27, 0x43	; 67
    183a:	8b 87       	std	Y+11, r24	; 0x0b
    183c:	9c 87       	std	Y+12, r25	; 0x0c
    183e:	ad 87       	std	Y+13, r26	; 0x0d
    1840:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1842:	6b 85       	ldd	r22, Y+11	; 0x0b
    1844:	7c 85       	ldd	r23, Y+12	; 0x0c
    1846:	8d 85       	ldd	r24, Y+13	; 0x0d
    1848:	9e 85       	ldd	r25, Y+14	; 0x0e
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	4a e7       	ldi	r20, 0x7A	; 122
    1850:	53 e4       	ldi	r21, 0x43	; 67
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	8f 83       	std	Y+7, r24	; 0x07
    185c:	98 87       	std	Y+8, r25	; 0x08
    185e:	a9 87       	std	Y+9, r26	; 0x09
    1860:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1862:	6f 81       	ldd	r22, Y+7	; 0x07
    1864:	78 85       	ldd	r23, Y+8	; 0x08
    1866:	89 85       	ldd	r24, Y+9	; 0x09
    1868:	9a 85       	ldd	r25, Y+10	; 0x0a
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e8       	ldi	r20, 0x80	; 128
    1870:	5f e3       	ldi	r21, 0x3F	; 63
    1872:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1876:	88 23       	and	r24, r24
    1878:	2c f4       	brge	.+10     	; 0x1884 <main+0x78a>
		__ticks = 1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	9e 83       	std	Y+6, r25	; 0x06
    1880:	8d 83       	std	Y+5, r24	; 0x05
    1882:	3f c0       	rjmp	.+126    	; 0x1902 <main+0x808>
	else if (__tmp > 65535)
    1884:	6f 81       	ldd	r22, Y+7	; 0x07
    1886:	78 85       	ldd	r23, Y+8	; 0x08
    1888:	89 85       	ldd	r24, Y+9	; 0x09
    188a:	9a 85       	ldd	r25, Y+10	; 0x0a
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	57 e4       	ldi	r21, 0x47	; 71
    1894:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	4c f5       	brge	.+82     	; 0x18ee <main+0x7f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189c:	6b 85       	ldd	r22, Y+11	; 0x0b
    189e:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e2       	ldi	r20, 0x20	; 32
    18aa:	51 e4       	ldi	r21, 0x41	; 65
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	9e 83       	std	Y+6, r25	; 0x06
    18c2:	8d 83       	std	Y+5, r24	; 0x05
    18c4:	0f c0       	rjmp	.+30     	; 0x18e4 <main+0x7ea>
    18c6:	89 e1       	ldi	r24, 0x19	; 25
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	8b 83       	std	Y+3, r24	; 0x03
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <main+0x7d8>
    18d6:	9c 83       	std	Y+4, r25	; 0x04
    18d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	69 f7       	brne	.-38     	; 0x18c6 <main+0x7cc>
    18ec:	14 c0       	rjmp	.+40     	; 0x1916 <main+0x81c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ee:	6f 81       	ldd	r22, Y+7	; 0x07
    18f0:	78 85       	ldd	r23, Y+8	; 0x08
    18f2:	89 85       	ldd	r24, Y+9	; 0x09
    18f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9e 83       	std	Y+6, r25	; 0x06
    1900:	8d 83       	std	Y+5, r24	; 0x05
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	9a 83       	std	Y+2, r25	; 0x02
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <main+0x814>
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(400);
						error_flag++;
    1916:	de 01       	movw	r26, r28
    1918:	ae 5b       	subi	r26, 0xBE	; 190
    191a:	bf 4f       	sbci	r27, 0xFF	; 255
    191c:	fe 01       	movw	r30, r28
    191e:	ee 5b       	subi	r30, 0xBE	; 190
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	80 81       	ld	r24, Z
    1924:	8f 5f       	subi	r24, 0xFF	; 255
    1926:	8c 93       	st	X, r24
						if (error_flag == 3){
    1928:	fe 01       	movw	r30, r28
    192a:	ee 5b       	subi	r30, 0xBE	; 190
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	80 81       	ld	r24, Z
    1930:	83 30       	cpi	r24, 0x03	; 3
    1932:	11 f4       	brne	.+4      	; 0x1938 <main+0x83e>
							BUZZER();
    1934:	0e 94 60 08 	call	0x10c0	; 0x10c0 <BUZZER>
			correct_flag = 0;
		}

		else if (KEYPAD_getPressedKey() == '-')
		{
			while ((error_flag < 3) && (correct_flag == 0))          /* we can enter wrong password 3 times only */
    1938:	fe 01       	movw	r30, r28
    193a:	ee 5b       	subi	r30, 0xBE	; 190
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	80 81       	ld	r24, Z
    1940:	83 30       	cpi	r24, 0x03	; 3
    1942:	38 f4       	brcc	.+14     	; 0x1952 <main+0x858>
    1944:	fe 01       	movw	r30, r28
    1946:	ef 5b       	subi	r30, 0xBF	; 191
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	80 81       	ld	r24, Z
    194c:	88 23       	and	r24, r24
    194e:	09 f4       	brne	.+2      	; 0x1952 <main+0x858>
    1950:	76 ce       	rjmp	.-788    	; 0x163e <main+0x544>
						}
					}
				}
				;
			}
			matched_flag2 = 0;
    1952:	fe 01       	movw	r30, r28
    1954:	ed 5b       	subi	r30, 0xBD	; 189
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	10 82       	st	Z, r1
							error_flag = 0;
    195a:	fe 01       	movw	r30, r28
    195c:	ee 5b       	subi	r30, 0xBE	; 190
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	10 82       	st	Z, r1
							correct_flag = 0;
    1962:	fe 01       	movw	r30, r28
    1964:	ef 5b       	subi	r30, 0xBF	; 191
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	10 82       	st	Z, r1
    196a:	10 cd       	rjmp	.-1504   	; 0x138c <main+0x292>

0000196c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	00 d0       	rcall	.+0      	; 0x1972 <GPIO_setupPinDirection+0x6>
    1972:	00 d0       	rcall	.+0      	; 0x1974 <GPIO_setupPinDirection+0x8>
    1974:	0f 92       	push	r0
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	6a 83       	std	Y+2, r22	; 0x02
    197e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	88 30       	cpi	r24, 0x08	; 8
    1984:	08 f0       	brcs	.+2      	; 0x1988 <GPIO_setupPinDirection+0x1c>
    1986:	d5 c0       	rjmp	.+426    	; 0x1b32 <GPIO_setupPinDirection+0x1c6>
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	84 30       	cpi	r24, 0x04	; 4
    198c:	08 f0       	brcs	.+2      	; 0x1990 <GPIO_setupPinDirection+0x24>
    198e:	d1 c0       	rjmp	.+418    	; 0x1b32 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	3d 83       	std	Y+5, r19	; 0x05
    1998:	2c 83       	std	Y+4, r18	; 0x04
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	9d 81       	ldd	r25, Y+5	; 0x05
    199e:	81 30       	cpi	r24, 0x01	; 1
    19a0:	91 05       	cpc	r25, r1
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <GPIO_setupPinDirection+0x3a>
    19a4:	43 c0       	rjmp	.+134    	; 0x1a2c <GPIO_setupPinDirection+0xc0>
    19a6:	2c 81       	ldd	r18, Y+4	; 0x04
    19a8:	3d 81       	ldd	r19, Y+5	; 0x05
    19aa:	22 30       	cpi	r18, 0x02	; 2
    19ac:	31 05       	cpc	r19, r1
    19ae:	2c f4       	brge	.+10     	; 0x19ba <GPIO_setupPinDirection+0x4e>
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	9d 81       	ldd	r25, Y+5	; 0x05
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	71 f0       	breq	.+28     	; 0x19d4 <GPIO_setupPinDirection+0x68>
    19b8:	bc c0       	rjmp	.+376    	; 0x1b32 <GPIO_setupPinDirection+0x1c6>
    19ba:	2c 81       	ldd	r18, Y+4	; 0x04
    19bc:	3d 81       	ldd	r19, Y+5	; 0x05
    19be:	22 30       	cpi	r18, 0x02	; 2
    19c0:	31 05       	cpc	r19, r1
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <GPIO_setupPinDirection+0x5a>
    19c4:	5f c0       	rjmp	.+190    	; 0x1a84 <GPIO_setupPinDirection+0x118>
    19c6:	8c 81       	ldd	r24, Y+4	; 0x04
    19c8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ca:	83 30       	cpi	r24, 0x03	; 3
    19cc:	91 05       	cpc	r25, r1
    19ce:	09 f4       	brne	.+2      	; 0x19d2 <GPIO_setupPinDirection+0x66>
    19d0:	85 c0       	rjmp	.+266    	; 0x1adc <GPIO_setupPinDirection+0x170>
    19d2:	af c0       	rjmp	.+350    	; 0x1b32 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	81 30       	cpi	r24, 0x01	; 1
    19d8:	a1 f4       	brne	.+40     	; 0x1a02 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    19da:	aa e3       	ldi	r26, 0x3A	; 58
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	ea e3       	ldi	r30, 0x3A	; 58
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <GPIO_setupPinDirection+0x8c>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <GPIO_setupPinDirection+0x88>
    19fc:	84 2b       	or	r24, r20
    19fe:	8c 93       	st	X, r24
    1a00:	98 c0       	rjmp	.+304    	; 0x1b32 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1a02:	aa e3       	ldi	r26, 0x3A	; 58
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	ea e3       	ldi	r30, 0x3A	; 58
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	48 2f       	mov	r20, r24
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	02 2e       	mov	r0, r18
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <GPIO_setupPinDirection+0xb4>
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	0a 94       	dec	r0
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <GPIO_setupPinDirection+0xb0>
    1a24:	80 95       	com	r24
    1a26:	84 23       	and	r24, r20
    1a28:	8c 93       	st	X, r24
    1a2a:	83 c0       	rjmp	.+262    	; 0x1b32 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	81 30       	cpi	r24, 0x01	; 1
    1a30:	a1 f4       	brne	.+40     	; 0x1a5a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1a32:	a7 e3       	ldi	r26, 0x37	; 55
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e7 e3       	ldi	r30, 0x37	; 55
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	02 2e       	mov	r0, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <GPIO_setupPinDirection+0xe4>
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	0a 94       	dec	r0
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <GPIO_setupPinDirection+0xe0>
    1a54:	84 2b       	or	r24, r20
    1a56:	8c 93       	st	X, r24
    1a58:	6c c0       	rjmp	.+216    	; 0x1b32 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1a5a:	a7 e3       	ldi	r26, 0x37	; 55
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e7 e3       	ldi	r30, 0x37	; 55
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	48 2f       	mov	r20, r24
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	02 2e       	mov	r0, r18
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <GPIO_setupPinDirection+0x10c>
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	0a 94       	dec	r0
    1a7a:	e2 f7       	brpl	.-8      	; 0x1a74 <GPIO_setupPinDirection+0x108>
    1a7c:	80 95       	com	r24
    1a7e:	84 23       	and	r24, r20
    1a80:	8c 93       	st	X, r24
    1a82:	57 c0       	rjmp	.+174    	; 0x1b32 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	a1 f4       	brne	.+40     	; 0x1ab2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1a8a:	a4 e3       	ldi	r26, 0x34	; 52
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e4 e3       	ldi	r30, 0x34	; 52
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	48 2f       	mov	r20, r24
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	02 2e       	mov	r0, r18
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <GPIO_setupPinDirection+0x13c>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	0a 94       	dec	r0
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <GPIO_setupPinDirection+0x138>
    1aac:	84 2b       	or	r24, r20
    1aae:	8c 93       	st	X, r24
    1ab0:	40 c0       	rjmp	.+128    	; 0x1b32 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1ab2:	a4 e3       	ldi	r26, 0x34	; 52
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e4 e3       	ldi	r30, 0x34	; 52
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	48 2f       	mov	r20, r24
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	02 2e       	mov	r0, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <GPIO_setupPinDirection+0x164>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	0a 94       	dec	r0
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <GPIO_setupPinDirection+0x160>
    1ad4:	80 95       	com	r24
    1ad6:	84 23       	and	r24, r20
    1ad8:	8c 93       	st	X, r24
    1ada:	2b c0       	rjmp	.+86     	; 0x1b32 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	a1 f4       	brne	.+40     	; 0x1b0a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1ae2:	a1 e3       	ldi	r26, 0x31	; 49
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e1 e3       	ldi	r30, 0x31	; 49
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	48 2f       	mov	r20, r24
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	02 2e       	mov	r0, r18
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <GPIO_setupPinDirection+0x194>
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	0a 94       	dec	r0
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <GPIO_setupPinDirection+0x190>
    1b04:	84 2b       	or	r24, r20
    1b06:	8c 93       	st	X, r24
    1b08:	14 c0       	rjmp	.+40     	; 0x1b32 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1b0a:	a1 e3       	ldi	r26, 0x31	; 49
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e1 e3       	ldi	r30, 0x31	; 49
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	48 2f       	mov	r20, r24
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	02 2e       	mov	r0, r18
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <GPIO_setupPinDirection+0x1bc>
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	0a 94       	dec	r0
    1b2a:	e2 f7       	brpl	.-8      	; 0x1b24 <GPIO_setupPinDirection+0x1b8>
    1b2c:	80 95       	com	r24
    1b2e:	84 23       	and	r24, r20
    1b30:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <GPIO_writePin+0x6>
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <GPIO_writePin+0x8>
    1b4a:	0f 92       	push	r0
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	6a 83       	std	Y+2, r22	; 0x02
    1b54:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	88 30       	cpi	r24, 0x08	; 8
    1b5a:	08 f0       	brcs	.+2      	; 0x1b5e <GPIO_writePin+0x1c>
    1b5c:	d5 c0       	rjmp	.+426    	; 0x1d08 <GPIO_writePin+0x1c6>
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	84 30       	cpi	r24, 0x04	; 4
    1b62:	08 f0       	brcs	.+2      	; 0x1b66 <GPIO_writePin+0x24>
    1b64:	d1 c0       	rjmp	.+418    	; 0x1d08 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	3d 83       	std	Y+5, r19	; 0x05
    1b6e:	2c 83       	std	Y+4, r18	; 0x04
    1b70:	8c 81       	ldd	r24, Y+4	; 0x04
    1b72:	9d 81       	ldd	r25, Y+5	; 0x05
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	91 05       	cpc	r25, r1
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <GPIO_writePin+0x3a>
    1b7a:	43 c0       	rjmp	.+134    	; 0x1c02 <GPIO_writePin+0xc0>
    1b7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b80:	22 30       	cpi	r18, 0x02	; 2
    1b82:	31 05       	cpc	r19, r1
    1b84:	2c f4       	brge	.+10     	; 0x1b90 <GPIO_writePin+0x4e>
    1b86:	8c 81       	ldd	r24, Y+4	; 0x04
    1b88:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	71 f0       	breq	.+28     	; 0x1baa <GPIO_writePin+0x68>
    1b8e:	bc c0       	rjmp	.+376    	; 0x1d08 <GPIO_writePin+0x1c6>
    1b90:	2c 81       	ldd	r18, Y+4	; 0x04
    1b92:	3d 81       	ldd	r19, Y+5	; 0x05
    1b94:	22 30       	cpi	r18, 0x02	; 2
    1b96:	31 05       	cpc	r19, r1
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <GPIO_writePin+0x5a>
    1b9a:	5f c0       	rjmp	.+190    	; 0x1c5a <GPIO_writePin+0x118>
    1b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba0:	83 30       	cpi	r24, 0x03	; 3
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <GPIO_writePin+0x66>
    1ba6:	85 c0       	rjmp	.+266    	; 0x1cb2 <GPIO_writePin+0x170>
    1ba8:	af c0       	rjmp	.+350    	; 0x1d08 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	a1 f4       	brne	.+40     	; 0x1bd8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1bb0:	ab e3       	ldi	r26, 0x3B	; 59
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	eb e3       	ldi	r30, 0x3B	; 59
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	48 2f       	mov	r20, r24
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 2e       	mov	r0, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <GPIO_writePin+0x8c>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	0a 94       	dec	r0
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <GPIO_writePin+0x88>
    1bd2:	84 2b       	or	r24, r20
    1bd4:	8c 93       	st	X, r24
    1bd6:	98 c0       	rjmp	.+304    	; 0x1d08 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1bd8:	ab e3       	ldi	r26, 0x3B	; 59
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	eb e3       	ldi	r30, 0x3B	; 59
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	02 2e       	mov	r0, r18
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <GPIO_writePin+0xb4>
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	0a 94       	dec	r0
    1bf8:	e2 f7       	brpl	.-8      	; 0x1bf2 <GPIO_writePin+0xb0>
    1bfa:	80 95       	com	r24
    1bfc:	84 23       	and	r24, r20
    1bfe:	8c 93       	st	X, r24
    1c00:	83 c0       	rjmp	.+262    	; 0x1d08 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	81 30       	cpi	r24, 0x01	; 1
    1c06:	a1 f4       	brne	.+40     	; 0x1c30 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1c08:	a8 e3       	ldi	r26, 0x38	; 56
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e8 e3       	ldi	r30, 0x38	; 56
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 2e       	mov	r0, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <GPIO_writePin+0xe4>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <GPIO_writePin+0xe0>
    1c2a:	84 2b       	or	r24, r20
    1c2c:	8c 93       	st	X, r24
    1c2e:	6c c0       	rjmp	.+216    	; 0x1d08 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1c30:	a8 e3       	ldi	r26, 0x38	; 56
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e8 e3       	ldi	r30, 0x38	; 56
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 2e       	mov	r0, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <GPIO_writePin+0x10c>
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	0a 94       	dec	r0
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <GPIO_writePin+0x108>
    1c52:	80 95       	com	r24
    1c54:	84 23       	and	r24, r20
    1c56:	8c 93       	st	X, r24
    1c58:	57 c0       	rjmp	.+174    	; 0x1d08 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	81 30       	cpi	r24, 0x01	; 1
    1c5e:	a1 f4       	brne	.+40     	; 0x1c88 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1c60:	a5 e3       	ldi	r26, 0x35	; 53
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e5 e3       	ldi	r30, 0x35	; 53
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	48 2f       	mov	r20, r24
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	02 2e       	mov	r0, r18
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <GPIO_writePin+0x13c>
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	0a 94       	dec	r0
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <GPIO_writePin+0x138>
    1c82:	84 2b       	or	r24, r20
    1c84:	8c 93       	st	X, r24
    1c86:	40 c0       	rjmp	.+128    	; 0x1d08 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1c88:	a5 e3       	ldi	r26, 0x35	; 53
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e5 e3       	ldi	r30, 0x35	; 53
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	48 2f       	mov	r20, r24
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	02 2e       	mov	r0, r18
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <GPIO_writePin+0x164>
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	0a 94       	dec	r0
    1ca8:	e2 f7       	brpl	.-8      	; 0x1ca2 <GPIO_writePin+0x160>
    1caa:	80 95       	com	r24
    1cac:	84 23       	and	r24, r20
    1cae:	8c 93       	st	X, r24
    1cb0:	2b c0       	rjmp	.+86     	; 0x1d08 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	a1 f4       	brne	.+40     	; 0x1ce0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1cb8:	a2 e3       	ldi	r26, 0x32	; 50
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e2 e3       	ldi	r30, 0x32	; 50
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	48 2f       	mov	r20, r24
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	02 2e       	mov	r0, r18
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <GPIO_writePin+0x194>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	0a 94       	dec	r0
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <GPIO_writePin+0x190>
    1cda:	84 2b       	or	r24, r20
    1cdc:	8c 93       	st	X, r24
    1cde:	14 c0       	rjmp	.+40     	; 0x1d08 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1ce0:	a2 e3       	ldi	r26, 0x32	; 50
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e2 e3       	ldi	r30, 0x32	; 50
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	48 2f       	mov	r20, r24
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	02 2e       	mov	r0, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <GPIO_writePin+0x1bc>
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	0a 94       	dec	r0
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <GPIO_writePin+0x1b8>
    1d02:	80 95       	com	r24
    1d04:	84 23       	and	r24, r20
    1d06:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	08 95       	ret

00001d18 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <GPIO_readPin+0x6>
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <GPIO_readPin+0x8>
    1d20:	0f 92       	push	r0
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	8a 83       	std	Y+2, r24	; 0x02
    1d28:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1d2a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	88 30       	cpi	r24, 0x08	; 8
    1d30:	08 f0       	brcs	.+2      	; 0x1d34 <GPIO_readPin+0x1c>
    1d32:	84 c0       	rjmp	.+264    	; 0x1e3c <GPIO_readPin+0x124>
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	84 30       	cpi	r24, 0x04	; 4
    1d38:	08 f0       	brcs	.+2      	; 0x1d3c <GPIO_readPin+0x24>
    1d3a:	80 c0       	rjmp	.+256    	; 0x1e3c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	3d 83       	std	Y+5, r19	; 0x05
    1d44:	2c 83       	std	Y+4, r18	; 0x04
    1d46:	4c 81       	ldd	r20, Y+4	; 0x04
    1d48:	5d 81       	ldd	r21, Y+5	; 0x05
    1d4a:	41 30       	cpi	r20, 0x01	; 1
    1d4c:	51 05       	cpc	r21, r1
    1d4e:	79 f1       	breq	.+94     	; 0x1dae <GPIO_readPin+0x96>
    1d50:	8c 81       	ldd	r24, Y+4	; 0x04
    1d52:	9d 81       	ldd	r25, Y+5	; 0x05
    1d54:	82 30       	cpi	r24, 0x02	; 2
    1d56:	91 05       	cpc	r25, r1
    1d58:	34 f4       	brge	.+12     	; 0x1d66 <GPIO_readPin+0x4e>
    1d5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d5e:	21 15       	cp	r18, r1
    1d60:	31 05       	cpc	r19, r1
    1d62:	69 f0       	breq	.+26     	; 0x1d7e <GPIO_readPin+0x66>
    1d64:	6b c0       	rjmp	.+214    	; 0x1e3c <GPIO_readPin+0x124>
    1d66:	4c 81       	ldd	r20, Y+4	; 0x04
    1d68:	5d 81       	ldd	r21, Y+5	; 0x05
    1d6a:	42 30       	cpi	r20, 0x02	; 2
    1d6c:	51 05       	cpc	r21, r1
    1d6e:	b9 f1       	breq	.+110    	; 0x1dde <GPIO_readPin+0xc6>
    1d70:	8c 81       	ldd	r24, Y+4	; 0x04
    1d72:	9d 81       	ldd	r25, Y+5	; 0x05
    1d74:	83 30       	cpi	r24, 0x03	; 3
    1d76:	91 05       	cpc	r25, r1
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <GPIO_readPin+0x64>
    1d7a:	49 c0       	rjmp	.+146    	; 0x1e0e <GPIO_readPin+0xf6>
    1d7c:	5f c0       	rjmp	.+190    	; 0x1e3c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1d7e:	e9 e3       	ldi	r30, 0x39	; 57
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	88 2f       	mov	r24, r24
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a9 01       	movw	r20, r18
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <GPIO_readPin+0x7e>
    1d92:	55 95       	asr	r21
    1d94:	47 95       	ror	r20
    1d96:	8a 95       	dec	r24
    1d98:	e2 f7       	brpl	.-8      	; 0x1d92 <GPIO_readPin+0x7a>
    1d9a:	ca 01       	movw	r24, r20
    1d9c:	81 70       	andi	r24, 0x01	; 1
    1d9e:	90 70       	andi	r25, 0x00	; 0
    1da0:	88 23       	and	r24, r24
    1da2:	19 f0       	breq	.+6      	; 0x1daa <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	49 c0       	rjmp	.+146    	; 0x1e3c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1daa:	19 82       	std	Y+1, r1	; 0x01
    1dac:	47 c0       	rjmp	.+142    	; 0x1e3c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1dae:	e6 e3       	ldi	r30, 0x36	; 54
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a9 01       	movw	r20, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <GPIO_readPin+0xae>
    1dc2:	55 95       	asr	r21
    1dc4:	47 95       	ror	r20
    1dc6:	8a 95       	dec	r24
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <GPIO_readPin+0xaa>
    1dca:	ca 01       	movw	r24, r20
    1dcc:	81 70       	andi	r24, 0x01	; 1
    1dce:	90 70       	andi	r25, 0x00	; 0
    1dd0:	88 23       	and	r24, r24
    1dd2:	19 f0       	breq	.+6      	; 0x1dda <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	31 c0       	rjmp	.+98     	; 0x1e3c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1dda:	19 82       	std	Y+1, r1	; 0x01
    1ddc:	2f c0       	rjmp	.+94     	; 0x1e3c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1dde:	e3 e3       	ldi	r30, 0x33	; 51
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	88 2f       	mov	r24, r24
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	a9 01       	movw	r20, r18
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <GPIO_readPin+0xde>
    1df2:	55 95       	asr	r21
    1df4:	47 95       	ror	r20
    1df6:	8a 95       	dec	r24
    1df8:	e2 f7       	brpl	.-8      	; 0x1df2 <GPIO_readPin+0xda>
    1dfa:	ca 01       	movw	r24, r20
    1dfc:	81 70       	andi	r24, 0x01	; 1
    1dfe:	90 70       	andi	r25, 0x00	; 0
    1e00:	88 23       	and	r24, r24
    1e02:	19 f0       	breq	.+6      	; 0x1e0a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	19 c0       	rjmp	.+50     	; 0x1e3c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e0a:	19 82       	std	Y+1, r1	; 0x01
    1e0c:	17 c0       	rjmp	.+46     	; 0x1e3c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1e0e:	e0 e3       	ldi	r30, 0x30	; 48
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	88 2f       	mov	r24, r24
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	a9 01       	movw	r20, r18
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <GPIO_readPin+0x10e>
    1e22:	55 95       	asr	r21
    1e24:	47 95       	ror	r20
    1e26:	8a 95       	dec	r24
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <GPIO_readPin+0x10a>
    1e2a:	ca 01       	movw	r24, r20
    1e2c:	81 70       	andi	r24, 0x01	; 1
    1e2e:	90 70       	andi	r25, 0x00	; 0
    1e30:	88 23       	and	r24, r24
    1e32:	19 f0       	breq	.+6      	; 0x1e3a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	01 c0       	rjmp	.+2      	; 0x1e3c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e3a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	00 d0       	rcall	.+0      	; 0x1e54 <GPIO_setupPortDirection+0x6>
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <GPIO_setupPortDirection+0x8>
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	84 30       	cpi	r24, 0x04	; 4
    1e62:	90 f5       	brcc	.+100    	; 0x1ec8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	3c 83       	std	Y+4, r19	; 0x04
    1e6c:	2b 83       	std	Y+3, r18	; 0x03
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	81 30       	cpi	r24, 0x01	; 1
    1e74:	91 05       	cpc	r25, r1
    1e76:	d1 f0       	breq	.+52     	; 0x1eac <GPIO_setupPortDirection+0x5e>
    1e78:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e7c:	22 30       	cpi	r18, 0x02	; 2
    1e7e:	31 05       	cpc	r19, r1
    1e80:	2c f4       	brge	.+10     	; 0x1e8c <GPIO_setupPortDirection+0x3e>
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	61 f0       	breq	.+24     	; 0x1ea2 <GPIO_setupPortDirection+0x54>
    1e8a:	1e c0       	rjmp	.+60     	; 0x1ec8 <GPIO_setupPortDirection+0x7a>
    1e8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e90:	22 30       	cpi	r18, 0x02	; 2
    1e92:	31 05       	cpc	r19, r1
    1e94:	81 f0       	breq	.+32     	; 0x1eb6 <GPIO_setupPortDirection+0x68>
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9a:	83 30       	cpi	r24, 0x03	; 3
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	81 f0       	breq	.+32     	; 0x1ec0 <GPIO_setupPortDirection+0x72>
    1ea0:	13 c0       	rjmp	.+38     	; 0x1ec8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ea2:	ea e3       	ldi	r30, 0x3A	; 58
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	80 83       	st	Z, r24
    1eaa:	0e c0       	rjmp	.+28     	; 0x1ec8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1eac:	e7 e3       	ldi	r30, 0x37	; 55
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	80 83       	st	Z, r24
    1eb4:	09 c0       	rjmp	.+18     	; 0x1ec8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1eb6:	e4 e3       	ldi	r30, 0x34	; 52
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	80 83       	st	Z, r24
    1ebe:	04 c0       	rjmp	.+8      	; 0x1ec8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ec0:	e1 e3       	ldi	r30, 0x31	; 49
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <GPIO_writePort+0x6>
    1edc:	00 d0       	rcall	.+0      	; 0x1ede <GPIO_writePort+0x8>
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	84 30       	cpi	r24, 0x04	; 4
    1eea:	90 f5       	brcc	.+100    	; 0x1f50 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	3c 83       	std	Y+4, r19	; 0x04
    1ef4:	2b 83       	std	Y+3, r18	; 0x03
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    1efa:	81 30       	cpi	r24, 0x01	; 1
    1efc:	91 05       	cpc	r25, r1
    1efe:	d1 f0       	breq	.+52     	; 0x1f34 <GPIO_writePort+0x5e>
    1f00:	2b 81       	ldd	r18, Y+3	; 0x03
    1f02:	3c 81       	ldd	r19, Y+4	; 0x04
    1f04:	22 30       	cpi	r18, 0x02	; 2
    1f06:	31 05       	cpc	r19, r1
    1f08:	2c f4       	brge	.+10     	; 0x1f14 <GPIO_writePort+0x3e>
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	61 f0       	breq	.+24     	; 0x1f2a <GPIO_writePort+0x54>
    1f12:	1e c0       	rjmp	.+60     	; 0x1f50 <GPIO_writePort+0x7a>
    1f14:	2b 81       	ldd	r18, Y+3	; 0x03
    1f16:	3c 81       	ldd	r19, Y+4	; 0x04
    1f18:	22 30       	cpi	r18, 0x02	; 2
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	81 f0       	breq	.+32     	; 0x1f3e <GPIO_writePort+0x68>
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	9c 81       	ldd	r25, Y+4	; 0x04
    1f22:	83 30       	cpi	r24, 0x03	; 3
    1f24:	91 05       	cpc	r25, r1
    1f26:	81 f0       	breq	.+32     	; 0x1f48 <GPIO_writePort+0x72>
    1f28:	13 c0       	rjmp	.+38     	; 0x1f50 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1f2a:	eb e3       	ldi	r30, 0x3B	; 59
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	80 83       	st	Z, r24
    1f32:	0e c0       	rjmp	.+28     	; 0x1f50 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1f34:	e8 e3       	ldi	r30, 0x38	; 56
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	80 83       	st	Z, r24
    1f3c:	09 c0       	rjmp	.+18     	; 0x1f50 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1f3e:	e5 e3       	ldi	r30, 0x35	; 53
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	80 83       	st	Z, r24
    1f46:	04 c0       	rjmp	.+8      	; 0x1f50 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1f48:	e2 e3       	ldi	r30, 0x32	; 50
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <GPIO_readPort+0x6>
    1f64:	00 d0       	rcall	.+0      	; 0x1f66 <GPIO_readPort+0x8>
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1f6c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	84 30       	cpi	r24, 0x04	; 4
    1f72:	90 f5       	brcc	.+100    	; 0x1fd8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	3c 83       	std	Y+4, r19	; 0x04
    1f7c:	2b 83       	std	Y+3, r18	; 0x03
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	81 30       	cpi	r24, 0x01	; 1
    1f84:	91 05       	cpc	r25, r1
    1f86:	d1 f0       	breq	.+52     	; 0x1fbc <GPIO_readPort+0x5e>
    1f88:	2b 81       	ldd	r18, Y+3	; 0x03
    1f8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8c:	22 30       	cpi	r18, 0x02	; 2
    1f8e:	31 05       	cpc	r19, r1
    1f90:	2c f4       	brge	.+10     	; 0x1f9c <GPIO_readPort+0x3e>
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	9c 81       	ldd	r25, Y+4	; 0x04
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	61 f0       	breq	.+24     	; 0x1fb2 <GPIO_readPort+0x54>
    1f9a:	1e c0       	rjmp	.+60     	; 0x1fd8 <GPIO_readPort+0x7a>
    1f9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa0:	22 30       	cpi	r18, 0x02	; 2
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	81 f0       	breq	.+32     	; 0x1fc6 <GPIO_readPort+0x68>
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1faa:	83 30       	cpi	r24, 0x03	; 3
    1fac:	91 05       	cpc	r25, r1
    1fae:	81 f0       	breq	.+32     	; 0x1fd0 <GPIO_readPort+0x72>
    1fb0:	13 c0       	rjmp	.+38     	; 0x1fd8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1fb2:	e9 e3       	ldi	r30, 0x39	; 57
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	0e c0       	rjmp	.+28     	; 0x1fd8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1fbc:	e6 e3       	ldi	r30, 0x36	; 54
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	09 c0       	rjmp	.+18     	; 0x1fd8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1fc6:	e3 e3       	ldi	r30, 0x33	; 51
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    1fce:	04 c0       	rjmp	.+8      	; 0x1fd8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1fd0:	e0 e3       	ldi	r30, 0x30	; 48
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	60 97       	sbiw	r28, 0x10	; 16
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	de bf       	out	0x3e, r29	; 62
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1ffc:	82 e0       	ldi	r24, 0x02	; 2
    1ffe:	64 e0       	ldi	r22, 0x04	; 4
    2000:	40 e0       	ldi	r20, 0x00	; 0
    2002:	0e 94 b6 0c 	call	0x196c	; 0x196c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2006:	82 e0       	ldi	r24, 0x02	; 2
    2008:	65 e0       	ldi	r22, 0x05	; 5
    200a:	40 e0       	ldi	r20, 0x00	; 0
    200c:	0e 94 b6 0c 	call	0x196c	; 0x196c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2010:	82 e0       	ldi	r24, 0x02	; 2
    2012:	66 e0       	ldi	r22, 0x06	; 6
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	0e 94 b6 0c 	call	0x196c	; 0x196c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    201a:	82 e0       	ldi	r24, 0x02	; 2
    201c:	67 e0       	ldi	r22, 0x07	; 7
    201e:	40 e0       	ldi	r20, 0x00	; 0
    2020:	0e 94 b6 0c 	call	0x196c	; 0x196c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	0e 94 b6 0c 	call	0x196c	; 0x196c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    202e:	82 e0       	ldi	r24, 0x02	; 2
    2030:	61 e0       	ldi	r22, 0x01	; 1
    2032:	40 e0       	ldi	r20, 0x00	; 0
    2034:	0e 94 b6 0c 	call	0x196c	; 0x196c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	62 e0       	ldi	r22, 0x02	; 2
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	0e 94 b6 0c 	call	0x196c	; 0x196c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	63 e0       	ldi	r22, 0x03	; 3
    2046:	40 e0       	ldi	r20, 0x00	; 0
    2048:	0e 94 b6 0c 	call	0x196c	; 0x196c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    204c:	1f 86       	std	Y+15, r1	; 0x0f
    204e:	b1 c0       	rjmp	.+354    	; 0x21b2 <KEYPAD_getPressedKey+0x1ca>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2050:	8f 85       	ldd	r24, Y+15	; 0x0f
    2052:	98 2f       	mov	r25, r24
    2054:	9c 5f       	subi	r25, 0xFC	; 252
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	69 2f       	mov	r22, r25
    205a:	41 e0       	ldi	r20, 0x01	; 1
    205c:	0e 94 b6 0c 	call	0x196c	; 0x196c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2060:	8f 85       	ldd	r24, Y+15	; 0x0f
    2062:	98 2f       	mov	r25, r24
    2064:	9c 5f       	subi	r25, 0xFC	; 252
    2066:	82 e0       	ldi	r24, 0x02	; 2
    2068:	69 2f       	mov	r22, r25
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2070:	18 8a       	std	Y+16, r1	; 0x10
    2072:	1f c0       	rjmp	.+62     	; 0x20b2 <KEYPAD_getPressedKey+0xca>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2074:	82 e0       	ldi	r24, 0x02	; 2
    2076:	68 89       	ldd	r22, Y+16	; 0x10
    2078:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <GPIO_readPin>
    207c:	88 23       	and	r24, r24
    207e:	b1 f4       	brne	.+44     	; 0x20ac <KEYPAD_getPressedKey+0xc4>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2080:	8f 85       	ldd	r24, Y+15	; 0x0f
    2082:	88 2f       	mov	r24, r24
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	88 0f       	add	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	88 0f       	add	r24, r24
    208c:	99 1f       	adc	r25, r25
    208e:	98 2f       	mov	r25, r24
    2090:	88 89       	ldd	r24, Y+16	; 0x10
    2092:	89 0f       	add	r24, r25
    2094:	8f 5f       	subi	r24, 0xFF	; 255
    2096:	0e 94 de 10 	call	0x21bc	; 0x21bc <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    209a:	60 96       	adiw	r28, 0x10	; 16
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    20ac:	88 89       	ldd	r24, Y+16	; 0x10
    20ae:	8f 5f       	subi	r24, 0xFF	; 255
    20b0:	88 8b       	std	Y+16, r24	; 0x10
    20b2:	88 89       	ldd	r24, Y+16	; 0x10
    20b4:	84 30       	cpi	r24, 0x04	; 4
    20b6:	f0 f2       	brcs	.-68     	; 0x2074 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    20b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ba:	98 2f       	mov	r25, r24
    20bc:	9c 5f       	subi	r25, 0xFC	; 252
    20be:	82 e0       	ldi	r24, 0x02	; 2
    20c0:	69 2f       	mov	r22, r25
    20c2:	40 e0       	ldi	r20, 0x00	; 0
    20c4:	0e 94 b6 0c 	call	0x196c	; 0x196c <GPIO_setupPinDirection>
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	a0 ea       	ldi	r26, 0xA0	; 160
    20ce:	b0 e4       	ldi	r27, 0x40	; 64
    20d0:	8b 87       	std	Y+11, r24	; 0x0b
    20d2:	9c 87       	std	Y+12, r25	; 0x0c
    20d4:	ad 87       	std	Y+13, r26	; 0x0d
    20d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20da:	7c 85       	ldd	r23, Y+12	; 0x0c
    20dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20de:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	4a e7       	ldi	r20, 0x7A	; 122
    20e6:	53 e4       	ldi	r21, 0x43	; 67
    20e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	8f 83       	std	Y+7, r24	; 0x07
    20f2:	98 87       	std	Y+8, r25	; 0x08
    20f4:	a9 87       	std	Y+9, r26	; 0x09
    20f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20f8:	6f 81       	ldd	r22, Y+7	; 0x07
    20fa:	78 85       	ldd	r23, Y+8	; 0x08
    20fc:	89 85       	ldd	r24, Y+9	; 0x09
    20fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e8       	ldi	r20, 0x80	; 128
    2106:	5f e3       	ldi	r21, 0x3F	; 63
    2108:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    210c:	88 23       	and	r24, r24
    210e:	2c f4       	brge	.+10     	; 0x211a <KEYPAD_getPressedKey+0x132>
		__ticks = 1;
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	9e 83       	std	Y+6, r25	; 0x06
    2116:	8d 83       	std	Y+5, r24	; 0x05
    2118:	3f c0       	rjmp	.+126    	; 0x2198 <KEYPAD_getPressedKey+0x1b0>
	else if (__tmp > 65535)
    211a:	6f 81       	ldd	r22, Y+7	; 0x07
    211c:	78 85       	ldd	r23, Y+8	; 0x08
    211e:	89 85       	ldd	r24, Y+9	; 0x09
    2120:	9a 85       	ldd	r25, Y+10	; 0x0a
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	3f ef       	ldi	r19, 0xFF	; 255
    2126:	4f e7       	ldi	r20, 0x7F	; 127
    2128:	57 e4       	ldi	r21, 0x47	; 71
    212a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    212e:	18 16       	cp	r1, r24
    2130:	4c f5       	brge	.+82     	; 0x2184 <KEYPAD_getPressedKey+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2132:	6b 85       	ldd	r22, Y+11	; 0x0b
    2134:	7c 85       	ldd	r23, Y+12	; 0x0c
    2136:	8d 85       	ldd	r24, Y+13	; 0x0d
    2138:	9e 85       	ldd	r25, Y+14	; 0x0e
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e2       	ldi	r20, 0x20	; 32
    2140:	51 e4       	ldi	r21, 0x41	; 65
    2142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	bc 01       	movw	r22, r24
    214c:	cd 01       	movw	r24, r26
    214e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	9e 83       	std	Y+6, r25	; 0x06
    2158:	8d 83       	std	Y+5, r24	; 0x05
    215a:	0f c0       	rjmp	.+30     	; 0x217a <KEYPAD_getPressedKey+0x192>
    215c:	89 e1       	ldi	r24, 0x19	; 25
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	9c 83       	std	Y+4, r25	; 0x04
    2162:	8b 83       	std	Y+3, r24	; 0x03
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	9c 81       	ldd	r25, Y+4	; 0x04
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <KEYPAD_getPressedKey+0x180>
    216c:	9c 83       	std	Y+4, r25	; 0x04
    216e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	9e 81       	ldd	r25, Y+6	; 0x06
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	9e 83       	std	Y+6, r25	; 0x06
    2178:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217a:	8d 81       	ldd	r24, Y+5	; 0x05
    217c:	9e 81       	ldd	r25, Y+6	; 0x06
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	69 f7       	brne	.-38     	; 0x215c <KEYPAD_getPressedKey+0x174>
    2182:	14 c0       	rjmp	.+40     	; 0x21ac <KEYPAD_getPressedKey+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2184:	6f 81       	ldd	r22, Y+7	; 0x07
    2186:	78 85       	ldd	r23, Y+8	; 0x08
    2188:	89 85       	ldd	r24, Y+9	; 0x09
    218a:	9a 85       	ldd	r25, Y+10	; 0x0a
    218c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	8d 81       	ldd	r24, Y+5	; 0x05
    219a:	9e 81       	ldd	r25, Y+6	; 0x06
    219c:	9a 83       	std	Y+2, r25	; 0x02
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	9a 81       	ldd	r25, Y+2	; 0x02
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	f1 f7       	brne	.-4      	; 0x21a4 <KEYPAD_getPressedKey+0x1bc>
    21a8:	9a 83       	std	Y+2, r25	; 0x02
    21aa:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    21ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ae:	8f 5f       	subi	r24, 0xFF	; 255
    21b0:	8f 87       	std	Y+15, r24	; 0x0f
    21b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b4:	84 30       	cpi	r24, 0x04	; 4
    21b6:	08 f4       	brcc	.+2      	; 0x21ba <KEYPAD_getPressedKey+0x1d2>
    21b8:	4b cf       	rjmp	.-362    	; 0x2050 <KEYPAD_getPressedKey+0x68>
    21ba:	48 cf       	rjmp	.-368    	; 0x204c <KEYPAD_getPressedKey+0x64>

000021bc <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	00 d0       	rcall	.+0      	; 0x21c2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    21c2:	00 d0       	rcall	.+0      	; 0x21c4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    21ca:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	3c 83       	std	Y+4, r19	; 0x04
    21d4:	2b 83       	std	Y+3, r18	; 0x03
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	9c 81       	ldd	r25, Y+4	; 0x04
    21da:	88 30       	cpi	r24, 0x08	; 8
    21dc:	91 05       	cpc	r25, r1
    21de:	09 f4       	brne	.+2      	; 0x21e2 <KEYPAD_4x4_adjustKeyNumber+0x26>
    21e0:	6f c0       	rjmp	.+222    	; 0x22c0 <KEYPAD_4x4_adjustKeyNumber+0x104>
    21e2:	2b 81       	ldd	r18, Y+3	; 0x03
    21e4:	3c 81       	ldd	r19, Y+4	; 0x04
    21e6:	29 30       	cpi	r18, 0x09	; 9
    21e8:	31 05       	cpc	r19, r1
    21ea:	54 f5       	brge	.+84     	; 0x2240 <KEYPAD_4x4_adjustKeyNumber+0x84>
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	9c 81       	ldd	r25, Y+4	; 0x04
    21f0:	84 30       	cpi	r24, 0x04	; 4
    21f2:	91 05       	cpc	r25, r1
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    21f6:	58 c0       	rjmp	.+176    	; 0x22a8 <KEYPAD_4x4_adjustKeyNumber+0xec>
    21f8:	2b 81       	ldd	r18, Y+3	; 0x03
    21fa:	3c 81       	ldd	r19, Y+4	; 0x04
    21fc:	25 30       	cpi	r18, 0x05	; 5
    21fe:	31 05       	cpc	r19, r1
    2200:	94 f4       	brge	.+36     	; 0x2226 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2202:	8b 81       	ldd	r24, Y+3	; 0x03
    2204:	9c 81       	ldd	r25, Y+4	; 0x04
    2206:	82 30       	cpi	r24, 0x02	; 2
    2208:	91 05       	cpc	r25, r1
    220a:	09 f4       	brne	.+2      	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x52>
    220c:	47 c0       	rjmp	.+142    	; 0x229c <KEYPAD_4x4_adjustKeyNumber+0xe0>
    220e:	2b 81       	ldd	r18, Y+3	; 0x03
    2210:	3c 81       	ldd	r19, Y+4	; 0x04
    2212:	23 30       	cpi	r18, 0x03	; 3
    2214:	31 05       	cpc	r19, r1
    2216:	0c f0       	brlt	.+2      	; 0x221a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2218:	44 c0       	rjmp	.+136    	; 0x22a2 <KEYPAD_4x4_adjustKeyNumber+0xe6>
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	9c 81       	ldd	r25, Y+4	; 0x04
    221e:	81 30       	cpi	r24, 0x01	; 1
    2220:	91 05       	cpc	r25, r1
    2222:	c9 f1       	breq	.+114    	; 0x2296 <KEYPAD_4x4_adjustKeyNumber+0xda>
    2224:	67 c0       	rjmp	.+206    	; 0x22f4 <KEYPAD_4x4_adjustKeyNumber+0x138>
    2226:	2b 81       	ldd	r18, Y+3	; 0x03
    2228:	3c 81       	ldd	r19, Y+4	; 0x04
    222a:	26 30       	cpi	r18, 0x06	; 6
    222c:	31 05       	cpc	r19, r1
    222e:	09 f4       	brne	.+2      	; 0x2232 <KEYPAD_4x4_adjustKeyNumber+0x76>
    2230:	41 c0       	rjmp	.+130    	; 0x22b4 <KEYPAD_4x4_adjustKeyNumber+0xf8>
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	9c 81       	ldd	r25, Y+4	; 0x04
    2236:	87 30       	cpi	r24, 0x07	; 7
    2238:	91 05       	cpc	r25, r1
    223a:	0c f0       	brlt	.+2      	; 0x223e <KEYPAD_4x4_adjustKeyNumber+0x82>
    223c:	3e c0       	rjmp	.+124    	; 0x22ba <KEYPAD_4x4_adjustKeyNumber+0xfe>
    223e:	37 c0       	rjmp	.+110    	; 0x22ae <KEYPAD_4x4_adjustKeyNumber+0xf2>
    2240:	2b 81       	ldd	r18, Y+3	; 0x03
    2242:	3c 81       	ldd	r19, Y+4	; 0x04
    2244:	2c 30       	cpi	r18, 0x0C	; 12
    2246:	31 05       	cpc	r19, r1
    2248:	09 f4       	brne	.+2      	; 0x224c <KEYPAD_4x4_adjustKeyNumber+0x90>
    224a:	45 c0       	rjmp	.+138    	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x11a>
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	8d 30       	cpi	r24, 0x0D	; 13
    2252:	91 05       	cpc	r25, r1
    2254:	5c f4       	brge	.+22     	; 0x226c <KEYPAD_4x4_adjustKeyNumber+0xb0>
    2256:	2b 81       	ldd	r18, Y+3	; 0x03
    2258:	3c 81       	ldd	r19, Y+4	; 0x04
    225a:	2a 30       	cpi	r18, 0x0A	; 10
    225c:	31 05       	cpc	r19, r1
    225e:	a9 f1       	breq	.+106    	; 0x22ca <KEYPAD_4x4_adjustKeyNumber+0x10e>
    2260:	8b 81       	ldd	r24, Y+3	; 0x03
    2262:	9c 81       	ldd	r25, Y+4	; 0x04
    2264:	8b 30       	cpi	r24, 0x0B	; 11
    2266:	91 05       	cpc	r25, r1
    2268:	9c f5       	brge	.+102    	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x114>
    226a:	2c c0       	rjmp	.+88     	; 0x22c4 <KEYPAD_4x4_adjustKeyNumber+0x108>
    226c:	2b 81       	ldd	r18, Y+3	; 0x03
    226e:	3c 81       	ldd	r19, Y+4	; 0x04
    2270:	2e 30       	cpi	r18, 0x0E	; 14
    2272:	31 05       	cpc	r19, r1
    2274:	b1 f1       	breq	.+108    	; 0x22e2 <KEYPAD_4x4_adjustKeyNumber+0x126>
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	8e 30       	cpi	r24, 0x0E	; 14
    227c:	91 05       	cpc	r25, r1
    227e:	74 f1       	brlt	.+92     	; 0x22dc <KEYPAD_4x4_adjustKeyNumber+0x120>
    2280:	2b 81       	ldd	r18, Y+3	; 0x03
    2282:	3c 81       	ldd	r19, Y+4	; 0x04
    2284:	2f 30       	cpi	r18, 0x0F	; 15
    2286:	31 05       	cpc	r19, r1
    2288:	79 f1       	breq	.+94     	; 0x22e8 <KEYPAD_4x4_adjustKeyNumber+0x12c>
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	9c 81       	ldd	r25, Y+4	; 0x04
    228e:	80 31       	cpi	r24, 0x10	; 16
    2290:	91 05       	cpc	r25, r1
    2292:	69 f1       	breq	.+90     	; 0x22ee <KEYPAD_4x4_adjustKeyNumber+0x132>
    2294:	2f c0       	rjmp	.+94     	; 0x22f4 <KEYPAD_4x4_adjustKeyNumber+0x138>
	{
		case 1: keypad_button = 7;
    2296:	87 e0       	ldi	r24, 0x07	; 7
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	2e c0       	rjmp	.+92     	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: keypad_button = 4;
    229c:	84 e0       	ldi	r24, 0x04	; 4
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	2b c0       	rjmp	.+86     	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: keypad_button = 1;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	28 c0       	rjmp	.+80     	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: keypad_button = 13; // ASCII Code of %
    22a8:	8d e0       	ldi	r24, 0x0D	; 13
    22aa:	89 83       	std	Y+1, r24	; 0x01
    22ac:	25 c0       	rjmp	.+74     	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: keypad_button = 8;
    22ae:	88 e0       	ldi	r24, 0x08	; 8
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	22 c0       	rjmp	.+68     	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: keypad_button = 5;
    22b4:	85 e0       	ldi	r24, 0x05	; 5
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	1f c0       	rjmp	.+62     	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: keypad_button = 2;
    22ba:	82 e0       	ldi	r24, 0x02	; 2
    22bc:	89 83       	std	Y+1, r24	; 0x01
    22be:	1c c0       	rjmp	.+56     	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: keypad_button = 0; /* ASCII Code of '*' */
    22c0:	19 82       	std	Y+1, r1	; 0x01
    22c2:	1a c0       	rjmp	.+52     	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: keypad_button = 9;
    22c4:	89 e0       	ldi	r24, 0x09	; 9
    22c6:	89 83       	std	Y+1, r24	; 0x01
    22c8:	17 c0       	rjmp	.+46     	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: keypad_button = 6;
    22ca:	86 e0       	ldi	r24, 0x06	; 6
    22cc:	89 83       	std	Y+1, r24	; 0x01
    22ce:	14 c0       	rjmp	.+40     	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: keypad_button = 3;
    22d0:	83 e0       	ldi	r24, 0x03	; 3
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	11 c0       	rjmp	.+34     	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: keypad_button = '='; /* ASCII Code of '-' */
    22d6:	8d e3       	ldi	r24, 0x3D	; 61
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	0e c0       	rjmp	.+28     	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: keypad_button = '%';  /* ASCII of Enter */
    22dc:	85 e2       	ldi	r24, 0x25	; 37
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	0b c0       	rjmp	.+22     	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: keypad_button = '*';
    22e2:	8a e2       	ldi	r24, 0x2A	; 42
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	08 c0       	rjmp	.+16     	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: keypad_button = '-'; /* ASCII Code of '=' */
    22e8:	8d e2       	ldi	r24, 0x2D	; 45
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	05 c0       	rjmp	.+10     	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    22ee:	8b e2       	ldi	r24, 0x2B	; 43
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		default: keypad_button = button_number;
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	2e 97       	sbiw	r28, 0x0e	; 14
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	41 e0       	ldi	r20, 0x01	; 1
    2322:	0e 94 b6 0c 	call	0x196c	; 0x196c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	61 e0       	ldi	r22, 0x01	; 1
    232a:	41 e0       	ldi	r20, 0x01	; 1
    232c:	0e 94 b6 0c 	call	0x196c	; 0x196c <GPIO_setupPinDirection>
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	a0 ea       	ldi	r26, 0xA0	; 160
    2336:	b1 e4       	ldi	r27, 0x41	; 65
    2338:	8b 87       	std	Y+11, r24	; 0x0b
    233a:	9c 87       	std	Y+12, r25	; 0x0c
    233c:	ad 87       	std	Y+13, r26	; 0x0d
    233e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2340:	6b 85       	ldd	r22, Y+11	; 0x0b
    2342:	7c 85       	ldd	r23, Y+12	; 0x0c
    2344:	8d 85       	ldd	r24, Y+13	; 0x0d
    2346:	9e 85       	ldd	r25, Y+14	; 0x0e
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	4a e7       	ldi	r20, 0x7A	; 122
    234e:	53 e4       	ldi	r21, 0x43	; 67
    2350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	8f 83       	std	Y+7, r24	; 0x07
    235a:	98 87       	std	Y+8, r25	; 0x08
    235c:	a9 87       	std	Y+9, r26	; 0x09
    235e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2360:	6f 81       	ldd	r22, Y+7	; 0x07
    2362:	78 85       	ldd	r23, Y+8	; 0x08
    2364:	89 85       	ldd	r24, Y+9	; 0x09
    2366:	9a 85       	ldd	r25, Y+10	; 0x0a
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e8       	ldi	r20, 0x80	; 128
    236e:	5f e3       	ldi	r21, 0x3F	; 63
    2370:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2374:	88 23       	and	r24, r24
    2376:	2c f4       	brge	.+10     	; 0x2382 <LCD_init+0x7a>
		__ticks = 1;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	9e 83       	std	Y+6, r25	; 0x06
    237e:	8d 83       	std	Y+5, r24	; 0x05
    2380:	3f c0       	rjmp	.+126    	; 0x2400 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2382:	6f 81       	ldd	r22, Y+7	; 0x07
    2384:	78 85       	ldd	r23, Y+8	; 0x08
    2386:	89 85       	ldd	r24, Y+9	; 0x09
    2388:	9a 85       	ldd	r25, Y+10	; 0x0a
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	3f ef       	ldi	r19, 0xFF	; 255
    238e:	4f e7       	ldi	r20, 0x7F	; 127
    2390:	57 e4       	ldi	r21, 0x47	; 71
    2392:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2396:	18 16       	cp	r1, r24
    2398:	4c f5       	brge	.+82     	; 0x23ec <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239a:	6b 85       	ldd	r22, Y+11	; 0x0b
    239c:	7c 85       	ldd	r23, Y+12	; 0x0c
    239e:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e2       	ldi	r20, 0x20	; 32
    23a8:	51 e4       	ldi	r21, 0x41	; 65
    23aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	bc 01       	movw	r22, r24
    23b4:	cd 01       	movw	r24, r26
    23b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	9e 83       	std	Y+6, r25	; 0x06
    23c0:	8d 83       	std	Y+5, r24	; 0x05
    23c2:	0f c0       	rjmp	.+30     	; 0x23e2 <LCD_init+0xda>
    23c4:	89 e1       	ldi	r24, 0x19	; 25
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	9c 83       	std	Y+4, r25	; 0x04
    23ca:	8b 83       	std	Y+3, r24	; 0x03
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	9c 81       	ldd	r25, Y+4	; 0x04
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <LCD_init+0xc8>
    23d4:	9c 83       	std	Y+4, r25	; 0x04
    23d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d8:	8d 81       	ldd	r24, Y+5	; 0x05
    23da:	9e 81       	ldd	r25, Y+6	; 0x06
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	9e 83       	std	Y+6, r25	; 0x06
    23e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e2:	8d 81       	ldd	r24, Y+5	; 0x05
    23e4:	9e 81       	ldd	r25, Y+6	; 0x06
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	69 f7       	brne	.-38     	; 0x23c4 <LCD_init+0xbc>
    23ea:	14 c0       	rjmp	.+40     	; 0x2414 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ec:	6f 81       	ldd	r22, Y+7	; 0x07
    23ee:	78 85       	ldd	r23, Y+8	; 0x08
    23f0:	89 85       	ldd	r24, Y+9	; 0x09
    23f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	9e 81       	ldd	r25, Y+6	; 0x06
    2404:	9a 83       	std	Y+2, r25	; 0x02
    2406:	89 83       	std	Y+1, r24	; 0x01
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	9a 81       	ldd	r25, Y+2	; 0x02
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	f1 f7       	brne	.-4      	; 0x240c <LCD_init+0x104>
    2410:	9a 83       	std	Y+2, r25	; 0x02
    2412:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	6f ef       	ldi	r22, 0xFF	; 255
    2418:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    241c:	88 e3       	ldi	r24, 0x38	; 56
    241e:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2422:	8c e0       	ldi	r24, 0x0C	; 12
    2424:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_sendCommand>
}
    242e:	2e 96       	adiw	r28, 0x0e	; 14
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	e9 97       	sbiw	r28, 0x39	; 57
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <GPIO_writePin>
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	a0 e8       	ldi	r26, 0x80	; 128
    2466:	bf e3       	ldi	r27, 0x3F	; 63
    2468:	8d ab       	std	Y+53, r24	; 0x35
    246a:	9e ab       	std	Y+54, r25	; 0x36
    246c:	af ab       	std	Y+55, r26	; 0x37
    246e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2470:	6d a9       	ldd	r22, Y+53	; 0x35
    2472:	7e a9       	ldd	r23, Y+54	; 0x36
    2474:	8f a9       	ldd	r24, Y+55	; 0x37
    2476:	98 ad       	ldd	r25, Y+56	; 0x38
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	4a e7       	ldi	r20, 0x7A	; 122
    247e:	53 e4       	ldi	r21, 0x43	; 67
    2480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	89 ab       	std	Y+49, r24	; 0x31
    248a:	9a ab       	std	Y+50, r25	; 0x32
    248c:	ab ab       	std	Y+51, r26	; 0x33
    248e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2490:	69 a9       	ldd	r22, Y+49	; 0x31
    2492:	7a a9       	ldd	r23, Y+50	; 0x32
    2494:	8b a9       	ldd	r24, Y+51	; 0x33
    2496:	9c a9       	ldd	r25, Y+52	; 0x34
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e8       	ldi	r20, 0x80	; 128
    249e:	5f e3       	ldi	r21, 0x3F	; 63
    24a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a4:	88 23       	and	r24, r24
    24a6:	2c f4       	brge	.+10     	; 0x24b2 <LCD_sendCommand+0x72>
		__ticks = 1;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	98 ab       	std	Y+48, r25	; 0x30
    24ae:	8f a7       	std	Y+47, r24	; 0x2f
    24b0:	3f c0       	rjmp	.+126    	; 0x2530 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    24b2:	69 a9       	ldd	r22, Y+49	; 0x31
    24b4:	7a a9       	ldd	r23, Y+50	; 0x32
    24b6:	8b a9       	ldd	r24, Y+51	; 0x33
    24b8:	9c a9       	ldd	r25, Y+52	; 0x34
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	3f ef       	ldi	r19, 0xFF	; 255
    24be:	4f e7       	ldi	r20, 0x7F	; 127
    24c0:	57 e4       	ldi	r21, 0x47	; 71
    24c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c6:	18 16       	cp	r1, r24
    24c8:	4c f5       	brge	.+82     	; 0x251c <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ca:	6d a9       	ldd	r22, Y+53	; 0x35
    24cc:	7e a9       	ldd	r23, Y+54	; 0x36
    24ce:	8f a9       	ldd	r24, Y+55	; 0x37
    24d0:	98 ad       	ldd	r25, Y+56	; 0x38
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e2       	ldi	r20, 0x20	; 32
    24d8:	51 e4       	ldi	r21, 0x41	; 65
    24da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	bc 01       	movw	r22, r24
    24e4:	cd 01       	movw	r24, r26
    24e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	98 ab       	std	Y+48, r25	; 0x30
    24f0:	8f a7       	std	Y+47, r24	; 0x2f
    24f2:	0f c0       	rjmp	.+30     	; 0x2512 <LCD_sendCommand+0xd2>
    24f4:	89 e1       	ldi	r24, 0x19	; 25
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9e a7       	std	Y+46, r25	; 0x2e
    24fa:	8d a7       	std	Y+45, r24	; 0x2d
    24fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    24fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	f1 f7       	brne	.-4      	; 0x2500 <LCD_sendCommand+0xc0>
    2504:	9e a7       	std	Y+46, r25	; 0x2e
    2506:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2508:	8f a5       	ldd	r24, Y+47	; 0x2f
    250a:	98 a9       	ldd	r25, Y+48	; 0x30
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	98 ab       	std	Y+48, r25	; 0x30
    2510:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2512:	8f a5       	ldd	r24, Y+47	; 0x2f
    2514:	98 a9       	ldd	r25, Y+48	; 0x30
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	69 f7       	brne	.-38     	; 0x24f4 <LCD_sendCommand+0xb4>
    251a:	14 c0       	rjmp	.+40     	; 0x2544 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251c:	69 a9       	ldd	r22, Y+49	; 0x31
    251e:	7a a9       	ldd	r23, Y+50	; 0x32
    2520:	8b a9       	ldd	r24, Y+51	; 0x33
    2522:	9c a9       	ldd	r25, Y+52	; 0x34
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	98 ab       	std	Y+48, r25	; 0x30
    252e:	8f a7       	std	Y+47, r24	; 0x2f
    2530:	8f a5       	ldd	r24, Y+47	; 0x2f
    2532:	98 a9       	ldd	r25, Y+48	; 0x30
    2534:	9c a7       	std	Y+44, r25	; 0x2c
    2536:	8b a7       	std	Y+43, r24	; 0x2b
    2538:	8b a5       	ldd	r24, Y+43	; 0x2b
    253a:	9c a5       	ldd	r25, Y+44	; 0x2c
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <LCD_sendCommand+0xfc>
    2540:	9c a7       	std	Y+44, r25	; 0x2c
    2542:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	61 e0       	ldi	r22, 0x01	; 1
    2548:	41 e0       	ldi	r20, 0x01	; 1
    254a:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <GPIO_writePin>
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	a0 e8       	ldi	r26, 0x80	; 128
    2554:	bf e3       	ldi	r27, 0x3F	; 63
    2556:	8f a3       	std	Y+39, r24	; 0x27
    2558:	98 a7       	std	Y+40, r25	; 0x28
    255a:	a9 a7       	std	Y+41, r26	; 0x29
    255c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255e:	6f a1       	ldd	r22, Y+39	; 0x27
    2560:	78 a5       	ldd	r23, Y+40	; 0x28
    2562:	89 a5       	ldd	r24, Y+41	; 0x29
    2564:	9a a5       	ldd	r25, Y+42	; 0x2a
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	4a e7       	ldi	r20, 0x7A	; 122
    256c:	53 e4       	ldi	r21, 0x43	; 67
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	8b a3       	std	Y+35, r24	; 0x23
    2578:	9c a3       	std	Y+36, r25	; 0x24
    257a:	ad a3       	std	Y+37, r26	; 0x25
    257c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    257e:	6b a1       	ldd	r22, Y+35	; 0x23
    2580:	7c a1       	ldd	r23, Y+36	; 0x24
    2582:	8d a1       	ldd	r24, Y+37	; 0x25
    2584:	9e a1       	ldd	r25, Y+38	; 0x26
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	40 e8       	ldi	r20, 0x80	; 128
    258c:	5f e3       	ldi	r21, 0x3F	; 63
    258e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2592:	88 23       	and	r24, r24
    2594:	2c f4       	brge	.+10     	; 0x25a0 <LCD_sendCommand+0x160>
		__ticks = 1;
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	9a a3       	std	Y+34, r25	; 0x22
    259c:	89 a3       	std	Y+33, r24	; 0x21
    259e:	3f c0       	rjmp	.+126    	; 0x261e <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    25a0:	6b a1       	ldd	r22, Y+35	; 0x23
    25a2:	7c a1       	ldd	r23, Y+36	; 0x24
    25a4:	8d a1       	ldd	r24, Y+37	; 0x25
    25a6:	9e a1       	ldd	r25, Y+38	; 0x26
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	3f ef       	ldi	r19, 0xFF	; 255
    25ac:	4f e7       	ldi	r20, 0x7F	; 127
    25ae:	57 e4       	ldi	r21, 0x47	; 71
    25b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25b4:	18 16       	cp	r1, r24
    25b6:	4c f5       	brge	.+82     	; 0x260a <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b8:	6f a1       	ldd	r22, Y+39	; 0x27
    25ba:	78 a5       	ldd	r23, Y+40	; 0x28
    25bc:	89 a5       	ldd	r24, Y+41	; 0x29
    25be:	9a a5       	ldd	r25, Y+42	; 0x2a
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e2       	ldi	r20, 0x20	; 32
    25c6:	51 e4       	ldi	r21, 0x41	; 65
    25c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	bc 01       	movw	r22, r24
    25d2:	cd 01       	movw	r24, r26
    25d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	9a a3       	std	Y+34, r25	; 0x22
    25de:	89 a3       	std	Y+33, r24	; 0x21
    25e0:	0f c0       	rjmp	.+30     	; 0x2600 <LCD_sendCommand+0x1c0>
    25e2:	89 e1       	ldi	r24, 0x19	; 25
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	98 a3       	std	Y+32, r25	; 0x20
    25e8:	8f 8f       	std	Y+31, r24	; 0x1f
    25ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ec:	98 a1       	ldd	r25, Y+32	; 0x20
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <LCD_sendCommand+0x1ae>
    25f2:	98 a3       	std	Y+32, r25	; 0x20
    25f4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f6:	89 a1       	ldd	r24, Y+33	; 0x21
    25f8:	9a a1       	ldd	r25, Y+34	; 0x22
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	9a a3       	std	Y+34, r25	; 0x22
    25fe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2600:	89 a1       	ldd	r24, Y+33	; 0x21
    2602:	9a a1       	ldd	r25, Y+34	; 0x22
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	69 f7       	brne	.-38     	; 0x25e2 <LCD_sendCommand+0x1a2>
    2608:	14 c0       	rjmp	.+40     	; 0x2632 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260a:	6b a1       	ldd	r22, Y+35	; 0x23
    260c:	7c a1       	ldd	r23, Y+36	; 0x24
    260e:	8d a1       	ldd	r24, Y+37	; 0x25
    2610:	9e a1       	ldd	r25, Y+38	; 0x26
    2612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	9a a3       	std	Y+34, r25	; 0x22
    261c:	89 a3       	std	Y+33, r24	; 0x21
    261e:	89 a1       	ldd	r24, Y+33	; 0x21
    2620:	9a a1       	ldd	r25, Y+34	; 0x22
    2622:	9e 8f       	std	Y+30, r25	; 0x1e
    2624:	8d 8f       	std	Y+29, r24	; 0x1d
    2626:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2628:	9e 8d       	ldd	r25, Y+30	; 0x1e
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	f1 f7       	brne	.-4      	; 0x262a <LCD_sendCommand+0x1ea>
    262e:	9e 8f       	std	Y+30, r25	; 0x1e
    2630:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	69 ad       	ldd	r22, Y+57	; 0x39
    2636:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePort>
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	a0 e8       	ldi	r26, 0x80	; 128
    2640:	bf e3       	ldi	r27, 0x3F	; 63
    2642:	89 8f       	std	Y+25, r24	; 0x19
    2644:	9a 8f       	std	Y+26, r25	; 0x1a
    2646:	ab 8f       	std	Y+27, r26	; 0x1b
    2648:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264a:	69 8d       	ldd	r22, Y+25	; 0x19
    264c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    264e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2650:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	4a e7       	ldi	r20, 0x7A	; 122
    2658:	53 e4       	ldi	r21, 0x43	; 67
    265a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	8d 8b       	std	Y+21, r24	; 0x15
    2664:	9e 8b       	std	Y+22, r25	; 0x16
    2666:	af 8b       	std	Y+23, r26	; 0x17
    2668:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    266a:	6d 89       	ldd	r22, Y+21	; 0x15
    266c:	7e 89       	ldd	r23, Y+22	; 0x16
    266e:	8f 89       	ldd	r24, Y+23	; 0x17
    2670:	98 8d       	ldd	r25, Y+24	; 0x18
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e8       	ldi	r20, 0x80	; 128
    2678:	5f e3       	ldi	r21, 0x3F	; 63
    267a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    267e:	88 23       	and	r24, r24
    2680:	2c f4       	brge	.+10     	; 0x268c <LCD_sendCommand+0x24c>
		__ticks = 1;
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	9c 8b       	std	Y+20, r25	; 0x14
    2688:	8b 8b       	std	Y+19, r24	; 0x13
    268a:	3f c0       	rjmp	.+126    	; 0x270a <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    268c:	6d 89       	ldd	r22, Y+21	; 0x15
    268e:	7e 89       	ldd	r23, Y+22	; 0x16
    2690:	8f 89       	ldd	r24, Y+23	; 0x17
    2692:	98 8d       	ldd	r25, Y+24	; 0x18
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	3f ef       	ldi	r19, 0xFF	; 255
    2698:	4f e7       	ldi	r20, 0x7F	; 127
    269a:	57 e4       	ldi	r21, 0x47	; 71
    269c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26a0:	18 16       	cp	r1, r24
    26a2:	4c f5       	brge	.+82     	; 0x26f6 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a4:	69 8d       	ldd	r22, Y+25	; 0x19
    26a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e2       	ldi	r20, 0x20	; 32
    26b2:	51 e4       	ldi	r21, 0x41	; 65
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	9c 8b       	std	Y+20, r25	; 0x14
    26ca:	8b 8b       	std	Y+19, r24	; 0x13
    26cc:	0f c0       	rjmp	.+30     	; 0x26ec <LCD_sendCommand+0x2ac>
    26ce:	89 e1       	ldi	r24, 0x19	; 25
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	9a 8b       	std	Y+18, r25	; 0x12
    26d4:	89 8b       	std	Y+17, r24	; 0x11
    26d6:	89 89       	ldd	r24, Y+17	; 0x11
    26d8:	9a 89       	ldd	r25, Y+18	; 0x12
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <LCD_sendCommand+0x29a>
    26de:	9a 8b       	std	Y+18, r25	; 0x12
    26e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e2:	8b 89       	ldd	r24, Y+19	; 0x13
    26e4:	9c 89       	ldd	r25, Y+20	; 0x14
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	9c 8b       	std	Y+20, r25	; 0x14
    26ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ec:	8b 89       	ldd	r24, Y+19	; 0x13
    26ee:	9c 89       	ldd	r25, Y+20	; 0x14
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	69 f7       	brne	.-38     	; 0x26ce <LCD_sendCommand+0x28e>
    26f4:	14 c0       	rjmp	.+40     	; 0x271e <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f6:	6d 89       	ldd	r22, Y+21	; 0x15
    26f8:	7e 89       	ldd	r23, Y+22	; 0x16
    26fa:	8f 89       	ldd	r24, Y+23	; 0x17
    26fc:	98 8d       	ldd	r25, Y+24	; 0x18
    26fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	9c 8b       	std	Y+20, r25	; 0x14
    2708:	8b 8b       	std	Y+19, r24	; 0x13
    270a:	8b 89       	ldd	r24, Y+19	; 0x13
    270c:	9c 89       	ldd	r25, Y+20	; 0x14
    270e:	98 8b       	std	Y+16, r25	; 0x10
    2710:	8f 87       	std	Y+15, r24	; 0x0f
    2712:	8f 85       	ldd	r24, Y+15	; 0x0f
    2714:	98 89       	ldd	r25, Y+16	; 0x10
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	f1 f7       	brne	.-4      	; 0x2716 <LCD_sendCommand+0x2d6>
    271a:	98 8b       	std	Y+16, r25	; 0x10
    271c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	61 e0       	ldi	r22, 0x01	; 1
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <GPIO_writePin>
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	a0 e8       	ldi	r26, 0x80	; 128
    272e:	bf e3       	ldi	r27, 0x3F	; 63
    2730:	8b 87       	std	Y+11, r24	; 0x0b
    2732:	9c 87       	std	Y+12, r25	; 0x0c
    2734:	ad 87       	std	Y+13, r26	; 0x0d
    2736:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2738:	6b 85       	ldd	r22, Y+11	; 0x0b
    273a:	7c 85       	ldd	r23, Y+12	; 0x0c
    273c:	8d 85       	ldd	r24, Y+13	; 0x0d
    273e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	4a e7       	ldi	r20, 0x7A	; 122
    2746:	53 e4       	ldi	r21, 0x43	; 67
    2748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	8f 83       	std	Y+7, r24	; 0x07
    2752:	98 87       	std	Y+8, r25	; 0x08
    2754:	a9 87       	std	Y+9, r26	; 0x09
    2756:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2758:	6f 81       	ldd	r22, Y+7	; 0x07
    275a:	78 85       	ldd	r23, Y+8	; 0x08
    275c:	89 85       	ldd	r24, Y+9	; 0x09
    275e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e8       	ldi	r20, 0x80	; 128
    2766:	5f e3       	ldi	r21, 0x3F	; 63
    2768:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    276c:	88 23       	and	r24, r24
    276e:	2c f4       	brge	.+10     	; 0x277a <LCD_sendCommand+0x33a>
		__ticks = 1;
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	9e 83       	std	Y+6, r25	; 0x06
    2776:	8d 83       	std	Y+5, r24	; 0x05
    2778:	3f c0       	rjmp	.+126    	; 0x27f8 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    277a:	6f 81       	ldd	r22, Y+7	; 0x07
    277c:	78 85       	ldd	r23, Y+8	; 0x08
    277e:	89 85       	ldd	r24, Y+9	; 0x09
    2780:	9a 85       	ldd	r25, Y+10	; 0x0a
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	3f ef       	ldi	r19, 0xFF	; 255
    2786:	4f e7       	ldi	r20, 0x7F	; 127
    2788:	57 e4       	ldi	r21, 0x47	; 71
    278a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    278e:	18 16       	cp	r1, r24
    2790:	4c f5       	brge	.+82     	; 0x27e4 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2792:	6b 85       	ldd	r22, Y+11	; 0x0b
    2794:	7c 85       	ldd	r23, Y+12	; 0x0c
    2796:	8d 85       	ldd	r24, Y+13	; 0x0d
    2798:	9e 85       	ldd	r25, Y+14	; 0x0e
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e2       	ldi	r20, 0x20	; 32
    27a0:	51 e4       	ldi	r21, 0x41	; 65
    27a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	bc 01       	movw	r22, r24
    27ac:	cd 01       	movw	r24, r26
    27ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	9e 83       	std	Y+6, r25	; 0x06
    27b8:	8d 83       	std	Y+5, r24	; 0x05
    27ba:	0f c0       	rjmp	.+30     	; 0x27da <LCD_sendCommand+0x39a>
    27bc:	89 e1       	ldi	r24, 0x19	; 25
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	9c 83       	std	Y+4, r25	; 0x04
    27c2:	8b 83       	std	Y+3, r24	; 0x03
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	9c 81       	ldd	r25, Y+4	; 0x04
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	f1 f7       	brne	.-4      	; 0x27c8 <LCD_sendCommand+0x388>
    27cc:	9c 83       	std	Y+4, r25	; 0x04
    27ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d0:	8d 81       	ldd	r24, Y+5	; 0x05
    27d2:	9e 81       	ldd	r25, Y+6	; 0x06
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	9e 83       	std	Y+6, r25	; 0x06
    27d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27da:	8d 81       	ldd	r24, Y+5	; 0x05
    27dc:	9e 81       	ldd	r25, Y+6	; 0x06
    27de:	00 97       	sbiw	r24, 0x00	; 0
    27e0:	69 f7       	brne	.-38     	; 0x27bc <LCD_sendCommand+0x37c>
    27e2:	14 c0       	rjmp	.+40     	; 0x280c <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e4:	6f 81       	ldd	r22, Y+7	; 0x07
    27e6:	78 85       	ldd	r23, Y+8	; 0x08
    27e8:	89 85       	ldd	r24, Y+9	; 0x09
    27ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	9e 83       	std	Y+6, r25	; 0x06
    27f6:	8d 83       	std	Y+5, r24	; 0x05
    27f8:	8d 81       	ldd	r24, Y+5	; 0x05
    27fa:	9e 81       	ldd	r25, Y+6	; 0x06
    27fc:	9a 83       	std	Y+2, r25	; 0x02
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	9a 81       	ldd	r25, Y+2	; 0x02
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	f1 f7       	brne	.-4      	; 0x2804 <LCD_sendCommand+0x3c4>
    2808:	9a 83       	std	Y+2, r25	; 0x02
    280a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    280c:	e9 96       	adiw	r28, 0x39	; 57
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	f8 94       	cli
    2812:	de bf       	out	0x3e, r29	; 62
    2814:	0f be       	out	0x3f, r0	; 63
    2816:	cd bf       	out	0x3d, r28	; 61
    2818:	cf 91       	pop	r28
    281a:	df 91       	pop	r29
    281c:	08 95       	ret

0000281e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    281e:	df 93       	push	r29
    2820:	cf 93       	push	r28
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	e9 97       	sbiw	r28, 0x39	; 57
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	60 e0       	ldi	r22, 0x00	; 0
    2838:	41 e0       	ldi	r20, 0x01	; 1
    283a:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <GPIO_writePin>
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	a0 e8       	ldi	r26, 0x80	; 128
    2844:	bf e3       	ldi	r27, 0x3F	; 63
    2846:	8d ab       	std	Y+53, r24	; 0x35
    2848:	9e ab       	std	Y+54, r25	; 0x36
    284a:	af ab       	std	Y+55, r26	; 0x37
    284c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284e:	6d a9       	ldd	r22, Y+53	; 0x35
    2850:	7e a9       	ldd	r23, Y+54	; 0x36
    2852:	8f a9       	ldd	r24, Y+55	; 0x37
    2854:	98 ad       	ldd	r25, Y+56	; 0x38
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	4a e7       	ldi	r20, 0x7A	; 122
    285c:	53 e4       	ldi	r21, 0x43	; 67
    285e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	89 ab       	std	Y+49, r24	; 0x31
    2868:	9a ab       	std	Y+50, r25	; 0x32
    286a:	ab ab       	std	Y+51, r26	; 0x33
    286c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    286e:	69 a9       	ldd	r22, Y+49	; 0x31
    2870:	7a a9       	ldd	r23, Y+50	; 0x32
    2872:	8b a9       	ldd	r24, Y+51	; 0x33
    2874:	9c a9       	ldd	r25, Y+52	; 0x34
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e8       	ldi	r20, 0x80	; 128
    287c:	5f e3       	ldi	r21, 0x3F	; 63
    287e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2882:	88 23       	and	r24, r24
    2884:	2c f4       	brge	.+10     	; 0x2890 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	98 ab       	std	Y+48, r25	; 0x30
    288c:	8f a7       	std	Y+47, r24	; 0x2f
    288e:	3f c0       	rjmp	.+126    	; 0x290e <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2890:	69 a9       	ldd	r22, Y+49	; 0x31
    2892:	7a a9       	ldd	r23, Y+50	; 0x32
    2894:	8b a9       	ldd	r24, Y+51	; 0x33
    2896:	9c a9       	ldd	r25, Y+52	; 0x34
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	3f ef       	ldi	r19, 0xFF	; 255
    289c:	4f e7       	ldi	r20, 0x7F	; 127
    289e:	57 e4       	ldi	r21, 0x47	; 71
    28a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28a4:	18 16       	cp	r1, r24
    28a6:	4c f5       	brge	.+82     	; 0x28fa <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a8:	6d a9       	ldd	r22, Y+53	; 0x35
    28aa:	7e a9       	ldd	r23, Y+54	; 0x36
    28ac:	8f a9       	ldd	r24, Y+55	; 0x37
    28ae:	98 ad       	ldd	r25, Y+56	; 0x38
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e2       	ldi	r20, 0x20	; 32
    28b6:	51 e4       	ldi	r21, 0x41	; 65
    28b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	bc 01       	movw	r22, r24
    28c2:	cd 01       	movw	r24, r26
    28c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	98 ab       	std	Y+48, r25	; 0x30
    28ce:	8f a7       	std	Y+47, r24	; 0x2f
    28d0:	0f c0       	rjmp	.+30     	; 0x28f0 <LCD_displayCharacter+0xd2>
    28d2:	89 e1       	ldi	r24, 0x19	; 25
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	9e a7       	std	Y+46, r25	; 0x2e
    28d8:	8d a7       	std	Y+45, r24	; 0x2d
    28da:	8d a5       	ldd	r24, Y+45	; 0x2d
    28dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <LCD_displayCharacter+0xc0>
    28e2:	9e a7       	std	Y+46, r25	; 0x2e
    28e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28e8:	98 a9       	ldd	r25, Y+48	; 0x30
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	98 ab       	std	Y+48, r25	; 0x30
    28ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28f2:	98 a9       	ldd	r25, Y+48	; 0x30
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	69 f7       	brne	.-38     	; 0x28d2 <LCD_displayCharacter+0xb4>
    28f8:	14 c0       	rjmp	.+40     	; 0x2922 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fa:	69 a9       	ldd	r22, Y+49	; 0x31
    28fc:	7a a9       	ldd	r23, Y+50	; 0x32
    28fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2900:	9c a9       	ldd	r25, Y+52	; 0x34
    2902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	98 ab       	std	Y+48, r25	; 0x30
    290c:	8f a7       	std	Y+47, r24	; 0x2f
    290e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2910:	98 a9       	ldd	r25, Y+48	; 0x30
    2912:	9c a7       	std	Y+44, r25	; 0x2c
    2914:	8b a7       	std	Y+43, r24	; 0x2b
    2916:	8b a5       	ldd	r24, Y+43	; 0x2b
    2918:	9c a5       	ldd	r25, Y+44	; 0x2c
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	f1 f7       	brne	.-4      	; 0x291a <LCD_displayCharacter+0xfc>
    291e:	9c a7       	std	Y+44, r25	; 0x2c
    2920:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	61 e0       	ldi	r22, 0x01	; 1
    2926:	41 e0       	ldi	r20, 0x01	; 1
    2928:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <GPIO_writePin>
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	a0 e8       	ldi	r26, 0x80	; 128
    2932:	bf e3       	ldi	r27, 0x3F	; 63
    2934:	8f a3       	std	Y+39, r24	; 0x27
    2936:	98 a7       	std	Y+40, r25	; 0x28
    2938:	a9 a7       	std	Y+41, r26	; 0x29
    293a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293c:	6f a1       	ldd	r22, Y+39	; 0x27
    293e:	78 a5       	ldd	r23, Y+40	; 0x28
    2940:	89 a5       	ldd	r24, Y+41	; 0x29
    2942:	9a a5       	ldd	r25, Y+42	; 0x2a
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	4a e7       	ldi	r20, 0x7A	; 122
    294a:	53 e4       	ldi	r21, 0x43	; 67
    294c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	8b a3       	std	Y+35, r24	; 0x23
    2956:	9c a3       	std	Y+36, r25	; 0x24
    2958:	ad a3       	std	Y+37, r26	; 0x25
    295a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    295c:	6b a1       	ldd	r22, Y+35	; 0x23
    295e:	7c a1       	ldd	r23, Y+36	; 0x24
    2960:	8d a1       	ldd	r24, Y+37	; 0x25
    2962:	9e a1       	ldd	r25, Y+38	; 0x26
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e8       	ldi	r20, 0x80	; 128
    296a:	5f e3       	ldi	r21, 0x3F	; 63
    296c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2970:	88 23       	and	r24, r24
    2972:	2c f4       	brge	.+10     	; 0x297e <LCD_displayCharacter+0x160>
		__ticks = 1;
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	9a a3       	std	Y+34, r25	; 0x22
    297a:	89 a3       	std	Y+33, r24	; 0x21
    297c:	3f c0       	rjmp	.+126    	; 0x29fc <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    297e:	6b a1       	ldd	r22, Y+35	; 0x23
    2980:	7c a1       	ldd	r23, Y+36	; 0x24
    2982:	8d a1       	ldd	r24, Y+37	; 0x25
    2984:	9e a1       	ldd	r25, Y+38	; 0x26
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	3f ef       	ldi	r19, 0xFF	; 255
    298a:	4f e7       	ldi	r20, 0x7F	; 127
    298c:	57 e4       	ldi	r21, 0x47	; 71
    298e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2992:	18 16       	cp	r1, r24
    2994:	4c f5       	brge	.+82     	; 0x29e8 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2996:	6f a1       	ldd	r22, Y+39	; 0x27
    2998:	78 a5       	ldd	r23, Y+40	; 0x28
    299a:	89 a5       	ldd	r24, Y+41	; 0x29
    299c:	9a a5       	ldd	r25, Y+42	; 0x2a
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	40 e2       	ldi	r20, 0x20	; 32
    29a4:	51 e4       	ldi	r21, 0x41	; 65
    29a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	bc 01       	movw	r22, r24
    29b0:	cd 01       	movw	r24, r26
    29b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	9a a3       	std	Y+34, r25	; 0x22
    29bc:	89 a3       	std	Y+33, r24	; 0x21
    29be:	0f c0       	rjmp	.+30     	; 0x29de <LCD_displayCharacter+0x1c0>
    29c0:	89 e1       	ldi	r24, 0x19	; 25
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	98 a3       	std	Y+32, r25	; 0x20
    29c6:	8f 8f       	std	Y+31, r24	; 0x1f
    29c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29ca:	98 a1       	ldd	r25, Y+32	; 0x20
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <LCD_displayCharacter+0x1ae>
    29d0:	98 a3       	std	Y+32, r25	; 0x20
    29d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d4:	89 a1       	ldd	r24, Y+33	; 0x21
    29d6:	9a a1       	ldd	r25, Y+34	; 0x22
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	9a a3       	std	Y+34, r25	; 0x22
    29dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29de:	89 a1       	ldd	r24, Y+33	; 0x21
    29e0:	9a a1       	ldd	r25, Y+34	; 0x22
    29e2:	00 97       	sbiw	r24, 0x00	; 0
    29e4:	69 f7       	brne	.-38     	; 0x29c0 <LCD_displayCharacter+0x1a2>
    29e6:	14 c0       	rjmp	.+40     	; 0x2a10 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e8:	6b a1       	ldd	r22, Y+35	; 0x23
    29ea:	7c a1       	ldd	r23, Y+36	; 0x24
    29ec:	8d a1       	ldd	r24, Y+37	; 0x25
    29ee:	9e a1       	ldd	r25, Y+38	; 0x26
    29f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	9a a3       	std	Y+34, r25	; 0x22
    29fa:	89 a3       	std	Y+33, r24	; 0x21
    29fc:	89 a1       	ldd	r24, Y+33	; 0x21
    29fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2a00:	9e 8f       	std	Y+30, r25	; 0x1e
    2a02:	8d 8f       	std	Y+29, r24	; 0x1d
    2a04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	f1 f7       	brne	.-4      	; 0x2a08 <LCD_displayCharacter+0x1ea>
    2a0c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a0e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	69 ad       	ldd	r22, Y+57	; 0x39
    2a14:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePort>
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	a0 e8       	ldi	r26, 0x80	; 128
    2a1e:	bf e3       	ldi	r27, 0x3F	; 63
    2a20:	89 8f       	std	Y+25, r24	; 0x19
    2a22:	9a 8f       	std	Y+26, r25	; 0x1a
    2a24:	ab 8f       	std	Y+27, r26	; 0x1b
    2a26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a28:	69 8d       	ldd	r22, Y+25	; 0x19
    2a2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	4a e7       	ldi	r20, 0x7A	; 122
    2a36:	53 e4       	ldi	r21, 0x43	; 67
    2a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	8d 8b       	std	Y+21, r24	; 0x15
    2a42:	9e 8b       	std	Y+22, r25	; 0x16
    2a44:	af 8b       	std	Y+23, r26	; 0x17
    2a46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a48:	6d 89       	ldd	r22, Y+21	; 0x15
    2a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	40 e8       	ldi	r20, 0x80	; 128
    2a56:	5f e3       	ldi	r21, 0x3F	; 63
    2a58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a5c:	88 23       	and	r24, r24
    2a5e:	2c f4       	brge	.+10     	; 0x2a6a <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	9c 8b       	std	Y+20, r25	; 0x14
    2a66:	8b 8b       	std	Y+19, r24	; 0x13
    2a68:	3f c0       	rjmp	.+126    	; 0x2ae8 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2a6a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a6c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a6e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a70:	98 8d       	ldd	r25, Y+24	; 0x18
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	3f ef       	ldi	r19, 0xFF	; 255
    2a76:	4f e7       	ldi	r20, 0x7F	; 127
    2a78:	57 e4       	ldi	r21, 0x47	; 71
    2a7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a7e:	18 16       	cp	r1, r24
    2a80:	4c f5       	brge	.+82     	; 0x2ad4 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a82:	69 8d       	ldd	r22, Y+25	; 0x19
    2a84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e2       	ldi	r20, 0x20	; 32
    2a90:	51 e4       	ldi	r21, 0x41	; 65
    2a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	bc 01       	movw	r22, r24
    2a9c:	cd 01       	movw	r24, r26
    2a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	9c 8b       	std	Y+20, r25	; 0x14
    2aa8:	8b 8b       	std	Y+19, r24	; 0x13
    2aaa:	0f c0       	rjmp	.+30     	; 0x2aca <LCD_displayCharacter+0x2ac>
    2aac:	89 e1       	ldi	r24, 0x19	; 25
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	9a 8b       	std	Y+18, r25	; 0x12
    2ab2:	89 8b       	std	Y+17, r24	; 0x11
    2ab4:	89 89       	ldd	r24, Y+17	; 0x11
    2ab6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	f1 f7       	brne	.-4      	; 0x2ab8 <LCD_displayCharacter+0x29a>
    2abc:	9a 8b       	std	Y+18, r25	; 0x12
    2abe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	9c 8b       	std	Y+20, r25	; 0x14
    2ac8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aca:	8b 89       	ldd	r24, Y+19	; 0x13
    2acc:	9c 89       	ldd	r25, Y+20	; 0x14
    2ace:	00 97       	sbiw	r24, 0x00	; 0
    2ad0:	69 f7       	brne	.-38     	; 0x2aac <LCD_displayCharacter+0x28e>
    2ad2:	14 c0       	rjmp	.+40     	; 0x2afc <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad8:	8f 89       	ldd	r24, Y+23	; 0x17
    2ada:	98 8d       	ldd	r25, Y+24	; 0x18
    2adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	9c 8b       	std	Y+20, r25	; 0x14
    2ae6:	8b 8b       	std	Y+19, r24	; 0x13
    2ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aea:	9c 89       	ldd	r25, Y+20	; 0x14
    2aec:	98 8b       	std	Y+16, r25	; 0x10
    2aee:	8f 87       	std	Y+15, r24	; 0x0f
    2af0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2af2:	98 89       	ldd	r25, Y+16	; 0x10
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	f1 f7       	brne	.-4      	; 0x2af4 <LCD_displayCharacter+0x2d6>
    2af8:	98 8b       	std	Y+16, r25	; 0x10
    2afa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	61 e0       	ldi	r22, 0x01	; 1
    2b00:	40 e0       	ldi	r20, 0x00	; 0
    2b02:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <GPIO_writePin>
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	a0 e8       	ldi	r26, 0x80	; 128
    2b0c:	bf e3       	ldi	r27, 0x3F	; 63
    2b0e:	8b 87       	std	Y+11, r24	; 0x0b
    2b10:	9c 87       	std	Y+12, r25	; 0x0c
    2b12:	ad 87       	std	Y+13, r26	; 0x0d
    2b14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	4a e7       	ldi	r20, 0x7A	; 122
    2b24:	53 e4       	ldi	r21, 0x43	; 67
    2b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	8f 83       	std	Y+7, r24	; 0x07
    2b30:	98 87       	std	Y+8, r25	; 0x08
    2b32:	a9 87       	std	Y+9, r26	; 0x09
    2b34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b36:	6f 81       	ldd	r22, Y+7	; 0x07
    2b38:	78 85       	ldd	r23, Y+8	; 0x08
    2b3a:	89 85       	ldd	r24, Y+9	; 0x09
    2b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e8       	ldi	r20, 0x80	; 128
    2b44:	5f e3       	ldi	r21, 0x3F	; 63
    2b46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b4a:	88 23       	and	r24, r24
    2b4c:	2c f4       	brge	.+10     	; 0x2b58 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	9e 83       	std	Y+6, r25	; 0x06
    2b54:	8d 83       	std	Y+5, r24	; 0x05
    2b56:	3f c0       	rjmp	.+126    	; 0x2bd6 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2b58:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5a:	78 85       	ldd	r23, Y+8	; 0x08
    2b5c:	89 85       	ldd	r24, Y+9	; 0x09
    2b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	3f ef       	ldi	r19, 0xFF	; 255
    2b64:	4f e7       	ldi	r20, 0x7F	; 127
    2b66:	57 e4       	ldi	r21, 0x47	; 71
    2b68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b6c:	18 16       	cp	r1, r24
    2b6e:	4c f5       	brge	.+82     	; 0x2bc2 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e2       	ldi	r20, 0x20	; 32
    2b7e:	51 e4       	ldi	r21, 0x41	; 65
    2b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	bc 01       	movw	r22, r24
    2b8a:	cd 01       	movw	r24, r26
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	9e 83       	std	Y+6, r25	; 0x06
    2b96:	8d 83       	std	Y+5, r24	; 0x05
    2b98:	0f c0       	rjmp	.+30     	; 0x2bb8 <LCD_displayCharacter+0x39a>
    2b9a:	89 e1       	ldi	r24, 0x19	; 25
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	9c 83       	std	Y+4, r25	; 0x04
    2ba0:	8b 83       	std	Y+3, r24	; 0x03
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <LCD_displayCharacter+0x388>
    2baa:	9c 83       	std	Y+4, r25	; 0x04
    2bac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bae:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	9e 83       	std	Y+6, r25	; 0x06
    2bb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bba:	9e 81       	ldd	r25, Y+6	; 0x06
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	69 f7       	brne	.-38     	; 0x2b9a <LCD_displayCharacter+0x37c>
    2bc0:	14 c0       	rjmp	.+40     	; 0x2bea <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc4:	78 85       	ldd	r23, Y+8	; 0x08
    2bc6:	89 85       	ldd	r24, Y+9	; 0x09
    2bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	9e 83       	std	Y+6, r25	; 0x06
    2bd4:	8d 83       	std	Y+5, r24	; 0x05
    2bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bda:	9a 83       	std	Y+2, r25	; 0x02
    2bdc:	89 83       	std	Y+1, r24	; 0x01
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	9a 81       	ldd	r25, Y+2	; 0x02
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <LCD_displayCharacter+0x3c4>
    2be6:	9a 83       	std	Y+2, r25	; 0x02
    2be8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2bea:	e9 96       	adiw	r28, 0x39	; 57
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	00 d0       	rcall	.+0      	; 0x2c02 <LCD_displayString+0x6>
    2c02:	0f 92       	push	r0
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
    2c08:	9b 83       	std	Y+3, r25	; 0x03
    2c0a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c0c:	19 82       	std	Y+1, r1	; 0x01
    2c0e:	0e c0       	rjmp	.+28     	; 0x2c2c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2c10:	89 81       	ldd	r24, Y+1	; 0x01
    2c12:	28 2f       	mov	r18, r24
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	8a 81       	ldd	r24, Y+2	; 0x02
    2c18:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	e2 0f       	add	r30, r18
    2c1e:	f3 1f       	adc	r31, r19
    2c20:	80 81       	ld	r24, Z
    2c22:	0e 94 0f 14 	call	0x281e	; 0x281e <LCD_displayCharacter>
		i++;
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	8f 5f       	subi	r24, 0xFF	; 255
    2c2a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	28 2f       	mov	r18, r24
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	9b 81       	ldd	r25, Y+3	; 0x03
    2c36:	fc 01       	movw	r30, r24
    2c38:	e2 0f       	add	r30, r18
    2c3a:	f3 1f       	adc	r31, r19
    2c3c:	80 81       	ld	r24, Z
    2c3e:	88 23       	and	r24, r24
    2c40:	39 f7       	brne	.-50     	; 0x2c10 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	00 d0       	rcall	.+0      	; 0x2c54 <LCD_moveCursor+0x6>
    2c54:	00 d0       	rcall	.+0      	; 0x2c56 <LCD_moveCursor+0x8>
    2c56:	0f 92       	push	r0
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	8a 83       	std	Y+2, r24	; 0x02
    2c5e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	28 2f       	mov	r18, r24
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	3d 83       	std	Y+5, r19	; 0x05
    2c68:	2c 83       	std	Y+4, r18	; 0x04
    2c6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c6e:	81 30       	cpi	r24, 0x01	; 1
    2c70:	91 05       	cpc	r25, r1
    2c72:	c1 f0       	breq	.+48     	; 0x2ca4 <LCD_moveCursor+0x56>
    2c74:	2c 81       	ldd	r18, Y+4	; 0x04
    2c76:	3d 81       	ldd	r19, Y+5	; 0x05
    2c78:	22 30       	cpi	r18, 0x02	; 2
    2c7a:	31 05       	cpc	r19, r1
    2c7c:	2c f4       	brge	.+10     	; 0x2c88 <LCD_moveCursor+0x3a>
    2c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c80:	9d 81       	ldd	r25, Y+5	; 0x05
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	61 f0       	breq	.+24     	; 0x2c9e <LCD_moveCursor+0x50>
    2c86:	19 c0       	rjmp	.+50     	; 0x2cba <LCD_moveCursor+0x6c>
    2c88:	2c 81       	ldd	r18, Y+4	; 0x04
    2c8a:	3d 81       	ldd	r19, Y+5	; 0x05
    2c8c:	22 30       	cpi	r18, 0x02	; 2
    2c8e:	31 05       	cpc	r19, r1
    2c90:	69 f0       	breq	.+26     	; 0x2cac <LCD_moveCursor+0x5e>
    2c92:	8c 81       	ldd	r24, Y+4	; 0x04
    2c94:	9d 81       	ldd	r25, Y+5	; 0x05
    2c96:	83 30       	cpi	r24, 0x03	; 3
    2c98:	91 05       	cpc	r25, r1
    2c9a:	61 f0       	breq	.+24     	; 0x2cb4 <LCD_moveCursor+0x66>
    2c9c:	0e c0       	rjmp	.+28     	; 0x2cba <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca0:	89 83       	std	Y+1, r24	; 0x01
    2ca2:	0b c0       	rjmp	.+22     	; 0x2cba <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	80 5c       	subi	r24, 0xC0	; 192
    2ca8:	89 83       	std	Y+1, r24	; 0x01
    2caa:	07 c0       	rjmp	.+14     	; 0x2cba <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2cac:	8b 81       	ldd	r24, Y+3	; 0x03
    2cae:	80 5f       	subi	r24, 0xF0	; 240
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	03 c0       	rjmp	.+6      	; 0x2cba <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb6:	80 5b       	subi	r24, 0xB0	; 176
    2cb8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	80 68       	ori	r24, 0x80	; 128
    2cbe:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_sendCommand>
}
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	0f 90       	pop	r0
    2ccc:	cf 91       	pop	r28
    2cce:	df 91       	pop	r29
    2cd0:	08 95       	ret

00002cd2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2cd2:	df 93       	push	r29
    2cd4:	cf 93       	push	r28
    2cd6:	00 d0       	rcall	.+0      	; 0x2cd8 <LCD_displayStringRowColumn+0x6>
    2cd8:	00 d0       	rcall	.+0      	; 0x2cda <LCD_displayStringRowColumn+0x8>
    2cda:	cd b7       	in	r28, 0x3d	; 61
    2cdc:	de b7       	in	r29, 0x3e	; 62
    2cde:	89 83       	std	Y+1, r24	; 0x01
    2ce0:	6a 83       	std	Y+2, r22	; 0x02
    2ce2:	5c 83       	std	Y+4, r21	; 0x04
    2ce4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2ce6:	89 81       	ldd	r24, Y+1	; 0x01
    2ce8:	6a 81       	ldd	r22, Y+2	; 0x02
    2cea:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf2:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_displayString>
}
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	62 97       	sbiw	r28, 0x12	; 18
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	9a 8b       	std	Y+18, r25	; 0x12
    2d1a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2d1c:	89 89       	ldd	r24, Y+17	; 0x11
    2d1e:	9a 89       	ldd	r25, Y+18	; 0x12
    2d20:	9e 01       	movw	r18, r28
    2d22:	2f 5f       	subi	r18, 0xFF	; 255
    2d24:	3f 4f       	sbci	r19, 0xFF	; 255
    2d26:	b9 01       	movw	r22, r18
    2d28:	4a e0       	ldi	r20, 0x0A	; 10
    2d2a:	50 e0       	ldi	r21, 0x00	; 0
    2d2c:	0e 94 21 19 	call	0x3242	; 0x3242 <itoa>
   LCD_displayString(buff); /* Display the string */
    2d30:	ce 01       	movw	r24, r28
    2d32:	01 96       	adiw	r24, 0x01	; 1
    2d34:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_displayString>
}
    2d38:	62 96       	adiw	r28, 0x12	; 18
    2d3a:	0f b6       	in	r0, 0x3f	; 63
    2d3c:	f8 94       	cli
    2d3e:	de bf       	out	0x3e, r29	; 62
    2d40:	0f be       	out	0x3f, r0	; 63
    2d42:	cd bf       	out	0x3d, r28	; 61
    2d44:	cf 91       	pop	r28
    2d46:	df 91       	pop	r29
    2d48:	08 95       	ret

00002d4a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2d4a:	df 93       	push	r29
    2d4c:	cf 93       	push	r28
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_sendCommand>
}
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	08 95       	ret

00002d5e <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    2d5e:	1f 92       	push	r1
    2d60:	0f 92       	push	r0
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	0f 92       	push	r0
    2d66:	11 24       	eor	r1, r1
    2d68:	2f 93       	push	r18
    2d6a:	3f 93       	push	r19
    2d6c:	4f 93       	push	r20
    2d6e:	5f 93       	push	r21
    2d70:	6f 93       	push	r22
    2d72:	7f 93       	push	r23
    2d74:	8f 93       	push	r24
    2d76:	9f 93       	push	r25
    2d78:	af 93       	push	r26
    2d7a:	bf 93       	push	r27
    2d7c:	ef 93       	push	r30
    2d7e:	ff 93       	push	r31
    2d80:	df 93       	push	r29
    2d82:	cf 93       	push	r28
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2d88:	80 91 47 01 	lds	r24, 0x0147
    2d8c:	90 91 48 01 	lds	r25, 0x0148
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	29 f0       	breq	.+10     	; 0x2d9e <__vector_9+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2d94:	e0 91 47 01 	lds	r30, 0x0147
    2d98:	f0 91 48 01 	lds	r31, 0x0148
    2d9c:	09 95       	icall
	}
}
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	ff 91       	pop	r31
    2da4:	ef 91       	pop	r30
    2da6:	bf 91       	pop	r27
    2da8:	af 91       	pop	r26
    2daa:	9f 91       	pop	r25
    2dac:	8f 91       	pop	r24
    2dae:	7f 91       	pop	r23
    2db0:	6f 91       	pop	r22
    2db2:	5f 91       	pop	r21
    2db4:	4f 91       	pop	r20
    2db6:	3f 91       	pop	r19
    2db8:	2f 91       	pop	r18
    2dba:	0f 90       	pop	r0
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	0f 90       	pop	r0
    2dc0:	1f 90       	pop	r1
    2dc2:	18 95       	reti

00002dc4 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2dc4:	1f 92       	push	r1
    2dc6:	0f 92       	push	r0
    2dc8:	0f b6       	in	r0, 0x3f	; 63
    2dca:	0f 92       	push	r0
    2dcc:	11 24       	eor	r1, r1
    2dce:	2f 93       	push	r18
    2dd0:	3f 93       	push	r19
    2dd2:	4f 93       	push	r20
    2dd4:	5f 93       	push	r21
    2dd6:	6f 93       	push	r22
    2dd8:	7f 93       	push	r23
    2dda:	8f 93       	push	r24
    2ddc:	9f 93       	push	r25
    2dde:	af 93       	push	r26
    2de0:	bf 93       	push	r27
    2de2:	ef 93       	push	r30
    2de4:	ff 93       	push	r31
    2de6:	df 93       	push	r29
    2de8:	cf 93       	push	r28
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2dee:	80 91 47 01 	lds	r24, 0x0147
    2df2:	90 91 48 01 	lds	r25, 0x0148
    2df6:	00 97       	sbiw	r24, 0x00	; 0
    2df8:	29 f0       	breq	.+10     	; 0x2e04 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2dfa:	e0 91 47 01 	lds	r30, 0x0147
    2dfe:	f0 91 48 01 	lds	r31, 0x0148
    2e02:	09 95       	icall
	}
}
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	ff 91       	pop	r31
    2e0a:	ef 91       	pop	r30
    2e0c:	bf 91       	pop	r27
    2e0e:	af 91       	pop	r26
    2e10:	9f 91       	pop	r25
    2e12:	8f 91       	pop	r24
    2e14:	7f 91       	pop	r23
    2e16:	6f 91       	pop	r22
    2e18:	5f 91       	pop	r21
    2e1a:	4f 91       	pop	r20
    2e1c:	3f 91       	pop	r19
    2e1e:	2f 91       	pop	r18
    2e20:	0f 90       	pop	r0
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	0f 90       	pop	r0
    2e26:	1f 90       	pop	r1
    2e28:	18 95       	reti

00002e2a <Timer1_init>:
/* Description:
 * Function to initialize the Timer driver
 */

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <Timer1_init+0x6>
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
    2e34:	9a 83       	std	Y+2, r25	; 0x02
    2e36:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr->initial_value;		/* Set timer1 initial value */
    2e38:	ac e4       	ldi	r26, 0x4C	; 76
    2e3a:	b0 e0       	ldi	r27, 0x00	; 0
    2e3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e40:	80 81       	ld	r24, Z
    2e42:	91 81       	ldd	r25, Z+1	; 0x01
    2e44:	11 96       	adiw	r26, 0x01	; 1
    2e46:	9c 93       	st	X, r25
    2e48:	8e 93       	st	-X, r24
	/* Configure timer control register TCCR1A
	 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
	 * 2. Disconnect OC1B  COM1B0=0 COM1B1=0
	 * 3. FOC1A=1 FOC1B=1 because these bits are only active in case non-pwm mode
	 */
	TCCR1A = (1<<FOC1A) |(1<<FOC1B) |(1<<COM1A1) ;
    2e4a:	ef e4       	ldi	r30, 0x4F	; 79
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	8c e8       	ldi	r24, 0x8C	; 140
    2e50:	80 83       	st	Z, r24

	if(Config_Ptr->mode == NORMAL)
    2e52:	e9 81       	ldd	r30, Y+1	; 0x01
    2e54:	fa 81       	ldd	r31, Y+2	; 0x02
    2e56:	85 81       	ldd	r24, Z+5	; 0x05
    2e58:	88 23       	and	r24, r24
    2e5a:	a1 f4       	brne	.+40     	; 0x2e84 <Timer1_init+0x5a>
	{
		TCCR1A = (TCCR1A & 0xFC) | (Config_Ptr->mode);
    2e5c:	af e4       	ldi	r26, 0x4F	; 79
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	ef e4       	ldi	r30, 0x4F	; 79
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	80 81       	ld	r24, Z
    2e66:	98 2f       	mov	r25, r24
    2e68:	9c 7f       	andi	r25, 0xFC	; 252
    2e6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e6e:	85 81       	ldd	r24, Z+5	; 0x05
    2e70:	89 2b       	or	r24, r25
    2e72:	8c 93       	st	X, r24
		TIMSK |=(1<<TOIE1);
    2e74:	a9 e5       	ldi	r26, 0x59	; 89
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	e9 e5       	ldi	r30, 0x59	; 89
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
    2e7e:	84 60       	ori	r24, 0x04	; 4
    2e80:	8c 93       	st	X, r24
    2e82:	2a c0       	rjmp	.+84     	; 0x2ed8 <Timer1_init+0xae>
	}
	else if(Config_Ptr->mode== CTC)
    2e84:	e9 81       	ldd	r30, Y+1	; 0x01
    2e86:	fa 81       	ldd	r31, Y+2	; 0x02
    2e88:	85 81       	ldd	r24, Z+5	; 0x05
    2e8a:	84 30       	cpi	r24, 0x04	; 4
    2e8c:	29 f5       	brne	.+74     	; 0x2ed8 <Timer1_init+0xae>
	{
		TCCR1B = (TCCR1B & 0xE7) | ((Config_Ptr->mode)<<1);
    2e8e:	ae e4       	ldi	r26, 0x4E	; 78
    2e90:	b0 e0       	ldi	r27, 0x00	; 0
    2e92:	ee e4       	ldi	r30, 0x4E	; 78
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	80 81       	ld	r24, Z
    2e98:	28 2f       	mov	r18, r24
    2e9a:	27 7e       	andi	r18, 0xE7	; 231
    2e9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea0:	85 81       	ldd	r24, Z+5	; 0x05
    2ea2:	88 2f       	mov	r24, r24
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	88 0f       	add	r24, r24
    2ea8:	99 1f       	adc	r25, r25
    2eaa:	82 2b       	or	r24, r18
    2eac:	8c 93       	st	X, r24

		GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2eae:	83 e0       	ldi	r24, 0x03	; 3
    2eb0:	65 e0       	ldi	r22, 0x05	; 5
    2eb2:	41 e0       	ldi	r20, 0x01	; 1
    2eb4:	0e 94 b6 0c 	call	0x196c	; 0x196c <GPIO_setupPinDirection>

		OCR1A = Config_Ptr->compare_value; /* Set the compare value */
    2eb8:	aa e4       	ldi	r26, 0x4A	; 74
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec0:	82 81       	ldd	r24, Z+2	; 0x02
    2ec2:	93 81       	ldd	r25, Z+3	; 0x03
    2ec4:	11 96       	adiw	r26, 0x01	; 1
    2ec6:	9c 93       	st	X, r25
    2ec8:	8e 93       	st	-X, r24

		TIMSK |=(1<<OCIE1A);
    2eca:	a9 e5       	ldi	r26, 0x59	; 89
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	e9 e5       	ldi	r30, 0x59	; 89
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	80 81       	ld	r24, Z
    2ed4:	80 61       	ori	r24, 0x10	; 16
    2ed6:	8c 93       	st	X, r24
	}

	/* choose the prescaler */

	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    2ed8:	ae e4       	ldi	r26, 0x4E	; 78
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	ee e4       	ldi	r30, 0x4E	; 78
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	98 2f       	mov	r25, r24
    2ee4:	98 7f       	andi	r25, 0xF8	; 248
    2ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eea:	84 81       	ldd	r24, Z+4	; 0x04
    2eec:	89 2b       	or	r24, r25
    2eee:	8c 93       	st	X, r24

	SREG |=(1<<7);
    2ef0:	af e5       	ldi	r26, 0x5F	; 95
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	ef e5       	ldi	r30, 0x5F	; 95
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	80 68       	ori	r24, 0x80	; 128
    2efc:	8c 93       	st	X, r24

}
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	cf 91       	pop	r28
    2f04:	df 91       	pop	r29
    2f06:	08 95       	ret

00002f08 <Timer1_deInit>:
/* Description:
 * Function to disable the Timer1
 */

void Timer1_deInit(void)
{
    2f08:	df 93       	push	r29
    2f0a:	cf 93       	push	r28
    2f0c:	cd b7       	in	r28, 0x3d	; 61
    2f0e:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    2f10:	ef e4       	ldi	r30, 0x4F	; 79
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	10 82       	st	Z, r1
	TCCR1B = 0;
    2f16:	ee e4       	ldi	r30, 0x4E	; 78
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	10 82       	st	Z, r1
	TCNT1 = 0;
    2f1c:	ec e4       	ldi	r30, 0x4C	; 76
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	11 82       	std	Z+1, r1	; 0x01
    2f22:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TOIE1);
    2f24:	a9 e5       	ldi	r26, 0x59	; 89
    2f26:	b0 e0       	ldi	r27, 0x00	; 0
    2f28:	e9 e5       	ldi	r30, 0x59	; 89
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	8b 7f       	andi	r24, 0xFB	; 251
    2f30:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE1A);
    2f32:	a9 e5       	ldi	r26, 0x59	; 89
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	e9 e5       	ldi	r30, 0x59	; 89
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	80 81       	ld	r24, Z
    2f3c:	8f 7e       	andi	r24, 0xEF	; 239
    2f3e:	8c 93       	st	X, r24
}
    2f40:	cf 91       	pop	r28
    2f42:	df 91       	pop	r29
    2f44:	08 95       	ret

00002f46 <Timer1_setCallBack>:
/* Description:
 * Function to set the Call Back function address
 */

void Timer1_setCallBack(void(*a_ptr)(void))
{
    2f46:	df 93       	push	r29
    2f48:	cf 93       	push	r28
    2f4a:	00 d0       	rcall	.+0      	; 0x2f4c <Timer1_setCallBack+0x6>
    2f4c:	cd b7       	in	r28, 0x3d	; 61
    2f4e:	de b7       	in	r29, 0x3e	; 62
    2f50:	9a 83       	std	Y+2, r25	; 0x02
    2f52:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	9a 81       	ldd	r25, Y+2	; 0x02
    2f58:	90 93 48 01 	sts	0x0148, r25
    2f5c:	80 93 47 01 	sts	0x0147, r24
}
    2f60:	0f 90       	pop	r0
    2f62:	0f 90       	pop	r0
    2f64:	cf 91       	pop	r28
    2f66:	df 91       	pop	r29
    2f68:	08 95       	ret

00002f6a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2f6a:	df 93       	push	r29
    2f6c:	cf 93       	push	r28
    2f6e:	00 d0       	rcall	.+0      	; 0x2f70 <UART_init+0x6>
    2f70:	00 d0       	rcall	.+0      	; 0x2f72 <UART_init+0x8>
    2f72:	cd b7       	in	r28, 0x3d	; 61
    2f74:	de b7       	in	r29, 0x3e	; 62
    2f76:	9c 83       	std	Y+4, r25	; 0x04
    2f78:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2f7a:	1a 82       	std	Y+2, r1	; 0x02
    2f7c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2f7e:	eb e2       	ldi	r30, 0x2B	; 43
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	82 e0       	ldi	r24, 0x02	; 2
    2f84:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2f86:	ea e2       	ldi	r30, 0x2A	; 42
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	88 e1       	ldi	r24, 0x18	; 24
    2f8c:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2f8e:	e0 e4       	ldi	r30, 0x40	; 64
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	80 e8       	ldi	r24, 0x80	; 128
    2f94:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<1);
    2f96:	a0 e4       	ldi	r26, 0x40	; 64
    2f98:	b0 e0       	ldi	r27, 0x00	; 0
    2f9a:	e0 e4       	ldi	r30, 0x40	; 64
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	28 2f       	mov	r18, r24
    2fa2:	29 7f       	andi	r18, 0xF9	; 249
    2fa4:	eb 81       	ldd	r30, Y+3	; 0x03
    2fa6:	fc 81       	ldd	r31, Y+4	; 0x04
    2fa8:	80 81       	ld	r24, Z
    2faa:	88 2f       	mov	r24, r24
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	88 0f       	add	r24, r24
    2fb0:	99 1f       	adc	r25, r25
    2fb2:	82 2b       	or	r24, r18
    2fb4:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)<<4);
    2fb6:	a0 e4       	ldi	r26, 0x40	; 64
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	e0 e4       	ldi	r30, 0x40	; 64
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	28 2f       	mov	r18, r24
    2fc2:	2f 7c       	andi	r18, 0xCF	; 207
    2fc4:	eb 81       	ldd	r30, Y+3	; 0x03
    2fc6:	fc 81       	ldd	r31, Y+4	; 0x04
    2fc8:	81 81       	ldd	r24, Z+1	; 0x01
    2fca:	88 2f       	mov	r24, r24
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	82 95       	swap	r24
    2fd0:	92 95       	swap	r25
    2fd2:	90 7f       	andi	r25, 0xF0	; 240
    2fd4:	98 27       	eor	r25, r24
    2fd6:	80 7f       	andi	r24, 0xF0	; 240
    2fd8:	98 27       	eor	r25, r24
    2fda:	82 2b       	or	r24, r18
    2fdc:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit)<<3);
    2fde:	a0 e4       	ldi	r26, 0x40	; 64
    2fe0:	b0 e0       	ldi	r27, 0x00	; 0
    2fe2:	e0 e4       	ldi	r30, 0x40	; 64
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	28 2f       	mov	r18, r24
    2fea:	27 7f       	andi	r18, 0xF7	; 247
    2fec:	eb 81       	ldd	r30, Y+3	; 0x03
    2fee:	fc 81       	ldd	r31, Y+4	; 0x04
    2ff0:	82 81       	ldd	r24, Z+2	; 0x02
    2ff2:	88 2f       	mov	r24, r24
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	88 0f       	add	r24, r24
    2ff8:	99 1f       	adc	r25, r25
    2ffa:	88 0f       	add	r24, r24
    2ffc:	99 1f       	adc	r25, r25
    2ffe:	88 0f       	add	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	82 2b       	or	r24, r18
    3004:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    3006:	eb 81       	ldd	r30, Y+3	; 0x03
    3008:	fc 81       	ldd	r31, Y+4	; 0x04
    300a:	83 81       	ldd	r24, Z+3	; 0x03
    300c:	94 81       	ldd	r25, Z+4	; 0x04
    300e:	a5 81       	ldd	r26, Z+5	; 0x05
    3010:	b6 81       	ldd	r27, Z+6	; 0x06
    3012:	88 0f       	add	r24, r24
    3014:	99 1f       	adc	r25, r25
    3016:	aa 1f       	adc	r26, r26
    3018:	bb 1f       	adc	r27, r27
    301a:	88 0f       	add	r24, r24
    301c:	99 1f       	adc	r25, r25
    301e:	aa 1f       	adc	r26, r26
    3020:	bb 1f       	adc	r27, r27
    3022:	88 0f       	add	r24, r24
    3024:	99 1f       	adc	r25, r25
    3026:	aa 1f       	adc	r26, r26
    3028:	bb 1f       	adc	r27, r27
    302a:	9c 01       	movw	r18, r24
    302c:	ad 01       	movw	r20, r26
    302e:	80 e4       	ldi	r24, 0x40	; 64
    3030:	92 e4       	ldi	r25, 0x42	; 66
    3032:	af e0       	ldi	r26, 0x0F	; 15
    3034:	b0 e0       	ldi	r27, 0x00	; 0
    3036:	bc 01       	movw	r22, r24
    3038:	cd 01       	movw	r24, r26
    303a:	0e 94 c8 18 	call	0x3190	; 0x3190 <__udivmodsi4>
    303e:	da 01       	movw	r26, r20
    3040:	c9 01       	movw	r24, r18
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	9a 83       	std	Y+2, r25	; 0x02
    3046:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3048:	e0 e4       	ldi	r30, 0x40	; 64
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	89 81       	ldd	r24, Y+1	; 0x01
    304e:	9a 81       	ldd	r25, Y+2	; 0x02
    3050:	89 2f       	mov	r24, r25
    3052:	99 27       	eor	r25, r25
    3054:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3056:	e9 e2       	ldi	r30, 0x29	; 41
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	80 83       	st	Z, r24
}
    305e:	0f 90       	pop	r0
    3060:	0f 90       	pop	r0
    3062:	0f 90       	pop	r0
    3064:	0f 90       	pop	r0
    3066:	cf 91       	pop	r28
    3068:	df 91       	pop	r29
    306a:	08 95       	ret

0000306c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    306c:	df 93       	push	r29
    306e:	cf 93       	push	r28
    3070:	0f 92       	push	r0
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3078:	eb e2       	ldi	r30, 0x2B	; 43
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	80 81       	ld	r24, Z
    307e:	88 2f       	mov	r24, r24
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	80 72       	andi	r24, 0x20	; 32
    3084:	90 70       	andi	r25, 0x00	; 0
    3086:	00 97       	sbiw	r24, 0x00	; 0
    3088:	b9 f3       	breq	.-18     	; 0x3078 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    308a:	ec e2       	ldi	r30, 0x2C	; 44
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3092:	0f 90       	pop	r0
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    30a2:	eb e2       	ldi	r30, 0x2B	; 43
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	80 81       	ld	r24, Z
    30a8:	88 23       	and	r24, r24
    30aa:	dc f7       	brge	.-10     	; 0x30a2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    30ac:	ec e2       	ldi	r30, 0x2C	; 44
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	80 81       	ld	r24, Z
}
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	08 95       	ret

000030b8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	00 d0       	rcall	.+0      	; 0x30be <UART_sendString+0x6>
    30be:	0f 92       	push	r0
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    30c4:	9b 83       	std	Y+3, r25	; 0x03
    30c6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    30c8:	19 82       	std	Y+1, r1	; 0x01
    30ca:	0e c0       	rjmp	.+28     	; 0x30e8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	28 2f       	mov	r18, r24
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	8a 81       	ldd	r24, Y+2	; 0x02
    30d4:	9b 81       	ldd	r25, Y+3	; 0x03
    30d6:	fc 01       	movw	r30, r24
    30d8:	e2 0f       	add	r30, r18
    30da:	f3 1f       	adc	r31, r19
    30dc:	80 81       	ld	r24, Z
    30de:	0e 94 36 18 	call	0x306c	; 0x306c <UART_sendByte>
		i++;
    30e2:	89 81       	ldd	r24, Y+1	; 0x01
    30e4:	8f 5f       	subi	r24, 0xFF	; 255
    30e6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    30e8:	89 81       	ldd	r24, Y+1	; 0x01
    30ea:	28 2f       	mov	r18, r24
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	8a 81       	ldd	r24, Y+2	; 0x02
    30f0:	9b 81       	ldd	r25, Y+3	; 0x03
    30f2:	fc 01       	movw	r30, r24
    30f4:	e2 0f       	add	r30, r18
    30f6:	f3 1f       	adc	r31, r19
    30f8:	80 81       	ld	r24, Z
    30fa:	88 23       	and	r24, r24
    30fc:	39 f7       	brne	.-50     	; 0x30cc <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    30fe:	0f 90       	pop	r0
    3100:	0f 90       	pop	r0
    3102:	0f 90       	pop	r0
    3104:	cf 91       	pop	r28
    3106:	df 91       	pop	r29
    3108:	08 95       	ret

0000310a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    310a:	0f 93       	push	r16
    310c:	1f 93       	push	r17
    310e:	df 93       	push	r29
    3110:	cf 93       	push	r28
    3112:	00 d0       	rcall	.+0      	; 0x3114 <UART_receiveString+0xa>
    3114:	0f 92       	push	r0
    3116:	cd b7       	in	r28, 0x3d	; 61
    3118:	de b7       	in	r29, 0x3e	; 62
    311a:	9b 83       	std	Y+3, r25	; 0x03
    311c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    311e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	28 2f       	mov	r18, r24
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	9b 81       	ldd	r25, Y+3	; 0x03
    312a:	8c 01       	movw	r16, r24
    312c:	02 0f       	add	r16, r18
    312e:	13 1f       	adc	r17, r19
    3130:	0e 94 4d 18 	call	0x309a	; 0x309a <UART_recieveByte>
    3134:	f8 01       	movw	r30, r16
    3136:	80 83       	st	Z, r24
    3138:	0f c0       	rjmp	.+30     	; 0x3158 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    313a:	89 81       	ldd	r24, Y+1	; 0x01
    313c:	8f 5f       	subi	r24, 0xFF	; 255
    313e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3140:	89 81       	ldd	r24, Y+1	; 0x01
    3142:	28 2f       	mov	r18, r24
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	8a 81       	ldd	r24, Y+2	; 0x02
    3148:	9b 81       	ldd	r25, Y+3	; 0x03
    314a:	8c 01       	movw	r16, r24
    314c:	02 0f       	add	r16, r18
    314e:	13 1f       	adc	r17, r19
    3150:	0e 94 4d 18 	call	0x309a	; 0x309a <UART_recieveByte>
    3154:	f8 01       	movw	r30, r16
    3156:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3158:	89 81       	ldd	r24, Y+1	; 0x01
    315a:	28 2f       	mov	r18, r24
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	8a 81       	ldd	r24, Y+2	; 0x02
    3160:	9b 81       	ldd	r25, Y+3	; 0x03
    3162:	fc 01       	movw	r30, r24
    3164:	e2 0f       	add	r30, r18
    3166:	f3 1f       	adc	r31, r19
    3168:	80 81       	ld	r24, Z
    316a:	83 32       	cpi	r24, 0x23	; 35
    316c:	31 f7       	brne	.-52     	; 0x313a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    316e:	89 81       	ldd	r24, Y+1	; 0x01
    3170:	28 2f       	mov	r18, r24
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	8a 81       	ldd	r24, Y+2	; 0x02
    3176:	9b 81       	ldd	r25, Y+3	; 0x03
    3178:	fc 01       	movw	r30, r24
    317a:	e2 0f       	add	r30, r18
    317c:	f3 1f       	adc	r31, r19
    317e:	10 82       	st	Z, r1
}
    3180:	0f 90       	pop	r0
    3182:	0f 90       	pop	r0
    3184:	0f 90       	pop	r0
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	1f 91       	pop	r17
    318c:	0f 91       	pop	r16
    318e:	08 95       	ret

00003190 <__udivmodsi4>:
    3190:	a1 e2       	ldi	r26, 0x21	; 33
    3192:	1a 2e       	mov	r1, r26
    3194:	aa 1b       	sub	r26, r26
    3196:	bb 1b       	sub	r27, r27
    3198:	fd 01       	movw	r30, r26
    319a:	0d c0       	rjmp	.+26     	; 0x31b6 <__udivmodsi4_ep>

0000319c <__udivmodsi4_loop>:
    319c:	aa 1f       	adc	r26, r26
    319e:	bb 1f       	adc	r27, r27
    31a0:	ee 1f       	adc	r30, r30
    31a2:	ff 1f       	adc	r31, r31
    31a4:	a2 17       	cp	r26, r18
    31a6:	b3 07       	cpc	r27, r19
    31a8:	e4 07       	cpc	r30, r20
    31aa:	f5 07       	cpc	r31, r21
    31ac:	20 f0       	brcs	.+8      	; 0x31b6 <__udivmodsi4_ep>
    31ae:	a2 1b       	sub	r26, r18
    31b0:	b3 0b       	sbc	r27, r19
    31b2:	e4 0b       	sbc	r30, r20
    31b4:	f5 0b       	sbc	r31, r21

000031b6 <__udivmodsi4_ep>:
    31b6:	66 1f       	adc	r22, r22
    31b8:	77 1f       	adc	r23, r23
    31ba:	88 1f       	adc	r24, r24
    31bc:	99 1f       	adc	r25, r25
    31be:	1a 94       	dec	r1
    31c0:	69 f7       	brne	.-38     	; 0x319c <__udivmodsi4_loop>
    31c2:	60 95       	com	r22
    31c4:	70 95       	com	r23
    31c6:	80 95       	com	r24
    31c8:	90 95       	com	r25
    31ca:	9b 01       	movw	r18, r22
    31cc:	ac 01       	movw	r20, r24
    31ce:	bd 01       	movw	r22, r26
    31d0:	cf 01       	movw	r24, r30
    31d2:	08 95       	ret

000031d4 <__prologue_saves__>:
    31d4:	2f 92       	push	r2
    31d6:	3f 92       	push	r3
    31d8:	4f 92       	push	r4
    31da:	5f 92       	push	r5
    31dc:	6f 92       	push	r6
    31de:	7f 92       	push	r7
    31e0:	8f 92       	push	r8
    31e2:	9f 92       	push	r9
    31e4:	af 92       	push	r10
    31e6:	bf 92       	push	r11
    31e8:	cf 92       	push	r12
    31ea:	df 92       	push	r13
    31ec:	ef 92       	push	r14
    31ee:	ff 92       	push	r15
    31f0:	0f 93       	push	r16
    31f2:	1f 93       	push	r17
    31f4:	cf 93       	push	r28
    31f6:	df 93       	push	r29
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62
    31fc:	ca 1b       	sub	r28, r26
    31fe:	db 0b       	sbc	r29, r27
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	f8 94       	cli
    3204:	de bf       	out	0x3e, r29	; 62
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	cd bf       	out	0x3d, r28	; 61
    320a:	09 94       	ijmp

0000320c <__epilogue_restores__>:
    320c:	2a 88       	ldd	r2, Y+18	; 0x12
    320e:	39 88       	ldd	r3, Y+17	; 0x11
    3210:	48 88       	ldd	r4, Y+16	; 0x10
    3212:	5f 84       	ldd	r5, Y+15	; 0x0f
    3214:	6e 84       	ldd	r6, Y+14	; 0x0e
    3216:	7d 84       	ldd	r7, Y+13	; 0x0d
    3218:	8c 84       	ldd	r8, Y+12	; 0x0c
    321a:	9b 84       	ldd	r9, Y+11	; 0x0b
    321c:	aa 84       	ldd	r10, Y+10	; 0x0a
    321e:	b9 84       	ldd	r11, Y+9	; 0x09
    3220:	c8 84       	ldd	r12, Y+8	; 0x08
    3222:	df 80       	ldd	r13, Y+7	; 0x07
    3224:	ee 80       	ldd	r14, Y+6	; 0x06
    3226:	fd 80       	ldd	r15, Y+5	; 0x05
    3228:	0c 81       	ldd	r16, Y+4	; 0x04
    322a:	1b 81       	ldd	r17, Y+3	; 0x03
    322c:	aa 81       	ldd	r26, Y+2	; 0x02
    322e:	b9 81       	ldd	r27, Y+1	; 0x01
    3230:	ce 0f       	add	r28, r30
    3232:	d1 1d       	adc	r29, r1
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	f8 94       	cli
    3238:	de bf       	out	0x3e, r29	; 62
    323a:	0f be       	out	0x3f, r0	; 63
    323c:	cd bf       	out	0x3d, r28	; 61
    323e:	ed 01       	movw	r28, r26
    3240:	08 95       	ret

00003242 <itoa>:
    3242:	fb 01       	movw	r30, r22
    3244:	9f 01       	movw	r18, r30
    3246:	e8 94       	clt
    3248:	42 30       	cpi	r20, 0x02	; 2
    324a:	c4 f0       	brlt	.+48     	; 0x327c <itoa+0x3a>
    324c:	45 32       	cpi	r20, 0x25	; 37
    324e:	b4 f4       	brge	.+44     	; 0x327c <itoa+0x3a>
    3250:	4a 30       	cpi	r20, 0x0A	; 10
    3252:	29 f4       	brne	.+10     	; 0x325e <itoa+0x1c>
    3254:	97 fb       	bst	r25, 7
    3256:	1e f4       	brtc	.+6      	; 0x325e <itoa+0x1c>
    3258:	90 95       	com	r25
    325a:	81 95       	neg	r24
    325c:	9f 4f       	sbci	r25, 0xFF	; 255
    325e:	64 2f       	mov	r22, r20
    3260:	77 27       	eor	r23, r23
    3262:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__udivmodhi4>
    3266:	80 5d       	subi	r24, 0xD0	; 208
    3268:	8a 33       	cpi	r24, 0x3A	; 58
    326a:	0c f0       	brlt	.+2      	; 0x326e <itoa+0x2c>
    326c:	89 5d       	subi	r24, 0xD9	; 217
    326e:	81 93       	st	Z+, r24
    3270:	cb 01       	movw	r24, r22
    3272:	00 97       	sbiw	r24, 0x00	; 0
    3274:	a1 f7       	brne	.-24     	; 0x325e <itoa+0x1c>
    3276:	16 f4       	brtc	.+4      	; 0x327c <itoa+0x3a>
    3278:	5d e2       	ldi	r21, 0x2D	; 45
    327a:	51 93       	st	Z+, r21
    327c:	10 82       	st	Z, r1
    327e:	c9 01       	movw	r24, r18
    3280:	0c 94 42 19 	jmp	0x3284	; 0x3284 <strrev>

00003284 <strrev>:
    3284:	dc 01       	movw	r26, r24
    3286:	fc 01       	movw	r30, r24
    3288:	67 2f       	mov	r22, r23
    328a:	71 91       	ld	r23, Z+
    328c:	77 23       	and	r23, r23
    328e:	e1 f7       	brne	.-8      	; 0x3288 <strrev+0x4>
    3290:	32 97       	sbiw	r30, 0x02	; 2
    3292:	04 c0       	rjmp	.+8      	; 0x329c <strrev+0x18>
    3294:	7c 91       	ld	r23, X
    3296:	6d 93       	st	X+, r22
    3298:	70 83       	st	Z, r23
    329a:	62 91       	ld	r22, -Z
    329c:	ae 17       	cp	r26, r30
    329e:	bf 07       	cpc	r27, r31
    32a0:	c8 f3       	brcs	.-14     	; 0x3294 <strrev+0x10>
    32a2:	08 95       	ret

000032a4 <__udivmodhi4>:
    32a4:	aa 1b       	sub	r26, r26
    32a6:	bb 1b       	sub	r27, r27
    32a8:	51 e1       	ldi	r21, 0x11	; 17
    32aa:	07 c0       	rjmp	.+14     	; 0x32ba <__udivmodhi4_ep>

000032ac <__udivmodhi4_loop>:
    32ac:	aa 1f       	adc	r26, r26
    32ae:	bb 1f       	adc	r27, r27
    32b0:	a6 17       	cp	r26, r22
    32b2:	b7 07       	cpc	r27, r23
    32b4:	10 f0       	brcs	.+4      	; 0x32ba <__udivmodhi4_ep>
    32b6:	a6 1b       	sub	r26, r22
    32b8:	b7 0b       	sbc	r27, r23

000032ba <__udivmodhi4_ep>:
    32ba:	88 1f       	adc	r24, r24
    32bc:	99 1f       	adc	r25, r25
    32be:	5a 95       	dec	r21
    32c0:	a9 f7       	brne	.-22     	; 0x32ac <__udivmodhi4_loop>
    32c2:	80 95       	com	r24
    32c4:	90 95       	com	r25
    32c6:	bc 01       	movw	r22, r24
    32c8:	cd 01       	movw	r24, r26
    32ca:	08 95       	ret

000032cc <_exit>:
    32cc:	f8 94       	cli

000032ce <__stop_program>:
    32ce:	ff cf       	rjmp	.-2      	; 0x32ce <__stop_program>
