
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002148  000021dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800076  00800076  000021f2  2**0
                  ALLOC
  3 .stab         00002394  00000000  00000000  000021f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012a9  00000000  00000000  00004588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005831  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005971  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000772a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008615  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000093c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009524  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000097b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009f7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 af 05 	call	0xb5e	; 0xb5e <main>
      8a:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 87 10 	jmp	0x210e	; 0x210e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 93 10 	jmp	0x2126	; 0x2126 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 93 10 	jmp	0x2126	; 0x2126 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 87 10 	jmp	0x210e	; 0x210e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 93 10 	jmp	0x2126	; 0x2126 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 93 10 	jmp	0x2126	; 0x2126 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 93 10 	jmp	0x2126	; 0x2126 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 97 10 	jmp	0x212e	; 0x212e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER1_ticks>:
 * counts the ticks of the timer
 * It is the callback function
 */

void TIMER1_ticks()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     b4e:	80 91 76 00 	lds	r24, 0x0076
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 76 00 	sts	0x0076, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <main>:



int main()
{
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	c5 56       	subi	r28, 0x65	; 101
     b6c:	d0 40       	sbci	r29, 0x00	; 0
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
	uint8 data; /*data from eeprom*/
	uint8 command; /*command sent by MC1 to MC2 in the UART*/
	uint8 recieved_password[5];/*the received password from MC1*/
	uint8 pass_to_send[5]; /*password loaded from eeprom to send to MC1*/

	DcMotor_Init();
     b78:	0e 94 18 09 	call	0x1230	; 0x1230 <DcMotor_Init>
	Buzzer_init();
     b7c:	0e 94 ef 08 	call	0x11de	; 0x11de <Buzzer_init>
	 * parity check is disabled
	 * stop bit is one bit
	 * baud rate is 9600
	 */

	UART_ConfigType config1 = {EIGHT, DISABLED, ONE_BIT, BR7};
     b80:	ce 01       	movw	r24, r28
     b82:	83 5b       	subi	r24, 0xB3	; 179
     b84:	9f 4f       	sbci	r25, 0xFF	; 255
     b86:	6e 96       	adiw	r28, 0x1e	; 30
     b88:	9f af       	std	Y+63, r25	; 0x3f
     b8a:	8e af       	std	Y+62, r24	; 0x3e
     b8c:	6e 97       	sbiw	r28, 0x1e	; 30
     b8e:	8e e6       	ldi	r24, 0x6E	; 110
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a0 96       	adiw	r28, 0x20	; 32
     b94:	9f af       	std	Y+63, r25	; 0x3f
     b96:	8e af       	std	Y+62, r24	; 0x3e
     b98:	a0 97       	sbiw	r28, 0x20	; 32
     b9a:	97 e0       	ldi	r25, 0x07	; 7
     b9c:	a1 96       	adiw	r28, 0x21	; 33
     b9e:	9f af       	std	Y+63, r25	; 0x3f
     ba0:	a1 97       	sbiw	r28, 0x21	; 33
     ba2:	a0 96       	adiw	r28, 0x20	; 32
     ba4:	ee ad       	ldd	r30, Y+62	; 0x3e
     ba6:	ff ad       	ldd	r31, Y+63	; 0x3f
     ba8:	a0 97       	sbiw	r28, 0x20	; 32
     baa:	00 80       	ld	r0, Z
     bac:	a0 96       	adiw	r28, 0x20	; 32
     bae:	8e ad       	ldd	r24, Y+62	; 0x3e
     bb0:	9f ad       	ldd	r25, Y+63	; 0x3f
     bb2:	a0 97       	sbiw	r28, 0x20	; 32
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	a0 96       	adiw	r28, 0x20	; 32
     bb8:	9f af       	std	Y+63, r25	; 0x3f
     bba:	8e af       	std	Y+62, r24	; 0x3e
     bbc:	a0 97       	sbiw	r28, 0x20	; 32
     bbe:	6e 96       	adiw	r28, 0x1e	; 30
     bc0:	ee ad       	ldd	r30, Y+62	; 0x3e
     bc2:	ff ad       	ldd	r31, Y+63	; 0x3f
     bc4:	6e 97       	sbiw	r28, 0x1e	; 30
     bc6:	00 82       	st	Z, r0
     bc8:	6e 96       	adiw	r28, 0x1e	; 30
     bca:	8e ad       	ldd	r24, Y+62	; 0x3e
     bcc:	9f ad       	ldd	r25, Y+63	; 0x3f
     bce:	6e 97       	sbiw	r28, 0x1e	; 30
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	6e 96       	adiw	r28, 0x1e	; 30
     bd4:	9f af       	std	Y+63, r25	; 0x3f
     bd6:	8e af       	std	Y+62, r24	; 0x3e
     bd8:	6e 97       	sbiw	r28, 0x1e	; 30
     bda:	a1 96       	adiw	r28, 0x21	; 33
     bdc:	9f ad       	ldd	r25, Y+63	; 0x3f
     bde:	a1 97       	sbiw	r28, 0x21	; 33
     be0:	91 50       	subi	r25, 0x01	; 1
     be2:	a1 96       	adiw	r28, 0x21	; 33
     be4:	9f af       	std	Y+63, r25	; 0x3f
     be6:	a1 97       	sbiw	r28, 0x21	; 33
     be8:	a1 96       	adiw	r28, 0x21	; 33
     bea:	ef ad       	ldd	r30, Y+63	; 0x3f
     bec:	a1 97       	sbiw	r28, 0x21	; 33
     bee:	ee 23       	and	r30, r30
     bf0:	c1 f6       	brne	.-80     	; 0xba2 <main+0x44>
	UART_init(&config1); /* Initialize UART with the required configurations */
     bf2:	ce 01       	movw	r24, r28
     bf4:	83 5b       	subi	r24, 0xB3	; 179
     bf6:	9f 4f       	sbci	r25, 0xFF	; 255
     bf8:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <UART_init>
	 * initial value is 0
	 * compare value is 999
	 * prescaler is 1024
	 * the mode is compare mode
	 */
	Timer1_ConfigType config2 = {0, 999, F_CPU_1024, CTC};
     bfc:	ce 01       	movw	r24, r28
     bfe:	8c 5a       	subi	r24, 0xAC	; 172
     c00:	9f 4f       	sbci	r25, 0xFF	; 255
     c02:	a3 96       	adiw	r28, 0x23	; 35
     c04:	9f af       	std	Y+63, r25	; 0x3f
     c06:	8e af       	std	Y+62, r24	; 0x3e
     c08:	a3 97       	sbiw	r28, 0x23	; 35
     c0a:	88 e6       	ldi	r24, 0x68	; 104
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	a5 96       	adiw	r28, 0x25	; 37
     c10:	9f af       	std	Y+63, r25	; 0x3f
     c12:	8e af       	std	Y+62, r24	; 0x3e
     c14:	a5 97       	sbiw	r28, 0x25	; 37
     c16:	96 e0       	ldi	r25, 0x06	; 6
     c18:	a6 96       	adiw	r28, 0x26	; 38
     c1a:	9f af       	std	Y+63, r25	; 0x3f
     c1c:	a6 97       	sbiw	r28, 0x26	; 38
     c1e:	a5 96       	adiw	r28, 0x25	; 37
     c20:	ee ad       	ldd	r30, Y+62	; 0x3e
     c22:	ff ad       	ldd	r31, Y+63	; 0x3f
     c24:	a5 97       	sbiw	r28, 0x25	; 37
     c26:	00 80       	ld	r0, Z
     c28:	a5 96       	adiw	r28, 0x25	; 37
     c2a:	8e ad       	ldd	r24, Y+62	; 0x3e
     c2c:	9f ad       	ldd	r25, Y+63	; 0x3f
     c2e:	a5 97       	sbiw	r28, 0x25	; 37
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	a5 96       	adiw	r28, 0x25	; 37
     c34:	9f af       	std	Y+63, r25	; 0x3f
     c36:	8e af       	std	Y+62, r24	; 0x3e
     c38:	a5 97       	sbiw	r28, 0x25	; 37
     c3a:	a3 96       	adiw	r28, 0x23	; 35
     c3c:	ee ad       	ldd	r30, Y+62	; 0x3e
     c3e:	ff ad       	ldd	r31, Y+63	; 0x3f
     c40:	a3 97       	sbiw	r28, 0x23	; 35
     c42:	00 82       	st	Z, r0
     c44:	a3 96       	adiw	r28, 0x23	; 35
     c46:	8e ad       	ldd	r24, Y+62	; 0x3e
     c48:	9f ad       	ldd	r25, Y+63	; 0x3f
     c4a:	a3 97       	sbiw	r28, 0x23	; 35
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	a3 96       	adiw	r28, 0x23	; 35
     c50:	9f af       	std	Y+63, r25	; 0x3f
     c52:	8e af       	std	Y+62, r24	; 0x3e
     c54:	a3 97       	sbiw	r28, 0x23	; 35
     c56:	a6 96       	adiw	r28, 0x26	; 38
     c58:	9f ad       	ldd	r25, Y+63	; 0x3f
     c5a:	a6 97       	sbiw	r28, 0x26	; 38
     c5c:	91 50       	subi	r25, 0x01	; 1
     c5e:	a6 96       	adiw	r28, 0x26	; 38
     c60:	9f af       	std	Y+63, r25	; 0x3f
     c62:	a6 97       	sbiw	r28, 0x26	; 38
     c64:	a6 96       	adiw	r28, 0x26	; 38
     c66:	ef ad       	ldd	r30, Y+63	; 0x3f
     c68:	a6 97       	sbiw	r28, 0x26	; 38
     c6a:	ee 23       	and	r30, r30
     c6c:	c1 f6       	brne	.-80     	; 0xc1e <main+0xc0>
	Timer1_init(&config2); /* Initialize TIMER1 with the required configurations */
     c6e:	ce 01       	movw	r24, r28
     c70:	8c 5a       	subi	r24, 0xAC	; 172
     c72:	9f 4f       	sbci	r25, 0xFF	; 255
     c74:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <Timer1_init>



	Timer1_setCallBack(TIMER1_ticks); /* set the TIMER1_ticks to be the callback function */
     c78:	83 ea       	ldi	r24, 0xA3	; 163
     c7a:	95 e0       	ldi	r25, 0x05	; 5
     c7c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <Timer1_setCallBack>

	TWI_ConfigType TWI_config = { SLAVE1, NORMAL_MODE };
     c80:	fe 01       	movw	r30, r28
     c82:	e6 5a       	subi	r30, 0xA6	; 166
     c84:	ff 4f       	sbci	r31, 0xFF	; 255
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	80 83       	st	Z, r24
     c8a:	fe 01       	movw	r30, r28
     c8c:	e6 5a       	subi	r30, 0xA6	; 166
     c8e:	ff 4f       	sbci	r31, 0xFF	; 255
     c90:	88 e0       	ldi	r24, 0x08	; 8
     c92:	81 83       	std	Z+1, r24	; 0x01
	TWI_init(&TWI_config);
     c94:	ce 01       	movw	r24, r28
     c96:	86 5a       	subi	r24, 0xA6	; 166
     c98:	9f 4f       	sbci	r25, 0xFF	; 255
     c9a:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <TWI_init>

	while(1)
	{
		command = UART_recieveByte(); /* receive command from MC1 through the UART*/
     c9e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <UART_recieveByte>
     ca2:	fe 01       	movw	r30, r28
     ca4:	ef 5b       	subi	r30, 0xBF	; 191
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	80 83       	st	Z, r24

		if (command == STORE_EEPROM) {
     caa:	fe 01       	movw	r30, r28
     cac:	ef 5b       	subi	r30, 0xBF	; 191
     cae:	ff 4f       	sbci	r31, 0xFF	; 255
     cb0:	80 81       	ld	r24, Z
     cb2:	82 30       	cpi	r24, 0x02	; 2
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <main+0x15a>
     cb6:	4e c2       	rjmp	.+1180   	; 0x1154 <main+0x5f6>
			for (int i = 0; i < 5; i++) {
     cb8:	fe 01       	movw	r30, r28
     cba:	ff 96       	adiw	r30, 0x3f	; 63
     cbc:	11 82       	std	Z+1, r1	; 0x01
     cbe:	10 82       	st	Z, r1
     cc0:	17 c0       	rjmp	.+46     	; 0xcf0 <main+0x192>
				recieved_password[i] = UART_recieveByte(); /* take the password from MC1  */
     cc2:	fe 01       	movw	r30, r28
     cc4:	ff 96       	adiw	r30, 0x3f	; 63
     cc6:	00 81       	ld	r16, Z
     cc8:	11 81       	ldd	r17, Z+1	; 0x01
     cca:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <UART_recieveByte>
     cce:	28 2f       	mov	r18, r24
     cd0:	ce 01       	movw	r24, r28
     cd2:	8d 5b       	subi	r24, 0xBD	; 189
     cd4:	9f 4f       	sbci	r25, 0xFF	; 255
     cd6:	fc 01       	movw	r30, r24
     cd8:	e0 0f       	add	r30, r16
     cda:	f1 1f       	adc	r31, r17
     cdc:	20 83       	st	Z, r18
	while(1)
	{
		command = UART_recieveByte(); /* receive command from MC1 through the UART*/

		if (command == STORE_EEPROM) {
			for (int i = 0; i < 5; i++) {
     cde:	fe 01       	movw	r30, r28
     ce0:	ff 96       	adiw	r30, 0x3f	; 63
     ce2:	80 81       	ld	r24, Z
     ce4:	91 81       	ldd	r25, Z+1	; 0x01
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	fe 01       	movw	r30, r28
     cea:	ff 96       	adiw	r30, 0x3f	; 63
     cec:	91 83       	std	Z+1, r25	; 0x01
     cee:	80 83       	st	Z, r24
     cf0:	fe 01       	movw	r30, r28
     cf2:	ff 96       	adiw	r30, 0x3f	; 63
     cf4:	80 81       	ld	r24, Z
     cf6:	91 81       	ldd	r25, Z+1	; 0x01
     cf8:	85 30       	cpi	r24, 0x05	; 5
     cfa:	91 05       	cpc	r25, r1
     cfc:	14 f3       	brlt	.-60     	; 0xcc2 <main+0x164>
				recieved_password[i] = UART_recieveByte(); /* take the password from MC1  */
			}
			for (int i = 0; i < 5; i++) {
     cfe:	1e ae       	std	Y+62, r1	; 0x3e
     d00:	1d ae       	std	Y+61, r1	; 0x3d
     d02:	89 c0       	rjmp	.+274    	; 0xe16 <main+0x2b8>
				EEPROM_writeByte(0x0311 + i, recieved_password[i]);/* store this password in eeprom starting from address 0x0311 */
     d04:	8d ad       	ldd	r24, Y+61	; 0x3d
     d06:	9e ad       	ldd	r25, Y+62	; 0x3e
     d08:	8f 5e       	subi	r24, 0xEF	; 239
     d0a:	9c 4f       	sbci	r25, 0xFC	; 252
     d0c:	ac 01       	movw	r20, r24
     d0e:	2d ad       	ldd	r18, Y+61	; 0x3d
     d10:	3e ad       	ldd	r19, Y+62	; 0x3e
     d12:	ce 01       	movw	r24, r28
     d14:	8d 5b       	subi	r24, 0xBD	; 189
     d16:	9f 4f       	sbci	r25, 0xFF	; 255
     d18:	fc 01       	movw	r30, r24
     d1a:	e2 0f       	add	r30, r18
     d1c:	f3 1f       	adc	r31, r19
     d1e:	20 81       	ld	r18, Z
     d20:	ca 01       	movw	r24, r20
     d22:	62 2f       	mov	r22, r18
     d24:	0e 94 b1 09 	call	0x1362	; 0x1362 <EEPROM_writeByte>
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a0 e2       	ldi	r26, 0x20	; 32
     d2e:	b1 e4       	ldi	r27, 0x41	; 65
     d30:	8d ab       	std	Y+53, r24	; 0x35
     d32:	9e ab       	std	Y+54, r25	; 0x36
     d34:	af ab       	std	Y+55, r26	; 0x37
     d36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d38:	6d a9       	ldd	r22, Y+53	; 0x35
     d3a:	7e a9       	ldd	r23, Y+54	; 0x36
     d3c:	8f a9       	ldd	r24, Y+55	; 0x37
     d3e:	98 ad       	ldd	r25, Y+56	; 0x38
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	4a e7       	ldi	r20, 0x7A	; 122
     d46:	53 e4       	ldi	r21, 0x43	; 67
     d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	89 ab       	std	Y+49, r24	; 0x31
     d52:	9a ab       	std	Y+50, r25	; 0x32
     d54:	ab ab       	std	Y+51, r26	; 0x33
     d56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d58:	69 a9       	ldd	r22, Y+49	; 0x31
     d5a:	7a a9       	ldd	r23, Y+50	; 0x32
     d5c:	8b a9       	ldd	r24, Y+51	; 0x33
     d5e:	9c a9       	ldd	r25, Y+52	; 0x34
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e8       	ldi	r20, 0x80	; 128
     d66:	5f e3       	ldi	r21, 0x3F	; 63
     d68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d6c:	88 23       	and	r24, r24
     d6e:	2c f4       	brge	.+10     	; 0xd7a <main+0x21c>
		__ticks = 1;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	98 ab       	std	Y+48, r25	; 0x30
     d76:	8f a7       	std	Y+47, r24	; 0x2f
     d78:	3f c0       	rjmp	.+126    	; 0xdf8 <main+0x29a>
	else if (__tmp > 65535)
     d7a:	69 a9       	ldd	r22, Y+49	; 0x31
     d7c:	7a a9       	ldd	r23, Y+50	; 0x32
     d7e:	8b a9       	ldd	r24, Y+51	; 0x33
     d80:	9c a9       	ldd	r25, Y+52	; 0x34
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	3f ef       	ldi	r19, 0xFF	; 255
     d86:	4f e7       	ldi	r20, 0x7F	; 127
     d88:	57 e4       	ldi	r21, 0x47	; 71
     d8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d8e:	18 16       	cp	r1, r24
     d90:	4c f5       	brge	.+82     	; 0xde4 <main+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d92:	6d a9       	ldd	r22, Y+53	; 0x35
     d94:	7e a9       	ldd	r23, Y+54	; 0x36
     d96:	8f a9       	ldd	r24, Y+55	; 0x37
     d98:	98 ad       	ldd	r25, Y+56	; 0x38
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e2       	ldi	r20, 0x20	; 32
     da0:	51 e4       	ldi	r21, 0x41	; 65
     da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	bc 01       	movw	r22, r24
     dac:	cd 01       	movw	r24, r26
     dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	98 ab       	std	Y+48, r25	; 0x30
     db8:	8f a7       	std	Y+47, r24	; 0x2f
     dba:	0f c0       	rjmp	.+30     	; 0xdda <main+0x27c>
     dbc:	89 e1       	ldi	r24, 0x19	; 25
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	9e a7       	std	Y+46, r25	; 0x2e
     dc2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dc4:	8d a5       	ldd	r24, Y+45	; 0x2d
     dc6:	9e a5       	ldd	r25, Y+46	; 0x2e
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <main+0x26a>
     dcc:	9e a7       	std	Y+46, r25	; 0x2e
     dce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd0:	8f a5       	ldd	r24, Y+47	; 0x2f
     dd2:	98 a9       	ldd	r25, Y+48	; 0x30
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	98 ab       	std	Y+48, r25	; 0x30
     dd8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dda:	8f a5       	ldd	r24, Y+47	; 0x2f
     ddc:	98 a9       	ldd	r25, Y+48	; 0x30
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	69 f7       	brne	.-38     	; 0xdbc <main+0x25e>
     de2:	14 c0       	rjmp	.+40     	; 0xe0c <main+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de4:	69 a9       	ldd	r22, Y+49	; 0x31
     de6:	7a a9       	ldd	r23, Y+50	; 0x32
     de8:	8b a9       	ldd	r24, Y+51	; 0x33
     dea:	9c a9       	ldd	r25, Y+52	; 0x34
     dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	98 ab       	std	Y+48, r25	; 0x30
     df6:	8f a7       	std	Y+47, r24	; 0x2f
     df8:	8f a5       	ldd	r24, Y+47	; 0x2f
     dfa:	98 a9       	ldd	r25, Y+48	; 0x30
     dfc:	9c a7       	std	Y+44, r25	; 0x2c
     dfe:	8b a7       	std	Y+43, r24	; 0x2b
     e00:	8b a5       	ldd	r24, Y+43	; 0x2b
     e02:	9c a5       	ldd	r25, Y+44	; 0x2c
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	f1 f7       	brne	.-4      	; 0xe04 <main+0x2a6>
     e08:	9c a7       	std	Y+44, r25	; 0x2c
     e0a:	8b a7       	std	Y+43, r24	; 0x2b

		if (command == STORE_EEPROM) {
			for (int i = 0; i < 5; i++) {
				recieved_password[i] = UART_recieveByte(); /* take the password from MC1  */
			}
			for (int i = 0; i < 5; i++) {
     e0c:	8d ad       	ldd	r24, Y+61	; 0x3d
     e0e:	9e ad       	ldd	r25, Y+62	; 0x3e
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	9e af       	std	Y+62, r25	; 0x3e
     e14:	8d af       	std	Y+61, r24	; 0x3d
     e16:	8d ad       	ldd	r24, Y+61	; 0x3d
     e18:	9e ad       	ldd	r25, Y+62	; 0x3e
     e1a:	85 30       	cpi	r24, 0x05	; 5
     e1c:	91 05       	cpc	r25, r1
     e1e:	0c f4       	brge	.+2      	; 0xe22 <main+0x2c4>
     e20:	71 cf       	rjmp	.-286    	; 0xd04 <main+0x1a6>
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	a8 ec       	ldi	r26, 0xC8	; 200
     e28:	b2 e4       	ldi	r27, 0x42	; 66
     e2a:	8f a3       	std	Y+39, r24	; 0x27
     e2c:	98 a7       	std	Y+40, r25	; 0x28
     e2e:	a9 a7       	std	Y+41, r26	; 0x29
     e30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e32:	6f a1       	ldd	r22, Y+39	; 0x27
     e34:	78 a5       	ldd	r23, Y+40	; 0x28
     e36:	89 a5       	ldd	r24, Y+41	; 0x29
     e38:	9a a5       	ldd	r25, Y+42	; 0x2a
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	4a e7       	ldi	r20, 0x7A	; 122
     e40:	53 e4       	ldi	r21, 0x43	; 67
     e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	8b a3       	std	Y+35, r24	; 0x23
     e4c:	9c a3       	std	Y+36, r25	; 0x24
     e4e:	ad a3       	std	Y+37, r26	; 0x25
     e50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e52:	6b a1       	ldd	r22, Y+35	; 0x23
     e54:	7c a1       	ldd	r23, Y+36	; 0x24
     e56:	8d a1       	ldd	r24, Y+37	; 0x25
     e58:	9e a1       	ldd	r25, Y+38	; 0x26
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e8       	ldi	r20, 0x80	; 128
     e60:	5f e3       	ldi	r21, 0x3F	; 63
     e62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e66:	88 23       	and	r24, r24
     e68:	2c f4       	brge	.+10     	; 0xe74 <main+0x316>
		__ticks = 1;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	9a a3       	std	Y+34, r25	; 0x22
     e70:	89 a3       	std	Y+33, r24	; 0x21
     e72:	3f c0       	rjmp	.+126    	; 0xef2 <main+0x394>
	else if (__tmp > 65535)
     e74:	6b a1       	ldd	r22, Y+35	; 0x23
     e76:	7c a1       	ldd	r23, Y+36	; 0x24
     e78:	8d a1       	ldd	r24, Y+37	; 0x25
     e7a:	9e a1       	ldd	r25, Y+38	; 0x26
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	3f ef       	ldi	r19, 0xFF	; 255
     e80:	4f e7       	ldi	r20, 0x7F	; 127
     e82:	57 e4       	ldi	r21, 0x47	; 71
     e84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e88:	18 16       	cp	r1, r24
     e8a:	4c f5       	brge	.+82     	; 0xede <main+0x380>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8c:	6f a1       	ldd	r22, Y+39	; 0x27
     e8e:	78 a5       	ldd	r23, Y+40	; 0x28
     e90:	89 a5       	ldd	r24, Y+41	; 0x29
     e92:	9a a5       	ldd	r25, Y+42	; 0x2a
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	40 e2       	ldi	r20, 0x20	; 32
     e9a:	51 e4       	ldi	r21, 0x41	; 65
     e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	bc 01       	movw	r22, r24
     ea6:	cd 01       	movw	r24, r26
     ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	9a a3       	std	Y+34, r25	; 0x22
     eb2:	89 a3       	std	Y+33, r24	; 0x21
     eb4:	0f c0       	rjmp	.+30     	; 0xed4 <main+0x376>
     eb6:	89 e1       	ldi	r24, 0x19	; 25
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	98 a3       	std	Y+32, r25	; 0x20
     ebc:	8f 8f       	std	Y+31, r24	; 0x1f
     ebe:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ec0:	98 a1       	ldd	r25, Y+32	; 0x20
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <main+0x364>
     ec6:	98 a3       	std	Y+32, r25	; 0x20
     ec8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eca:	89 a1       	ldd	r24, Y+33	; 0x21
     ecc:	9a a1       	ldd	r25, Y+34	; 0x22
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	9a a3       	std	Y+34, r25	; 0x22
     ed2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed4:	89 a1       	ldd	r24, Y+33	; 0x21
     ed6:	9a a1       	ldd	r25, Y+34	; 0x22
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	69 f7       	brne	.-38     	; 0xeb6 <main+0x358>
     edc:	14 c0       	rjmp	.+40     	; 0xf06 <main+0x3a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ede:	6b a1       	ldd	r22, Y+35	; 0x23
     ee0:	7c a1       	ldd	r23, Y+36	; 0x24
     ee2:	8d a1       	ldd	r24, Y+37	; 0x25
     ee4:	9e a1       	ldd	r25, Y+38	; 0x26
     ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	9a a3       	std	Y+34, r25	; 0x22
     ef0:	89 a3       	std	Y+33, r24	; 0x21
     ef2:	89 a1       	ldd	r24, Y+33	; 0x21
     ef4:	9a a1       	ldd	r25, Y+34	; 0x22
     ef6:	9e 8f       	std	Y+30, r25	; 0x1e
     ef8:	8d 8f       	std	Y+29, r24	; 0x1d
     efa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     efc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	f1 f7       	brne	.-4      	; 0xefe <main+0x3a0>
     f02:	9e 8f       	std	Y+30, r25	; 0x1e
     f04:	8d 8f       	std	Y+29, r24	; 0x1d
				EEPROM_writeByte(0x0311 + i, recieved_password[i]);/* store this password in eeprom starting from address 0x0311 */
				_delay_ms(10);
			}
			_delay_ms(100);
			for (int i = 0; i < 5; i++) {
     f06:	1c ae       	std	Y+60, r1	; 0x3c
     f08:	1b ae       	std	Y+59, r1	; 0x3b
     f0a:	8e c0       	rjmp	.+284    	; 0x1028 <main+0x4ca>
				EEPROM_readByte(0x0311 + i, &data); /* read the password from eeprom */
     f0c:	8b ad       	ldd	r24, Y+59	; 0x3b
     f0e:	9c ad       	ldd	r25, Y+60	; 0x3c
     f10:	8f 5e       	subi	r24, 0xEF	; 239
     f12:	9c 4f       	sbci	r25, 0xFC	; 252
     f14:	9e 01       	movw	r18, r28
     f16:	2e 5b       	subi	r18, 0xBE	; 190
     f18:	3f 4f       	sbci	r19, 0xFF	; 255
     f1a:	b9 01       	movw	r22, r18
     f1c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <EEPROM_readByte>
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	a0 e2       	ldi	r26, 0x20	; 32
     f26:	b1 e4       	ldi	r27, 0x41	; 65
     f28:	89 8f       	std	Y+25, r24	; 0x19
     f2a:	9a 8f       	std	Y+26, r25	; 0x1a
     f2c:	ab 8f       	std	Y+27, r26	; 0x1b
     f2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f30:	69 8d       	ldd	r22, Y+25	; 0x19
     f32:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f34:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f36:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	4a e7       	ldi	r20, 0x7A	; 122
     f3e:	53 e4       	ldi	r21, 0x43	; 67
     f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	8d 8b       	std	Y+21, r24	; 0x15
     f4a:	9e 8b       	std	Y+22, r25	; 0x16
     f4c:	af 8b       	std	Y+23, r26	; 0x17
     f4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f50:	6d 89       	ldd	r22, Y+21	; 0x15
     f52:	7e 89       	ldd	r23, Y+22	; 0x16
     f54:	8f 89       	ldd	r24, Y+23	; 0x17
     f56:	98 8d       	ldd	r25, Y+24	; 0x18
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	40 e8       	ldi	r20, 0x80	; 128
     f5e:	5f e3       	ldi	r21, 0x3F	; 63
     f60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f64:	88 23       	and	r24, r24
     f66:	2c f4       	brge	.+10     	; 0xf72 <main+0x414>
		__ticks = 1;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	9c 8b       	std	Y+20, r25	; 0x14
     f6e:	8b 8b       	std	Y+19, r24	; 0x13
     f70:	3f c0       	rjmp	.+126    	; 0xff0 <main+0x492>
	else if (__tmp > 65535)
     f72:	6d 89       	ldd	r22, Y+21	; 0x15
     f74:	7e 89       	ldd	r23, Y+22	; 0x16
     f76:	8f 89       	ldd	r24, Y+23	; 0x17
     f78:	98 8d       	ldd	r25, Y+24	; 0x18
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	3f ef       	ldi	r19, 0xFF	; 255
     f7e:	4f e7       	ldi	r20, 0x7F	; 127
     f80:	57 e4       	ldi	r21, 0x47	; 71
     f82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f86:	18 16       	cp	r1, r24
     f88:	4c f5       	brge	.+82     	; 0xfdc <main+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f8a:	69 8d       	ldd	r22, Y+25	; 0x19
     f8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f90:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e2       	ldi	r20, 0x20	; 32
     f98:	51 e4       	ldi	r21, 0x41	; 65
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	bc 01       	movw	r22, r24
     fa4:	cd 01       	movw	r24, r26
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	9c 8b       	std	Y+20, r25	; 0x14
     fb0:	8b 8b       	std	Y+19, r24	; 0x13
     fb2:	0f c0       	rjmp	.+30     	; 0xfd2 <main+0x474>
     fb4:	89 e1       	ldi	r24, 0x19	; 25
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9a 8b       	std	Y+18, r25	; 0x12
     fba:	89 8b       	std	Y+17, r24	; 0x11
     fbc:	89 89       	ldd	r24, Y+17	; 0x11
     fbe:	9a 89       	ldd	r25, Y+18	; 0x12
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <main+0x462>
     fc4:	9a 8b       	std	Y+18, r25	; 0x12
     fc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc8:	8b 89       	ldd	r24, Y+19	; 0x13
     fca:	9c 89       	ldd	r25, Y+20	; 0x14
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	9c 8b       	std	Y+20, r25	; 0x14
     fd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd2:	8b 89       	ldd	r24, Y+19	; 0x13
     fd4:	9c 89       	ldd	r25, Y+20	; 0x14
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	69 f7       	brne	.-38     	; 0xfb4 <main+0x456>
     fda:	14 c0       	rjmp	.+40     	; 0x1004 <main+0x4a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fdc:	6d 89       	ldd	r22, Y+21	; 0x15
     fde:	7e 89       	ldd	r23, Y+22	; 0x16
     fe0:	8f 89       	ldd	r24, Y+23	; 0x17
     fe2:	98 8d       	ldd	r25, Y+24	; 0x18
     fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	9c 8b       	std	Y+20, r25	; 0x14
     fee:	8b 8b       	std	Y+19, r24	; 0x13
     ff0:	8b 89       	ldd	r24, Y+19	; 0x13
     ff2:	9c 89       	ldd	r25, Y+20	; 0x14
     ff4:	98 8b       	std	Y+16, r25	; 0x10
     ff6:	8f 87       	std	Y+15, r24	; 0x0f
     ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
     ffa:	98 89       	ldd	r25, Y+16	; 0x10
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <main+0x49e>
    1000:	98 8b       	std	Y+16, r25	; 0x10
    1002:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10);
				pass_to_send[i] = data; /* store it in array to send it to MC1 */
    1004:	2b ad       	ldd	r18, Y+59	; 0x3b
    1006:	3c ad       	ldd	r19, Y+60	; 0x3c
    1008:	fe 01       	movw	r30, r28
    100a:	ee 5b       	subi	r30, 0xBE	; 190
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	40 81       	ld	r20, Z
    1010:	ce 01       	movw	r24, r28
    1012:	88 5b       	subi	r24, 0xB8	; 184
    1014:	9f 4f       	sbci	r25, 0xFF	; 255
    1016:	fc 01       	movw	r30, r24
    1018:	e2 0f       	add	r30, r18
    101a:	f3 1f       	adc	r31, r19
    101c:	40 83       	st	Z, r20
			for (int i = 0; i < 5; i++) {
				EEPROM_writeByte(0x0311 + i, recieved_password[i]);/* store this password in eeprom starting from address 0x0311 */
				_delay_ms(10);
			}
			_delay_ms(100);
			for (int i = 0; i < 5; i++) {
    101e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1020:	9c ad       	ldd	r25, Y+60	; 0x3c
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	9c af       	std	Y+60, r25	; 0x3c
    1026:	8b af       	std	Y+59, r24	; 0x3b
    1028:	8b ad       	ldd	r24, Y+59	; 0x3b
    102a:	9c ad       	ldd	r25, Y+60	; 0x3c
    102c:	85 30       	cpi	r24, 0x05	; 5
    102e:	91 05       	cpc	r25, r1
    1030:	0c f4       	brge	.+2      	; 0x1034 <main+0x4d6>
    1032:	6c cf       	rjmp	.-296    	; 0xf0c <main+0x3ae>
				EEPROM_readByte(0x0311 + i, &data); /* read the password from eeprom */
				_delay_ms(10);
				pass_to_send[i] = data; /* store it in array to send it to MC1 */
			}
			while (UART_recieveByte() != MC_READY) { /* wait until MC1 is ready to receive password */
    1034:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <UART_recieveByte>
    1038:	81 30       	cpi	r24, 0x01	; 1
    103a:	e1 f7       	brne	.-8      	; 0x1034 <main+0x4d6>
			};
			for (int i = 0; i < 5; i++) {
    103c:	1a ae       	std	Y+58, r1	; 0x3a
    103e:	19 ae       	std	Y+57, r1	; 0x39
    1040:	82 c0       	rjmp	.+260    	; 0x1146 <main+0x5e8>
				UART_sendByte(pass_to_send[i]);
    1042:	29 ad       	ldd	r18, Y+57	; 0x39
    1044:	3a ad       	ldd	r19, Y+58	; 0x3a
    1046:	ce 01       	movw	r24, r28
    1048:	88 5b       	subi	r24, 0xB8	; 184
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	fc 01       	movw	r30, r24
    104e:	e2 0f       	add	r30, r18
    1050:	f3 1f       	adc	r31, r19
    1052:	80 81       	ld	r24, Z
    1054:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <UART_sendByte>
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	a8 ec       	ldi	r26, 0xC8	; 200
    105e:	b2 e4       	ldi	r27, 0x42	; 66
    1060:	8b 87       	std	Y+11, r24	; 0x0b
    1062:	9c 87       	std	Y+12, r25	; 0x0c
    1064:	ad 87       	std	Y+13, r26	; 0x0d
    1066:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1068:	6b 85       	ldd	r22, Y+11	; 0x0b
    106a:	7c 85       	ldd	r23, Y+12	; 0x0c
    106c:	8d 85       	ldd	r24, Y+13	; 0x0d
    106e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	4a e7       	ldi	r20, 0x7A	; 122
    1076:	53 e4       	ldi	r21, 0x43	; 67
    1078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	8f 83       	std	Y+7, r24	; 0x07
    1082:	98 87       	std	Y+8, r25	; 0x08
    1084:	a9 87       	std	Y+9, r26	; 0x09
    1086:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1088:	6f 81       	ldd	r22, Y+7	; 0x07
    108a:	78 85       	ldd	r23, Y+8	; 0x08
    108c:	89 85       	ldd	r24, Y+9	; 0x09
    108e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e8       	ldi	r20, 0x80	; 128
    1096:	5f e3       	ldi	r21, 0x3F	; 63
    1098:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    109c:	88 23       	and	r24, r24
    109e:	2c f4       	brge	.+10     	; 0x10aa <main+0x54c>
		__ticks = 1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	9e 83       	std	Y+6, r25	; 0x06
    10a6:	8d 83       	std	Y+5, r24	; 0x05
    10a8:	3f c0       	rjmp	.+126    	; 0x1128 <main+0x5ca>
	else if (__tmp > 65535)
    10aa:	6f 81       	ldd	r22, Y+7	; 0x07
    10ac:	78 85       	ldd	r23, Y+8	; 0x08
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	3f ef       	ldi	r19, 0xFF	; 255
    10b6:	4f e7       	ldi	r20, 0x7F	; 127
    10b8:	57 e4       	ldi	r21, 0x47	; 71
    10ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10be:	18 16       	cp	r1, r24
    10c0:	4c f5       	brge	.+82     	; 0x1114 <main+0x5b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e2       	ldi	r20, 0x20	; 32
    10d0:	51 e4       	ldi	r21, 0x41	; 65
    10d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	bc 01       	movw	r22, r24
    10dc:	cd 01       	movw	r24, r26
    10de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	9e 83       	std	Y+6, r25	; 0x06
    10e8:	8d 83       	std	Y+5, r24	; 0x05
    10ea:	0f c0       	rjmp	.+30     	; 0x110a <main+0x5ac>
    10ec:	89 e1       	ldi	r24, 0x19	; 25
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	9c 83       	std	Y+4, r25	; 0x04
    10f2:	8b 83       	std	Y+3, r24	; 0x03
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	9c 81       	ldd	r25, Y+4	; 0x04
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <main+0x59a>
    10fc:	9c 83       	std	Y+4, r25	; 0x04
    10fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	9e 83       	std	Y+6, r25	; 0x06
    1108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	9e 81       	ldd	r25, Y+6	; 0x06
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	69 f7       	brne	.-38     	; 0x10ec <main+0x58e>
    1112:	14 c0       	rjmp	.+40     	; 0x113c <main+0x5de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1114:	6f 81       	ldd	r22, Y+7	; 0x07
    1116:	78 85       	ldd	r23, Y+8	; 0x08
    1118:	89 85       	ldd	r24, Y+9	; 0x09
    111a:	9a 85       	ldd	r25, Y+10	; 0x0a
    111c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	9e 83       	std	Y+6, r25	; 0x06
    1126:	8d 83       	std	Y+5, r24	; 0x05
    1128:	8d 81       	ldd	r24, Y+5	; 0x05
    112a:	9e 81       	ldd	r25, Y+6	; 0x06
    112c:	9a 83       	std	Y+2, r25	; 0x02
    112e:	89 83       	std	Y+1, r24	; 0x01
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <main+0x5d6>
    1138:	9a 83       	std	Y+2, r25	; 0x02
    113a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);
				pass_to_send[i] = data; /* store it in array to send it to MC1 */
			}
			while (UART_recieveByte() != MC_READY) { /* wait until MC1 is ready to receive password */
			};
			for (int i = 0; i < 5; i++) {
    113c:	89 ad       	ldd	r24, Y+57	; 0x39
    113e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1140:	01 96       	adiw	r24, 0x01	; 1
    1142:	9a af       	std	Y+58, r25	; 0x3a
    1144:	89 af       	std	Y+57, r24	; 0x39
    1146:	89 ad       	ldd	r24, Y+57	; 0x39
    1148:	9a ad       	ldd	r25, Y+58	; 0x3a
    114a:	85 30       	cpi	r24, 0x05	; 5
    114c:	91 05       	cpc	r25, r1
    114e:	0c f4       	brge	.+2      	; 0x1152 <main+0x5f4>
    1150:	78 cf       	rjmp	.-272    	; 0x1042 <main+0x4e4>
    1152:	a5 cd       	rjmp	.-1206   	; 0xc9e <main+0x140>
				UART_sendByte(pass_to_send[i]);
				_delay_ms(100);
			}
		}
		else if (command == BUZZER_ON) { /* if received command from MC1 to turn on the buzzer */
    1154:	fe 01       	movw	r30, r28
    1156:	ef 5b       	subi	r30, 0xBF	; 191
    1158:	ff 4f       	sbci	r31, 0xFF	; 255
    115a:	80 81       	ld	r24, Z
    115c:	86 3f       	cpi	r24, 0xF6	; 246
    115e:	49 f4       	brne	.+18     	; 0x1172 <main+0x614>
			Buzzer_on();
    1160:	0e 94 00 09 	call	0x1200	; 0x1200 <Buzzer_on>
			while (UART_recieveByte() != BUZZER_OFF) { /* wait until MC1 send a command to turn off buzzer */
    1164:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <UART_recieveByte>
    1168:	87 3f       	cpi	r24, 0xF7	; 247
    116a:	e1 f7       	brne	.-8      	; 0x1164 <main+0x606>
			};
			Buzzer_off();
    116c:	0e 94 0c 09 	call	0x1218	; 0x1218 <Buzzer_off>
    1170:	96 cd       	rjmp	.-1236   	; 0xc9e <main+0x140>
		}
		else if (command == OPEN) { /* if received from MC1 to open the door */
    1172:	fe 01       	movw	r30, r28
    1174:	ef 5b       	subi	r30, 0xBF	; 191
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	80 81       	ld	r24, Z
    117a:	83 30       	cpi	r24, 0x03	; 3
    117c:	59 f4       	brne	.+22     	; 0x1194 <main+0x636>
			DcMotor_Rotate(CW, 100); /* rotate the motor CW */
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	64 e6       	ldi	r22, 0x64	; 100
    1182:	0e 94 33 09 	call	0x1266	; 0x1266 <DcMotor_Rotate>
			g_tick = 0;
    1186:	10 92 76 00 	sts	0x0076, r1
			while (g_tick <= 15)
    118a:	80 91 76 00 	lds	r24, 0x0076
    118e:	80 31       	cpi	r24, 0x10	; 16
    1190:	e0 f3       	brcs	.-8      	; 0x118a <main+0x62c>
    1192:	85 cd       	rjmp	.-1270   	; 0xc9e <main+0x140>
				;
		}
		else if (command == WAIT) { /* leave the door open  */
    1194:	fe 01       	movw	r30, r28
    1196:	ef 5b       	subi	r30, 0xBF	; 191
    1198:	ff 4f       	sbci	r31, 0xFF	; 255
    119a:	80 81       	ld	r24, Z
    119c:	85 3f       	cpi	r24, 0xF5	; 245
    119e:	49 f4       	brne	.+18     	; 0x11b2 <main+0x654>
			DcMotor_Rotate(STOP, 0); /* stop the motor */
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	0e 94 33 09 	call	0x1266	; 0x1266 <DcMotor_Rotate>
			while (g_tick <= 18)
    11a8:	80 91 76 00 	lds	r24, 0x0076
    11ac:	83 31       	cpi	r24, 0x13	; 19
    11ae:	e0 f3       	brcs	.-8      	; 0x11a8 <main+0x64a>
    11b0:	76 cd       	rjmp	.-1300   	; 0xc9e <main+0x140>
				;
		}
		else if (command == CLOSE) { /* if received from MC1 to close the door */
    11b2:	fe 01       	movw	r30, r28
    11b4:	ef 5b       	subi	r30, 0xBF	; 191
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	80 81       	ld	r24, Z
    11ba:	84 30       	cpi	r24, 0x04	; 4
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <main+0x662>
    11be:	6f cd       	rjmp	.-1314   	; 0xc9e <main+0x140>
			DcMotor_Rotate(A_CW, 100); /* rotate the motor ACW */
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	64 e6       	ldi	r22, 0x64	; 100
    11c4:	0e 94 33 09 	call	0x1266	; 0x1266 <DcMotor_Rotate>
						while (g_tick <= 33)
    11c8:	80 91 76 00 	lds	r24, 0x0076
    11cc:	82 32       	cpi	r24, 0x22	; 34
    11ce:	e0 f3       	brcs	.-8      	; 0x11c8 <main+0x66a>
							;

						g_tick = 0;
    11d0:	10 92 76 00 	sts	0x0076, r1

			DcMotor_Rotate(STOP, 0); /* Stop the motor to not let it always run  */
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	0e 94 33 09 	call	0x1266	; 0x1266 <DcMotor_Rotate>
    11dc:	60 cd       	rjmp	.-1344   	; 0xc9e <main+0x140>

000011de <Buzzer_init>:
   GPIO driver.
*  Turn off the buzzer through the GPIO
*/

void Buzzer_init()
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
	/* Setup the direction for the buzzer pin as output pin through the GPIO driver */

	GPIO_setupPinDirection(PORTA_ID, PIN7_ID, PIN_OUTPUT);
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	67 e0       	ldi	r22, 0x07	; 7
    11ea:	41 e0       	ldi	r20, 0x01	; 1
    11ec:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <GPIO_setupPinDirection>

	/* Turn off the buzzer through the GPIO */

	GPIO_writePin(PORTA_ID, PIN7_ID, LOGIC_LOW);
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	67 e0       	ldi	r22, 0x07	; 7
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	0e 94 3d 0b 	call	0x167a	; 0x167a <GPIO_writePin>

}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <Buzzer_on>:
/* Description:
 * Function to enable the Buzzer through the GPIO
 */

void Buzzer_on(void)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTA_ID, PIN7_ID, LOGIC_HIGH);
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	67 e0       	ldi	r22, 0x07	; 7
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	0e 94 3d 0b 	call	0x167a	; 0x167a <GPIO_writePin>
}
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <Buzzer_off>:
/* Description:
 * Function to disable the Buzzer through the GPIO
 */

void Buzzer_off(void)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTA_ID, PIN7_ID, LOGIC_LOW);
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	67 e0       	ldi	r22, 0x07	; 7
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	0e 94 3d 0b 	call	0x167a	; 0x167a <GPIO_writePin>
}
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <DcMotor_Init>:
 * The Function responsible for setup the direction for the two
  motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver
 */
void DcMotor_Init(void)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
	/* set PA0 & PA1 as output pins */
	GPIO_setupPinDirection(PORTA_ID, PIN0_ID, PIN_OUTPUT);
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	41 e0       	ldi	r20, 0x01	; 1
    123e:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTA_ID, PIN1_ID, PIN_OUTPUT);
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	61 e0       	ldi	r22, 0x01	; 1
    1246:	41 e0       	ldi	r20, 0x01	; 1
    1248:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <GPIO_setupPinDirection>

	/* Stop at the DC-Motor at the beginning */
	GPIO_writePin(PORTA_ID, PIN0_ID, 0);
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	40 e0       	ldi	r20, 0x00	; 0
    1252:	0e 94 3d 0b 	call	0x167a	; 0x167a <GPIO_writePin>
	GPIO_writePin(PORTA_ID, PIN1_ID, 0);
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	40 e0       	ldi	r20, 0x00	; 0
    125c:	0e 94 3d 0b 	call	0x167a	; 0x167a <GPIO_writePin>
}
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <DcMotor_Rotate>:
  stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the
  required speed value.
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	27 97       	sbiw	r28, 0x07	; 7
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	8a 83       	std	Y+2, r24	; 0x02
    127c:	6b 83       	std	Y+3, r22	; 0x03
	volatile uint8 set_duty_cycle = 0;
    127e:	19 82       	std	Y+1, r1	; 0x01
	switch (state)
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	3f 83       	std	Y+7, r19	; 0x07
    1288:	2e 83       	std	Y+6, r18	; 0x06
    128a:	8e 81       	ldd	r24, Y+6	; 0x06
    128c:	9f 81       	ldd	r25, Y+7	; 0x07
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	91 05       	cpc	r25, r1
    1292:	51 f0       	breq	.+20     	; 0x12a8 <DcMotor_Rotate+0x42>
    1294:	2e 81       	ldd	r18, Y+6	; 0x06
    1296:	3f 81       	ldd	r19, Y+7	; 0x07
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	d9 f0       	breq	.+54     	; 0x12d4 <DcMotor_Rotate+0x6e>
    129e:	8e 81       	ldd	r24, Y+6	; 0x06
    12a0:	9f 81       	ldd	r25, Y+7	; 0x07
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	61 f0       	breq	.+24     	; 0x12be <DcMotor_Rotate+0x58>
    12a6:	20 c0       	rjmp	.+64     	; 0x12e8 <DcMotor_Rotate+0x82>
	{
	case CW:
		GPIO_writePin(PORTA_ID, PIN0_ID, LOGIC_HIGH); /* PB0 = 1 */
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	41 e0       	ldi	r20, 0x01	; 1
    12ae:	0e 94 3d 0b 	call	0x167a	; 0x167a <GPIO_writePin>
		GPIO_writePin(PORTA_ID, PIN1_ID, LOGIC_LOW);  /* PB1 = 0 */
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	61 e0       	ldi	r22, 0x01	; 1
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	0e 94 3d 0b 	call	0x167a	; 0x167a <GPIO_writePin>
    12bc:	15 c0       	rjmp	.+42     	; 0x12e8 <DcMotor_Rotate+0x82>
		break;
	case STOP:
		GPIO_writePin(PORTA_ID, PIN0_ID, LOGIC_LOW); /* PB0 = 0 */
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	0e 94 3d 0b 	call	0x167a	; 0x167a <GPIO_writePin>
		GPIO_writePin(PORTA_ID, PIN1_ID, LOGIC_LOW); /* PB0 = 0 */
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	61 e0       	ldi	r22, 0x01	; 1
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	0e 94 3d 0b 	call	0x167a	; 0x167a <GPIO_writePin>
    12d2:	0a c0       	rjmp	.+20     	; 0x12e8 <DcMotor_Rotate+0x82>
		break;
	case A_CW:
		GPIO_writePin(PORTA_ID, PIN0_ID, LOGIC_LOW);  /* PB0 = 0 */
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	0e 94 3d 0b 	call	0x167a	; 0x167a <GPIO_writePin>
		GPIO_writePin(PORTA_ID, PIN1_ID, LOGIC_HIGH); /* PB1 = 1 */
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	61 e0       	ldi	r22, 0x01	; 1
    12e2:	41 e0       	ldi	r20, 0x01	; 1
    12e4:	0e 94 3d 0b 	call	0x167a	; 0x167a <GPIO_writePin>
		break;
	}

	switch (speed)
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	3d 83       	std	Y+5, r19	; 0x05
    12f0:	2c 83       	std	Y+4, r18	; 0x04
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	9d 81       	ldd	r25, Y+5	; 0x05
    12f6:	82 33       	cpi	r24, 0x32	; 50
    12f8:	91 05       	cpc	r25, r1
    12fa:	f9 f0       	breq	.+62     	; 0x133a <DcMotor_Rotate+0xd4>
    12fc:	2c 81       	ldd	r18, Y+4	; 0x04
    12fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1300:	23 33       	cpi	r18, 0x33	; 51
    1302:	31 05       	cpc	r19, r1
    1304:	54 f4       	brge	.+20     	; 0x131a <DcMotor_Rotate+0xb4>
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	9d 81       	ldd	r25, Y+5	; 0x05
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	89 f0       	breq	.+34     	; 0x1330 <DcMotor_Rotate+0xca>
    130e:	2c 81       	ldd	r18, Y+4	; 0x04
    1310:	3d 81       	ldd	r19, Y+5	; 0x05
    1312:	29 31       	cpi	r18, 0x19	; 25
    1314:	31 05       	cpc	r19, r1
    1316:	71 f0       	breq	.+28     	; 0x1334 <DcMotor_Rotate+0xce>
    1318:	18 c0       	rjmp	.+48     	; 0x134a <DcMotor_Rotate+0xe4>
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	8b 34       	cpi	r24, 0x4B	; 75
    1320:	91 05       	cpc	r25, r1
    1322:	71 f0       	breq	.+28     	; 0x1340 <DcMotor_Rotate+0xda>
    1324:	2c 81       	ldd	r18, Y+4	; 0x04
    1326:	3d 81       	ldd	r19, Y+5	; 0x05
    1328:	24 36       	cpi	r18, 0x64	; 100
    132a:	31 05       	cpc	r19, r1
    132c:	61 f0       	breq	.+24     	; 0x1346 <DcMotor_Rotate+0xe0>
    132e:	0d c0       	rjmp	.+26     	; 0x134a <DcMotor_Rotate+0xe4>
	{
	case 0:
		set_duty_cycle = 0;
    1330:	19 82       	std	Y+1, r1	; 0x01
    1332:	0b c0       	rjmp	.+22     	; 0x134a <DcMotor_Rotate+0xe4>
		break;
	case 25:
		set_duty_cycle = 64;
    1334:	80 e4       	ldi	r24, 0x40	; 64
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	08 c0       	rjmp	.+16     	; 0x134a <DcMotor_Rotate+0xe4>
		break;
	case 50:
		set_duty_cycle = 128;
    133a:	80 e8       	ldi	r24, 0x80	; 128
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	05 c0       	rjmp	.+10     	; 0x134a <DcMotor_Rotate+0xe4>
		break;
	case 75:
		set_duty_cycle = 192;
    1340:	80 ec       	ldi	r24, 0xC0	; 192
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DcMotor_Rotate+0xe4>
		break;
	case 100:
		set_duty_cycle = 255;
    1346:	8f ef       	ldi	r24, 0xFF	; 255
    1348:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	/* run PWM with the needed duty cycle */

	PWM_Timer0_Start(set_duty_cycle);
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <PWM_Timer0_Start>
}
    1350:	27 96       	adiw	r28, 0x07	; 7
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <EEPROM_writeByte+0x6>
    1368:	00 d0       	rcall	.+0      	; 0x136a <EEPROM_writeByte+0x8>
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	9a 83       	std	Y+2, r25	; 0x02
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	6b 83       	std	Y+3, r22	; 0x03
    /* Send the Start Bit */
    TWI_start();
    1374:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1378:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TWI_getStatus>
    137c:	88 30       	cpi	r24, 0x08	; 8
    137e:	11 f0       	breq	.+4      	; 0x1384 <EEPROM_writeByte+0x22>
        return ERROR;
    1380:	1c 82       	std	Y+4, r1	; 0x04
    1382:	28 c0       	rjmp	.+80     	; 0x13d4 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700) >> 7)));
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	80 70       	andi	r24, 0x00	; 0
    138a:	97 70       	andi	r25, 0x07	; 7
    138c:	88 0f       	add	r24, r24
    138e:	89 2f       	mov	r24, r25
    1390:	88 1f       	adc	r24, r24
    1392:	99 0b       	sbc	r25, r25
    1394:	91 95       	neg	r25
    1396:	80 6a       	ori	r24, 0xA0	; 160
    1398:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    139c:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TWI_getStatus>
    13a0:	88 31       	cpi	r24, 0x18	; 24
    13a2:	11 f0       	breq	.+4      	; 0x13a8 <EEPROM_writeByte+0x46>
        return ERROR;
    13a4:	1c 82       	std	Y+4, r1	; 0x04
    13a6:	16 c0       	rjmp	.+44     	; 0x13d4 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    13ae:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TWI_getStatus>
    13b2:	88 32       	cpi	r24, 0x28	; 40
    13b4:	11 f0       	breq	.+4      	; 0x13ba <EEPROM_writeByte+0x58>
        return ERROR;
    13b6:	1c 82       	std	Y+4, r1	; 0x04
    13b8:	0d c0       	rjmp	.+26     	; 0x13d4 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    13c0:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TWI_getStatus>
    13c4:	88 32       	cpi	r24, 0x28	; 40
    13c6:	11 f0       	breq	.+4      	; 0x13cc <EEPROM_writeByte+0x6a>
        return ERROR;
    13c8:	1c 82       	std	Y+4, r1	; 0x04
    13ca:	04 c0       	rjmp	.+8      	; 0x13d4 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    13cc:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <TWI_stop>

    return SUCCESS;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	8c 83       	std	Y+4, r24	; 0x04
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <EEPROM_readByte+0x6>
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <EEPROM_readByte+0x8>
    13ec:	0f 92       	push	r0
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	9a 83       	std	Y+2, r25	; 0x02
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	7c 83       	std	Y+4, r23	; 0x04
    13f8:	6b 83       	std	Y+3, r22	; 0x03
    /* Send the Start Bit */
    TWI_start();
    13fa:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    13fe:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TWI_getStatus>
    1402:	88 30       	cpi	r24, 0x08	; 8
    1404:	11 f0       	breq	.+4      	; 0x140a <EEPROM_readByte+0x26>
        return ERROR;
    1406:	1d 82       	std	Y+5, r1	; 0x05
    1408:	44 c0       	rjmp	.+136    	; 0x1492 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700) >> 7)));
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02
    140e:	80 70       	andi	r24, 0x00	; 0
    1410:	97 70       	andi	r25, 0x07	; 7
    1412:	88 0f       	add	r24, r24
    1414:	89 2f       	mov	r24, r25
    1416:	88 1f       	adc	r24, r24
    1418:	99 0b       	sbc	r25, r25
    141a:	91 95       	neg	r25
    141c:	80 6a       	ori	r24, 0xA0	; 160
    141e:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1422:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TWI_getStatus>
    1426:	88 31       	cpi	r24, 0x18	; 24
    1428:	11 f0       	breq	.+4      	; 0x142e <EEPROM_readByte+0x4a>
        return ERROR;
    142a:	1d 82       	std	Y+5, r1	; 0x05
    142c:	32 c0       	rjmp	.+100    	; 0x1492 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1434:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TWI_getStatus>
    1438:	88 32       	cpi	r24, 0x28	; 40
    143a:	11 f0       	breq	.+4      	; 0x1440 <EEPROM_readByte+0x5c>
        return ERROR;
    143c:	1d 82       	std	Y+5, r1	; 0x05
    143e:	29 c0       	rjmp	.+82     	; 0x1492 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    1440:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1444:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TWI_getStatus>
    1448:	80 31       	cpi	r24, 0x10	; 16
    144a:	11 f0       	breq	.+4      	; 0x1450 <EEPROM_readByte+0x6c>
        return ERROR;
    144c:	1d 82       	std	Y+5, r1	; 0x05
    144e:	21 c0       	rjmp	.+66     	; 0x1492 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700) >> 7) | 1));
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	9a 81       	ldd	r25, Y+2	; 0x02
    1454:	80 70       	andi	r24, 0x00	; 0
    1456:	97 70       	andi	r25, 0x07	; 7
    1458:	88 0f       	add	r24, r24
    145a:	89 2f       	mov	r24, r25
    145c:	88 1f       	adc	r24, r24
    145e:	99 0b       	sbc	r25, r25
    1460:	91 95       	neg	r25
    1462:	81 6a       	ori	r24, 0xA1	; 161
    1464:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1468:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TWI_getStatus>
    146c:	80 34       	cpi	r24, 0x40	; 64
    146e:	11 f0       	breq	.+4      	; 0x1474 <EEPROM_readByte+0x90>
        return ERROR;
    1470:	1d 82       	std	Y+5, r1	; 0x05
    1472:	0f c0       	rjmp	.+30     	; 0x1492 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1474:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <TWI_readByteWithNACK>
    1478:	eb 81       	ldd	r30, Y+3	; 0x03
    147a:	fc 81       	ldd	r31, Y+4	; 0x04
    147c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    147e:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TWI_getStatus>
    1482:	88 35       	cpi	r24, 0x58	; 88
    1484:	11 f0       	breq	.+4      	; 0x148a <EEPROM_readByte+0xa6>
        return ERROR;
    1486:	1d 82       	std	Y+5, r1	; 0x05
    1488:	04 c0       	rjmp	.+8      	; 0x1492 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    148a:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <TWI_stop>

    return SUCCESS;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	8d 83       	std	Y+5, r24	; 0x05
    1492:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <GPIO_setupPinDirection+0x6>
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <GPIO_setupPinDirection+0x8>
    14ac:	0f 92       	push	r0
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	6a 83       	std	Y+2, r22	; 0x02
    14b6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	88 30       	cpi	r24, 0x08	; 8
    14bc:	08 f0       	brcs	.+2      	; 0x14c0 <GPIO_setupPinDirection+0x1c>
    14be:	d5 c0       	rjmp	.+426    	; 0x166a <GPIO_setupPinDirection+0x1c6>
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	84 30       	cpi	r24, 0x04	; 4
    14c4:	08 f0       	brcs	.+2      	; 0x14c8 <GPIO_setupPinDirection+0x24>
    14c6:	d1 c0       	rjmp	.+418    	; 0x166a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	3d 83       	std	Y+5, r19	; 0x05
    14d0:	2c 83       	std	Y+4, r18	; 0x04
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	9d 81       	ldd	r25, Y+5	; 0x05
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	91 05       	cpc	r25, r1
    14da:	09 f4       	brne	.+2      	; 0x14de <GPIO_setupPinDirection+0x3a>
    14dc:	43 c0       	rjmp	.+134    	; 0x1564 <GPIO_setupPinDirection+0xc0>
    14de:	2c 81       	ldd	r18, Y+4	; 0x04
    14e0:	3d 81       	ldd	r19, Y+5	; 0x05
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <GPIO_setupPinDirection+0x4e>
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	9d 81       	ldd	r25, Y+5	; 0x05
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	71 f0       	breq	.+28     	; 0x150c <GPIO_setupPinDirection+0x68>
    14f0:	bc c0       	rjmp	.+376    	; 0x166a <GPIO_setupPinDirection+0x1c6>
    14f2:	2c 81       	ldd	r18, Y+4	; 0x04
    14f4:	3d 81       	ldd	r19, Y+5	; 0x05
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	09 f4       	brne	.+2      	; 0x14fe <GPIO_setupPinDirection+0x5a>
    14fc:	5f c0       	rjmp	.+190    	; 0x15bc <GPIO_setupPinDirection+0x118>
    14fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1500:	9d 81       	ldd	r25, Y+5	; 0x05
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	91 05       	cpc	r25, r1
    1506:	09 f4       	brne	.+2      	; 0x150a <GPIO_setupPinDirection+0x66>
    1508:	85 c0       	rjmp	.+266    	; 0x1614 <GPIO_setupPinDirection+0x170>
    150a:	af c0       	rjmp	.+350    	; 0x166a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	a1 f4       	brne	.+40     	; 0x153a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1512:	aa e3       	ldi	r26, 0x3A	; 58
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	ea e3       	ldi	r30, 0x3A	; 58
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <GPIO_setupPinDirection+0x8c>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <GPIO_setupPinDirection+0x88>
    1534:	84 2b       	or	r24, r20
    1536:	8c 93       	st	X, r24
    1538:	98 c0       	rjmp	.+304    	; 0x166a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    153a:	aa e3       	ldi	r26, 0x3A	; 58
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	ea e3       	ldi	r30, 0x3A	; 58
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <GPIO_setupPinDirection+0xb4>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <GPIO_setupPinDirection+0xb0>
    155c:	80 95       	com	r24
    155e:	84 23       	and	r24, r20
    1560:	8c 93       	st	X, r24
    1562:	83 c0       	rjmp	.+262    	; 0x166a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	a1 f4       	brne	.+40     	; 0x1592 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    156a:	a7 e3       	ldi	r26, 0x37	; 55
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e7 e3       	ldi	r30, 0x37	; 55
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	48 2f       	mov	r20, r24
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <GPIO_setupPinDirection+0xe4>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <GPIO_setupPinDirection+0xe0>
    158c:	84 2b       	or	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	6c c0       	rjmp	.+216    	; 0x166a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1592:	a7 e3       	ldi	r26, 0x37	; 55
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e7 e3       	ldi	r30, 0x37	; 55
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	02 2e       	mov	r0, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <GPIO_setupPinDirection+0x10c>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	0a 94       	dec	r0
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <GPIO_setupPinDirection+0x108>
    15b4:	80 95       	com	r24
    15b6:	84 23       	and	r24, r20
    15b8:	8c 93       	st	X, r24
    15ba:	57 c0       	rjmp	.+174    	; 0x166a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	a1 f4       	brne	.+40     	; 0x15ea <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    15c2:	a4 e3       	ldi	r26, 0x34	; 52
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e4 e3       	ldi	r30, 0x34	; 52
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	48 2f       	mov	r20, r24
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 2e       	mov	r0, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <GPIO_setupPinDirection+0x13c>
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <GPIO_setupPinDirection+0x138>
    15e4:	84 2b       	or	r24, r20
    15e6:	8c 93       	st	X, r24
    15e8:	40 c0       	rjmp	.+128    	; 0x166a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    15ea:	a4 e3       	ldi	r26, 0x34	; 52
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e4 e3       	ldi	r30, 0x34	; 52
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	48 2f       	mov	r20, r24
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 2e       	mov	r0, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <GPIO_setupPinDirection+0x164>
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	0a 94       	dec	r0
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <GPIO_setupPinDirection+0x160>
    160c:	80 95       	com	r24
    160e:	84 23       	and	r24, r20
    1610:	8c 93       	st	X, r24
    1612:	2b c0       	rjmp	.+86     	; 0x166a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	a1 f4       	brne	.+40     	; 0x1642 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    161a:	a1 e3       	ldi	r26, 0x31	; 49
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e1 e3       	ldi	r30, 0x31	; 49
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	48 2f       	mov	r20, r24
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 2e       	mov	r0, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <GPIO_setupPinDirection+0x194>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <GPIO_setupPinDirection+0x190>
    163c:	84 2b       	or	r24, r20
    163e:	8c 93       	st	X, r24
    1640:	14 c0       	rjmp	.+40     	; 0x166a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1642:	a1 e3       	ldi	r26, 0x31	; 49
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e1 e3       	ldi	r30, 0x31	; 49
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <GPIO_setupPinDirection+0x1bc>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <GPIO_setupPinDirection+0x1b8>
    1664:	80 95       	com	r24
    1666:	84 23       	and	r24, r20
    1668:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	00 d0       	rcall	.+0      	; 0x1680 <GPIO_writePin+0x6>
    1680:	00 d0       	rcall	.+0      	; 0x1682 <GPIO_writePin+0x8>
    1682:	0f 92       	push	r0
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	6a 83       	std	Y+2, r22	; 0x02
    168c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	88 30       	cpi	r24, 0x08	; 8
    1692:	08 f0       	brcs	.+2      	; 0x1696 <GPIO_writePin+0x1c>
    1694:	d5 c0       	rjmp	.+426    	; 0x1840 <GPIO_writePin+0x1c6>
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	84 30       	cpi	r24, 0x04	; 4
    169a:	08 f0       	brcs	.+2      	; 0x169e <GPIO_writePin+0x24>
    169c:	d1 c0       	rjmp	.+418    	; 0x1840 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	3d 83       	std	Y+5, r19	; 0x05
    16a6:	2c 83       	std	Y+4, r18	; 0x04
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	91 05       	cpc	r25, r1
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <GPIO_writePin+0x3a>
    16b2:	43 c0       	rjmp	.+134    	; 0x173a <GPIO_writePin+0xc0>
    16b4:	2c 81       	ldd	r18, Y+4	; 0x04
    16b6:	3d 81       	ldd	r19, Y+5	; 0x05
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	31 05       	cpc	r19, r1
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <GPIO_writePin+0x4e>
    16be:	8c 81       	ldd	r24, Y+4	; 0x04
    16c0:	9d 81       	ldd	r25, Y+5	; 0x05
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	71 f0       	breq	.+28     	; 0x16e2 <GPIO_writePin+0x68>
    16c6:	bc c0       	rjmp	.+376    	; 0x1840 <GPIO_writePin+0x1c6>
    16c8:	2c 81       	ldd	r18, Y+4	; 0x04
    16ca:	3d 81       	ldd	r19, Y+5	; 0x05
    16cc:	22 30       	cpi	r18, 0x02	; 2
    16ce:	31 05       	cpc	r19, r1
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <GPIO_writePin+0x5a>
    16d2:	5f c0       	rjmp	.+190    	; 0x1792 <GPIO_writePin+0x118>
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	9d 81       	ldd	r25, Y+5	; 0x05
    16d8:	83 30       	cpi	r24, 0x03	; 3
    16da:	91 05       	cpc	r25, r1
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <GPIO_writePin+0x66>
    16de:	85 c0       	rjmp	.+266    	; 0x17ea <GPIO_writePin+0x170>
    16e0:	af c0       	rjmp	.+350    	; 0x1840 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	a1 f4       	brne	.+40     	; 0x1710 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    16e8:	ab e3       	ldi	r26, 0x3B	; 59
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	eb e3       	ldi	r30, 0x3B	; 59
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <GPIO_writePin+0x8c>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <GPIO_writePin+0x88>
    170a:	84 2b       	or	r24, r20
    170c:	8c 93       	st	X, r24
    170e:	98 c0       	rjmp	.+304    	; 0x1840 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1710:	ab e3       	ldi	r26, 0x3B	; 59
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	eb e3       	ldi	r30, 0x3B	; 59
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	48 2f       	mov	r20, r24
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 2e       	mov	r0, r18
    1728:	02 c0       	rjmp	.+4      	; 0x172e <GPIO_writePin+0xb4>
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	0a 94       	dec	r0
    1730:	e2 f7       	brpl	.-8      	; 0x172a <GPIO_writePin+0xb0>
    1732:	80 95       	com	r24
    1734:	84 23       	and	r24, r20
    1736:	8c 93       	st	X, r24
    1738:	83 c0       	rjmp	.+262    	; 0x1840 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	a1 f4       	brne	.+40     	; 0x1768 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1740:	a8 e3       	ldi	r26, 0x38	; 56
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e8 e3       	ldi	r30, 0x38	; 56
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	48 2f       	mov	r20, r24
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	02 2e       	mov	r0, r18
    1758:	02 c0       	rjmp	.+4      	; 0x175e <GPIO_writePin+0xe4>
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	0a 94       	dec	r0
    1760:	e2 f7       	brpl	.-8      	; 0x175a <GPIO_writePin+0xe0>
    1762:	84 2b       	or	r24, r20
    1764:	8c 93       	st	X, r24
    1766:	6c c0       	rjmp	.+216    	; 0x1840 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1768:	a8 e3       	ldi	r26, 0x38	; 56
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e8 e3       	ldi	r30, 0x38	; 56
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	48 2f       	mov	r20, r24
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 2e       	mov	r0, r18
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <GPIO_writePin+0x10c>
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	0a 94       	dec	r0
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <GPIO_writePin+0x108>
    178a:	80 95       	com	r24
    178c:	84 23       	and	r24, r20
    178e:	8c 93       	st	X, r24
    1790:	57 c0       	rjmp	.+174    	; 0x1840 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	a1 f4       	brne	.+40     	; 0x17c0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1798:	a5 e3       	ldi	r26, 0x35	; 53
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e5 e3       	ldi	r30, 0x35	; 53
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	48 2f       	mov	r20, r24
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	02 2e       	mov	r0, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <GPIO_writePin+0x13c>
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	0a 94       	dec	r0
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <GPIO_writePin+0x138>
    17ba:	84 2b       	or	r24, r20
    17bc:	8c 93       	st	X, r24
    17be:	40 c0       	rjmp	.+128    	; 0x1840 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    17c0:	a5 e3       	ldi	r26, 0x35	; 53
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e5 e3       	ldi	r30, 0x35	; 53
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	48 2f       	mov	r20, r24
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 2e       	mov	r0, r18
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <GPIO_writePin+0x164>
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	0a 94       	dec	r0
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <GPIO_writePin+0x160>
    17e2:	80 95       	com	r24
    17e4:	84 23       	and	r24, r20
    17e6:	8c 93       	st	X, r24
    17e8:	2b c0       	rjmp	.+86     	; 0x1840 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	a1 f4       	brne	.+40     	; 0x1818 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    17f0:	a2 e3       	ldi	r26, 0x32	; 50
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e2 e3       	ldi	r30, 0x32	; 50
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <GPIO_writePin+0x194>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <GPIO_writePin+0x190>
    1812:	84 2b       	or	r24, r20
    1814:	8c 93       	st	X, r24
    1816:	14 c0       	rjmp	.+40     	; 0x1840 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1818:	a2 e3       	ldi	r26, 0x32	; 50
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e2 e3       	ldi	r30, 0x32	; 50
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	48 2f       	mov	r20, r24
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	02 2e       	mov	r0, r18
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <GPIO_writePin+0x1bc>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	0a 94       	dec	r0
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <GPIO_writePin+0x1b8>
    183a:	80 95       	com	r24
    183c:	84 23       	and	r24, r20
    183e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	00 d0       	rcall	.+0      	; 0x1856 <GPIO_readPin+0x6>
    1856:	00 d0       	rcall	.+0      	; 0x1858 <GPIO_readPin+0x8>
    1858:	0f 92       	push	r0
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	8a 83       	std	Y+2, r24	; 0x02
    1860:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1862:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	88 30       	cpi	r24, 0x08	; 8
    1868:	08 f0       	brcs	.+2      	; 0x186c <GPIO_readPin+0x1c>
    186a:	84 c0       	rjmp	.+264    	; 0x1974 <GPIO_readPin+0x124>
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	84 30       	cpi	r24, 0x04	; 4
    1870:	08 f0       	brcs	.+2      	; 0x1874 <GPIO_readPin+0x24>
    1872:	80 c0       	rjmp	.+256    	; 0x1974 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	3d 83       	std	Y+5, r19	; 0x05
    187c:	2c 83       	std	Y+4, r18	; 0x04
    187e:	4c 81       	ldd	r20, Y+4	; 0x04
    1880:	5d 81       	ldd	r21, Y+5	; 0x05
    1882:	41 30       	cpi	r20, 0x01	; 1
    1884:	51 05       	cpc	r21, r1
    1886:	79 f1       	breq	.+94     	; 0x18e6 <GPIO_readPin+0x96>
    1888:	8c 81       	ldd	r24, Y+4	; 0x04
    188a:	9d 81       	ldd	r25, Y+5	; 0x05
    188c:	82 30       	cpi	r24, 0x02	; 2
    188e:	91 05       	cpc	r25, r1
    1890:	34 f4       	brge	.+12     	; 0x189e <GPIO_readPin+0x4e>
    1892:	2c 81       	ldd	r18, Y+4	; 0x04
    1894:	3d 81       	ldd	r19, Y+5	; 0x05
    1896:	21 15       	cp	r18, r1
    1898:	31 05       	cpc	r19, r1
    189a:	69 f0       	breq	.+26     	; 0x18b6 <GPIO_readPin+0x66>
    189c:	6b c0       	rjmp	.+214    	; 0x1974 <GPIO_readPin+0x124>
    189e:	4c 81       	ldd	r20, Y+4	; 0x04
    18a0:	5d 81       	ldd	r21, Y+5	; 0x05
    18a2:	42 30       	cpi	r20, 0x02	; 2
    18a4:	51 05       	cpc	r21, r1
    18a6:	b9 f1       	breq	.+110    	; 0x1916 <GPIO_readPin+0xc6>
    18a8:	8c 81       	ldd	r24, Y+4	; 0x04
    18aa:	9d 81       	ldd	r25, Y+5	; 0x05
    18ac:	83 30       	cpi	r24, 0x03	; 3
    18ae:	91 05       	cpc	r25, r1
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <GPIO_readPin+0x64>
    18b2:	49 c0       	rjmp	.+146    	; 0x1946 <GPIO_readPin+0xf6>
    18b4:	5f c0       	rjmp	.+190    	; 0x1974 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    18b6:	e9 e3       	ldi	r30, 0x39	; 57
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a9 01       	movw	r20, r18
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <GPIO_readPin+0x7e>
    18ca:	55 95       	asr	r21
    18cc:	47 95       	ror	r20
    18ce:	8a 95       	dec	r24
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <GPIO_readPin+0x7a>
    18d2:	ca 01       	movw	r24, r20
    18d4:	81 70       	andi	r24, 0x01	; 1
    18d6:	90 70       	andi	r25, 0x00	; 0
    18d8:	88 23       	and	r24, r24
    18da:	19 f0       	breq	.+6      	; 0x18e2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	89 83       	std	Y+1, r24	; 0x01
    18e0:	49 c0       	rjmp	.+146    	; 0x1974 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18e2:	19 82       	std	Y+1, r1	; 0x01
    18e4:	47 c0       	rjmp	.+142    	; 0x1974 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    18e6:	e6 e3       	ldi	r30, 0x36	; 54
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	a9 01       	movw	r20, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <GPIO_readPin+0xae>
    18fa:	55 95       	asr	r21
    18fc:	47 95       	ror	r20
    18fe:	8a 95       	dec	r24
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <GPIO_readPin+0xaa>
    1902:	ca 01       	movw	r24, r20
    1904:	81 70       	andi	r24, 0x01	; 1
    1906:	90 70       	andi	r25, 0x00	; 0
    1908:	88 23       	and	r24, r24
    190a:	19 f0       	breq	.+6      	; 0x1912 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	31 c0       	rjmp	.+98     	; 0x1974 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1912:	19 82       	std	Y+1, r1	; 0x01
    1914:	2f c0       	rjmp	.+94     	; 0x1974 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1916:	e3 e3       	ldi	r30, 0x33	; 51
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	88 2f       	mov	r24, r24
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a9 01       	movw	r20, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <GPIO_readPin+0xde>
    192a:	55 95       	asr	r21
    192c:	47 95       	ror	r20
    192e:	8a 95       	dec	r24
    1930:	e2 f7       	brpl	.-8      	; 0x192a <GPIO_readPin+0xda>
    1932:	ca 01       	movw	r24, r20
    1934:	81 70       	andi	r24, 0x01	; 1
    1936:	90 70       	andi	r25, 0x00	; 0
    1938:	88 23       	and	r24, r24
    193a:	19 f0       	breq	.+6      	; 0x1942 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	19 c0       	rjmp	.+50     	; 0x1974 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1942:	19 82       	std	Y+1, r1	; 0x01
    1944:	17 c0       	rjmp	.+46     	; 0x1974 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1946:	e0 e3       	ldi	r30, 0x30	; 48
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	88 2f       	mov	r24, r24
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	a9 01       	movw	r20, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <GPIO_readPin+0x10e>
    195a:	55 95       	asr	r21
    195c:	47 95       	ror	r20
    195e:	8a 95       	dec	r24
    1960:	e2 f7       	brpl	.-8      	; 0x195a <GPIO_readPin+0x10a>
    1962:	ca 01       	movw	r24, r20
    1964:	81 70       	andi	r24, 0x01	; 1
    1966:	90 70       	andi	r25, 0x00	; 0
    1968:	88 23       	and	r24, r24
    196a:	19 f0       	breq	.+6      	; 0x1972 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	01 c0       	rjmp	.+2      	; 0x1974 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1972:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1974:	89 81       	ldd	r24, Y+1	; 0x01
}
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	00 d0       	rcall	.+0      	; 0x198c <GPIO_setupPortDirection+0x6>
    198c:	00 d0       	rcall	.+0      	; 0x198e <GPIO_setupPortDirection+0x8>
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	84 30       	cpi	r24, 0x04	; 4
    199a:	90 f5       	brcc	.+100    	; 0x1a00 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	3c 83       	std	Y+4, r19	; 0x04
    19a4:	2b 83       	std	Y+3, r18	; 0x03
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	9c 81       	ldd	r25, Y+4	; 0x04
    19aa:	81 30       	cpi	r24, 0x01	; 1
    19ac:	91 05       	cpc	r25, r1
    19ae:	d1 f0       	breq	.+52     	; 0x19e4 <GPIO_setupPortDirection+0x5e>
    19b0:	2b 81       	ldd	r18, Y+3	; 0x03
    19b2:	3c 81       	ldd	r19, Y+4	; 0x04
    19b4:	22 30       	cpi	r18, 0x02	; 2
    19b6:	31 05       	cpc	r19, r1
    19b8:	2c f4       	brge	.+10     	; 0x19c4 <GPIO_setupPortDirection+0x3e>
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	9c 81       	ldd	r25, Y+4	; 0x04
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	61 f0       	breq	.+24     	; 0x19da <GPIO_setupPortDirection+0x54>
    19c2:	1e c0       	rjmp	.+60     	; 0x1a00 <GPIO_setupPortDirection+0x7a>
    19c4:	2b 81       	ldd	r18, Y+3	; 0x03
    19c6:	3c 81       	ldd	r19, Y+4	; 0x04
    19c8:	22 30       	cpi	r18, 0x02	; 2
    19ca:	31 05       	cpc	r19, r1
    19cc:	81 f0       	breq	.+32     	; 0x19ee <GPIO_setupPortDirection+0x68>
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	9c 81       	ldd	r25, Y+4	; 0x04
    19d2:	83 30       	cpi	r24, 0x03	; 3
    19d4:	91 05       	cpc	r25, r1
    19d6:	81 f0       	breq	.+32     	; 0x19f8 <GPIO_setupPortDirection+0x72>
    19d8:	13 c0       	rjmp	.+38     	; 0x1a00 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19da:	ea e3       	ldi	r30, 0x3A	; 58
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	80 83       	st	Z, r24
    19e2:	0e c0       	rjmp	.+28     	; 0x1a00 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19e4:	e7 e3       	ldi	r30, 0x37	; 55
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	80 83       	st	Z, r24
    19ec:	09 c0       	rjmp	.+18     	; 0x1a00 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19ee:	e4 e3       	ldi	r30, 0x34	; 52
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	80 83       	st	Z, r24
    19f6:	04 c0       	rjmp	.+8      	; 0x1a00 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19f8:	e1 e3       	ldi	r30, 0x31	; 49
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <GPIO_writePort+0x6>
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <GPIO_writePort+0x8>
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	84 30       	cpi	r24, 0x04	; 4
    1a22:	90 f5       	brcc	.+100    	; 0x1a88 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	3c 83       	std	Y+4, r19	; 0x04
    1a2c:	2b 83       	std	Y+3, r18	; 0x03
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	81 30       	cpi	r24, 0x01	; 1
    1a34:	91 05       	cpc	r25, r1
    1a36:	d1 f0       	breq	.+52     	; 0x1a6c <GPIO_writePort+0x5e>
    1a38:	2b 81       	ldd	r18, Y+3	; 0x03
    1a3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a3c:	22 30       	cpi	r18, 0x02	; 2
    1a3e:	31 05       	cpc	r19, r1
    1a40:	2c f4       	brge	.+10     	; 0x1a4c <GPIO_writePort+0x3e>
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	9c 81       	ldd	r25, Y+4	; 0x04
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	61 f0       	breq	.+24     	; 0x1a62 <GPIO_writePort+0x54>
    1a4a:	1e c0       	rjmp	.+60     	; 0x1a88 <GPIO_writePort+0x7a>
    1a4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a50:	22 30       	cpi	r18, 0x02	; 2
    1a52:	31 05       	cpc	r19, r1
    1a54:	81 f0       	breq	.+32     	; 0x1a76 <GPIO_writePort+0x68>
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5a:	83 30       	cpi	r24, 0x03	; 3
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	81 f0       	breq	.+32     	; 0x1a80 <GPIO_writePort+0x72>
    1a60:	13 c0       	rjmp	.+38     	; 0x1a88 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a62:	eb e3       	ldi	r30, 0x3B	; 59
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	80 83       	st	Z, r24
    1a6a:	0e c0       	rjmp	.+28     	; 0x1a88 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a6c:	e8 e3       	ldi	r30, 0x38	; 56
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	80 83       	st	Z, r24
    1a74:	09 c0       	rjmp	.+18     	; 0x1a88 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a76:	e5 e3       	ldi	r30, 0x35	; 53
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	80 83       	st	Z, r24
    1a7e:	04 c0       	rjmp	.+8      	; 0x1a88 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a80:	e2 e3       	ldi	r30, 0x32	; 50
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <GPIO_readPort+0x6>
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <GPIO_readPort+0x8>
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1aa4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	84 30       	cpi	r24, 0x04	; 4
    1aaa:	90 f5       	brcc	.+100    	; 0x1b10 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	3c 83       	std	Y+4, r19	; 0x04
    1ab4:	2b 83       	std	Y+3, r18	; 0x03
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	91 05       	cpc	r25, r1
    1abe:	d1 f0       	breq	.+52     	; 0x1af4 <GPIO_readPort+0x5e>
    1ac0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac4:	22 30       	cpi	r18, 0x02	; 2
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	2c f4       	brge	.+10     	; 0x1ad4 <GPIO_readPort+0x3e>
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	61 f0       	breq	.+24     	; 0x1aea <GPIO_readPort+0x54>
    1ad2:	1e c0       	rjmp	.+60     	; 0x1b10 <GPIO_readPort+0x7a>
    1ad4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad8:	22 30       	cpi	r18, 0x02	; 2
    1ada:	31 05       	cpc	r19, r1
    1adc:	81 f0       	breq	.+32     	; 0x1afe <GPIO_readPort+0x68>
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	83 30       	cpi	r24, 0x03	; 3
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	81 f0       	breq	.+32     	; 0x1b08 <GPIO_readPort+0x72>
    1ae8:	13 c0       	rjmp	.+38     	; 0x1b10 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1aea:	e9 e3       	ldi	r30, 0x39	; 57
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	89 83       	std	Y+1, r24	; 0x01
    1af2:	0e c0       	rjmp	.+28     	; 0x1b10 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1af4:	e6 e3       	ldi	r30, 0x36	; 54
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	89 83       	std	Y+1, r24	; 0x01
    1afc:	09 c0       	rjmp	.+18     	; 0x1b10 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1afe:	e3 e3       	ldi	r30, 0x33	; 51
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	04 c0       	rjmp	.+8      	; 0x1b10 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1b08:	e0 e3       	ldi	r30, 0x30	; 48
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <PWM_Timer0_Start>:
 * Setup the direction for OC0 as output pin through the GPIO driver.
 * The generated PWM signal frequency will be 500Hz to control the DC
 * Motor speed.
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	0f 92       	push	r0
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	89 83       	std	Y+1, r24	; 0x01
	/* set initial value */

	TCNT0 = 0;
    1b2c:	e2 e5       	ldi	r30, 0x52	; 82
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	10 82       	st	Z, r1

	/* set compare value */

	OCR0 = duty_cycle;
    1b32:	ec e5       	ldi	r30, 0x5C	; 92
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	80 83       	st	Z, r24

	/* set OC0/PB3 as output pin */
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	63 e0       	ldi	r22, 0x03	; 3
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <GPIO_setupPinDirection>
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */

	TCCR0 = (1 << WGM01) | (1 << WGM00) | (1 << COM01) | (1 << CS01);
    1b44:	e3 e5       	ldi	r30, 0x53	; 83
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	8a e6       	ldi	r24, 0x6A	; 106
    1b4a:	80 83       	st	Z, r24
}
    1b4c:	0f 90       	pop	r0
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    1b54:	1f 92       	push	r1
    1b56:	0f 92       	push	r0
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	0f 92       	push	r0
    1b5c:	11 24       	eor	r1, r1
    1b5e:	2f 93       	push	r18
    1b60:	3f 93       	push	r19
    1b62:	4f 93       	push	r20
    1b64:	5f 93       	push	r21
    1b66:	6f 93       	push	r22
    1b68:	7f 93       	push	r23
    1b6a:	8f 93       	push	r24
    1b6c:	9f 93       	push	r25
    1b6e:	af 93       	push	r26
    1b70:	bf 93       	push	r27
    1b72:	ef 93       	push	r30
    1b74:	ff 93       	push	r31
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    1b7e:	80 91 77 00 	lds	r24, 0x0077
    1b82:	90 91 78 00 	lds	r25, 0x0078
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	29 f0       	breq	.+10     	; 0x1b94 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b8a:	e0 91 77 00 	lds	r30, 0x0077
    1b8e:	f0 91 78 00 	lds	r31, 0x0078
    1b92:	09 95       	icall
	}
}
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	ff 91       	pop	r31
    1b9a:	ef 91       	pop	r30
    1b9c:	bf 91       	pop	r27
    1b9e:	af 91       	pop	r26
    1ba0:	9f 91       	pop	r25
    1ba2:	8f 91       	pop	r24
    1ba4:	7f 91       	pop	r23
    1ba6:	6f 91       	pop	r22
    1ba8:	5f 91       	pop	r21
    1baa:	4f 91       	pop	r20
    1bac:	3f 91       	pop	r19
    1bae:	2f 91       	pop	r18
    1bb0:	0f 90       	pop	r0
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	0f 90       	pop	r0
    1bb6:	1f 90       	pop	r1
    1bb8:	18 95       	reti

00001bba <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1bba:	1f 92       	push	r1
    1bbc:	0f 92       	push	r0
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	0f 92       	push	r0
    1bc2:	11 24       	eor	r1, r1
    1bc4:	2f 93       	push	r18
    1bc6:	3f 93       	push	r19
    1bc8:	4f 93       	push	r20
    1bca:	5f 93       	push	r21
    1bcc:	6f 93       	push	r22
    1bce:	7f 93       	push	r23
    1bd0:	8f 93       	push	r24
    1bd2:	9f 93       	push	r25
    1bd4:	af 93       	push	r26
    1bd6:	bf 93       	push	r27
    1bd8:	ef 93       	push	r30
    1bda:	ff 93       	push	r31
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    1be4:	80 91 77 00 	lds	r24, 0x0077
    1be8:	90 91 78 00 	lds	r25, 0x0078
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	29 f0       	breq	.+10     	; 0x1bfa <__vector_7+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1bf0:	e0 91 77 00 	lds	r30, 0x0077
    1bf4:	f0 91 78 00 	lds	r31, 0x0078
    1bf8:	09 95       	icall
	}
}
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	ff 91       	pop	r31
    1c00:	ef 91       	pop	r30
    1c02:	bf 91       	pop	r27
    1c04:	af 91       	pop	r26
    1c06:	9f 91       	pop	r25
    1c08:	8f 91       	pop	r24
    1c0a:	7f 91       	pop	r23
    1c0c:	6f 91       	pop	r22
    1c0e:	5f 91       	pop	r21
    1c10:	4f 91       	pop	r20
    1c12:	3f 91       	pop	r19
    1c14:	2f 91       	pop	r18
    1c16:	0f 90       	pop	r0
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	0f 90       	pop	r0
    1c1c:	1f 90       	pop	r1
    1c1e:	18 95       	reti

00001c20 <Timer1_init>:
/* Description:
 * Function to initialize the Timer driver
 */

void Timer1_init(const Timer1_ConfigType *Config_Ptr)
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <Timer1_init+0x6>
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	9a 83       	std	Y+2, r25	; 0x02
    1c2c:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr->initial_value; /* Set timer1 initial value */
    1c2e:	ac e4       	ldi	r26, 0x4C	; 76
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e9 81       	ldd	r30, Y+1	; 0x01
    1c34:	fa 81       	ldd	r31, Y+2	; 0x02
    1c36:	80 81       	ld	r24, Z
    1c38:	91 81       	ldd	r25, Z+1	; 0x01
    1c3a:	11 96       	adiw	r26, 0x01	; 1
    1c3c:	9c 93       	st	X, r25
    1c3e:	8e 93       	st	-X, r24
	/* Configure timer control register TCCR1A
	 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
	 * 2. Disconnect OC1B  COM1B0=0 COM1B1=0
	 * 3. FOC1A=1 FOC1B=1 because these bits are only active in case non-pwm mode
	 */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B) | (1 << COM1A1);
    1c40:	ef e4       	ldi	r30, 0x4F	; 79
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	8c e8       	ldi	r24, 0x8C	; 140
    1c46:	80 83       	st	Z, r24

	if (Config_Ptr->mode == NORMAL)
    1c48:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4c:	85 81       	ldd	r24, Z+5	; 0x05
    1c4e:	88 23       	and	r24, r24
    1c50:	a1 f4       	brne	.+40     	; 0x1c7a <Timer1_init+0x5a>
	{
		TCCR1A = (TCCR1A & 0xFC) | (Config_Ptr->mode);
    1c52:	af e4       	ldi	r26, 0x4F	; 79
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	ef e4       	ldi	r30, 0x4F	; 79
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	98 2f       	mov	r25, r24
    1c5e:	9c 7f       	andi	r25, 0xFC	; 252
    1c60:	e9 81       	ldd	r30, Y+1	; 0x01
    1c62:	fa 81       	ldd	r31, Y+2	; 0x02
    1c64:	85 81       	ldd	r24, Z+5	; 0x05
    1c66:	89 2b       	or	r24, r25
    1c68:	8c 93       	st	X, r24
		TIMSK |= (1 << TOIE1);
    1c6a:	a9 e5       	ldi	r26, 0x59	; 89
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e9 e5       	ldi	r30, 0x59	; 89
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	84 60       	ori	r24, 0x04	; 4
    1c76:	8c 93       	st	X, r24
    1c78:	2a c0       	rjmp	.+84     	; 0x1cce <Timer1_init+0xae>
	}
	else if (Config_Ptr->mode == CTC)
    1c7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c7e:	85 81       	ldd	r24, Z+5	; 0x05
    1c80:	84 30       	cpi	r24, 0x04	; 4
    1c82:	29 f5       	brne	.+74     	; 0x1cce <Timer1_init+0xae>
	{
		TCCR1B = (TCCR1B & 0xE7) | ((Config_Ptr->mode) << 1);
    1c84:	ae e4       	ldi	r26, 0x4E	; 78
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	ee e4       	ldi	r30, 0x4E	; 78
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	28 2f       	mov	r18, r24
    1c90:	27 7e       	andi	r18, 0xE7	; 231
    1c92:	e9 81       	ldd	r30, Y+1	; 0x01
    1c94:	fa 81       	ldd	r31, Y+2	; 0x02
    1c96:	85 81       	ldd	r24, Z+5	; 0x05
    1c98:	88 2f       	mov	r24, r24
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	82 2b       	or	r24, r18
    1ca2:	8c 93       	st	X, r24

		GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1ca4:	83 e0       	ldi	r24, 0x03	; 3
    1ca6:	65 e0       	ldi	r22, 0x05	; 5
    1ca8:	41 e0       	ldi	r20, 0x01	; 1
    1caa:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <GPIO_setupPinDirection>

		OCR1A = Config_Ptr->compare_value; /* Set the compare value */
    1cae:	aa e4       	ldi	r26, 0x4A	; 74
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb6:	82 81       	ldd	r24, Z+2	; 0x02
    1cb8:	93 81       	ldd	r25, Z+3	; 0x03
    1cba:	11 96       	adiw	r26, 0x01	; 1
    1cbc:	9c 93       	st	X, r25
    1cbe:	8e 93       	st	-X, r24

		TIMSK |= (1 << OCIE1A);
    1cc0:	a9 e5       	ldi	r26, 0x59	; 89
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e9 e5       	ldi	r30, 0x59	; 89
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	80 61       	ori	r24, 0x10	; 16
    1ccc:	8c 93       	st	X, r24
	}

	/* choose the prescaler */

	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    1cce:	ae e4       	ldi	r26, 0x4E	; 78
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	ee e4       	ldi	r30, 0x4E	; 78
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	98 2f       	mov	r25, r24
    1cda:	98 7f       	andi	r25, 0xF8	; 248
    1cdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cde:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce0:	84 81       	ldd	r24, Z+4	; 0x04
    1ce2:	89 2b       	or	r24, r25
    1ce4:	8c 93       	st	X, r24

	SREG |= (1 << 7);
    1ce6:	af e5       	ldi	r26, 0x5F	; 95
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	ef e5       	ldi	r30, 0x5F	; 95
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	80 68       	ori	r24, 0x80	; 128
    1cf2:	8c 93       	st	X, r24
}
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <Timer1_deInit>:
/* Description:
 * Function to disable the Timer1
 */

void Timer1_deInit(void)
{
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1d06:	ef e4       	ldi	r30, 0x4F	; 79
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	10 82       	st	Z, r1
	TCCR1B = 0;
    1d0c:	ee e4       	ldi	r30, 0x4E	; 78
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	10 82       	st	Z, r1
	TCNT1 = 0;
    1d12:	ec e4       	ldi	r30, 0x4C	; 76
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	11 82       	std	Z+1, r1	; 0x01
    1d18:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1 << TOIE1);
    1d1a:	a9 e5       	ldi	r26, 0x59	; 89
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e9 e5       	ldi	r30, 0x59	; 89
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	8b 7f       	andi	r24, 0xFB	; 251
    1d26:	8c 93       	st	X, r24
	TIMSK &= ~(1 << OCIE1A);
    1d28:	a9 e5       	ldi	r26, 0x59	; 89
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e9 e5       	ldi	r30, 0x59	; 89
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	8f 7e       	andi	r24, 0xEF	; 239
    1d34:	8c 93       	st	X, r24
}
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <Timer1_setCallBack>:
/* Description:
 * Function to set the Call Back function address
 */

void Timer1_setCallBack(void (*a_ptr)(void))
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <Timer1_setCallBack+0x6>
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	9a 83       	std	Y+2, r25	; 0x02
    1d48:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4e:	90 93 78 00 	sts	0x0078, r25
    1d52:	80 93 77 00 	sts	0x0077, r24
}
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	08 95       	ret

00001d60 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <TWI_init+0x6>
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	9a 83       	std	Y+2, r25	; 0x02
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: Normal @ 100kbps
     * Fast Mode @ 400.000 kbps
     * using zero pre-scaler TWPS=00 and F_CPU=8Mhz */

    TWBR = Config_Ptr->bit_rate;
    1d6e:	a0 e2       	ldi	r26, 0x20	; 32
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e9 81       	ldd	r30, Y+1	; 0x01
    1d74:	fa 81       	ldd	r31, Y+2	; 0x02
    1d76:	81 81       	ldd	r24, Z+1	; 0x01
    1d78:	8c 93       	st	X, r24

    TWSR = 0x00;
    1d7a:	e1 e2       	ldi	r30, 0x21	; 33
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address :)
    1d80:	a2 e2       	ldi	r26, 0x22	; 34
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e9 81       	ldd	r30, Y+1	; 0x01
    1d86:	fa 81       	ldd	r31, Y+2	; 0x02
    1d88:	80 81       	ld	r24, Z
    1d8a:	8c 93       	st	X, r24

    TWCR = (1 << TWEN); /* enable TWI */
    1d8c:	e6 e5       	ldi	r30, 0x56	; 86
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	84 e0       	ldi	r24, 0x04	; 4
    1d92:	80 83       	st	Z, r24
}
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret

00001d9e <TWI_start>:

void TWI_start(void)
{
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before sending the start bit TWINT=1
     * send the start bit by TWSTA=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1da6:	e6 e5       	ldi	r30, 0x56	; 86
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	84 ea       	ldi	r24, 0xA4	; 164
    1dac:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while (BIT_IS_CLEAR(TWCR, TWINT))
    1dae:	e6 e5       	ldi	r30, 0x56	; 86
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	88 23       	and	r24, r24
    1db6:	dc f7       	brge	.-10     	; 0x1dae <TWI_start+0x10>
        ;
}
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <TWI_stop>:

void TWI_stop(void)
{
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before sending the stop bit TWINT=1
     * send the stop bit by TWSTO=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1dc6:	e6 e5       	ldi	r30, 0x56	; 86
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	84 e9       	ldi	r24, 0x94	; 148
    1dcc:	80 83       	st	Z, r24
}
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	0f 92       	push	r0
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1de0:	e3 e2       	ldi	r30, 0x23	; 35
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	80 83       	st	Z, r24
    /*
     * Clear the TWINT flag before sending the data TWINT=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1de8:	e6 e5       	ldi	r30, 0x56	; 86
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	84 e8       	ldi	r24, 0x84	; 132
    1dee:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while (BIT_IS_CLEAR(TWCR, TWINT))
    1df0:	e6 e5       	ldi	r30, 0x56	; 86
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	88 23       	and	r24, r24
    1df8:	dc f7       	brge	.-10     	; 0x1df0 <TWI_writeByte+0x1c>
        ;
}
    1dfa:	0f 90       	pop	r0
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before reading the data TWINT=1
     * Enable sending ACK after reading or receiving data TWEA=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1e0a:	e6 e5       	ldi	r30, 0x56	; 86
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	84 ec       	ldi	r24, 0xC4	; 196
    1e10:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while (BIT_IS_CLEAR(TWCR, TWINT))
    1e12:	e6 e5       	ldi	r30, 0x56	; 86
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	88 23       	and	r24, r24
    1e1a:	dc f7       	brge	.-10     	; 0x1e12 <TWI_readByteWithACK+0x10>
        ;
    /* Read Data */
    return TWDR;
    1e1c:	e3 e2       	ldi	r30, 0x23	; 35
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
}
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before reading the data TWINT=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1e30:	e6 e5       	ldi	r30, 0x56	; 86
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	84 e8       	ldi	r24, 0x84	; 132
    1e36:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while (BIT_IS_CLEAR(TWCR, TWINT))
    1e38:	e6 e5       	ldi	r30, 0x56	; 86
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	88 23       	and	r24, r24
    1e40:	dc f7       	brge	.-10     	; 0x1e38 <TWI_readByteWithNACK+0x10>
        ;
    /* Read Data */
    return TWDR;
    1e42:	e3 e2       	ldi	r30, 0x23	; 35
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
}
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	0f 92       	push	r0
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1e58:	e1 e2       	ldi	r30, 0x21	; 33
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	88 7f       	andi	r24, 0xF8	; 248
    1e60:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e64:	0f 90       	pop	r0
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <UART_init+0x6>
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <UART_init+0x8>
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	9c 83       	std	Y+4, r25	; 0x04
    1e7a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1e7c:	1a 82       	std	Y+2, r1	; 0x02
    1e7e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1e80:	eb e2       	ldi	r30, 0x2B	; 43
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	82 e0       	ldi	r24, 0x02	; 2
    1e86:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1e88:	ea e2       	ldi	r30, 0x2A	; 42
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	88 e1       	ldi	r24, 0x18	; 24
    1e8e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    1e90:	e0 e4       	ldi	r30, 0x40	; 64
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 e8       	ldi	r24, 0x80	; 128
    1e96:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<1);
    1e98:	a0 e4       	ldi	r26, 0x40	; 64
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e0 e4       	ldi	r30, 0x40	; 64
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	29 7f       	andi	r18, 0xF9	; 249
    1ea6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ea8:	fc 81       	ldd	r31, Y+4	; 0x04
    1eaa:	80 81       	ld	r24, Z
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	82 2b       	or	r24, r18
    1eb6:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)<<4);
    1eb8:	a0 e4       	ldi	r26, 0x40	; 64
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e0 e4       	ldi	r30, 0x40	; 64
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	2f 7c       	andi	r18, 0xCF	; 207
    1ec6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec8:	fc 81       	ldd	r31, Y+4	; 0x04
    1eca:	81 81       	ldd	r24, Z+1	; 0x01
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	82 95       	swap	r24
    1ed2:	92 95       	swap	r25
    1ed4:	90 7f       	andi	r25, 0xF0	; 240
    1ed6:	98 27       	eor	r25, r24
    1ed8:	80 7f       	andi	r24, 0xF0	; 240
    1eda:	98 27       	eor	r25, r24
    1edc:	82 2b       	or	r24, r18
    1ede:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit)<<3);
    1ee0:	a0 e4       	ldi	r26, 0x40	; 64
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e0 e4       	ldi	r30, 0x40	; 64
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	28 2f       	mov	r18, r24
    1eec:	27 7f       	andi	r18, 0xF7	; 247
    1eee:	eb 81       	ldd	r30, Y+3	; 0x03
    1ef0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	88 2f       	mov	r24, r24
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	82 2b       	or	r24, r18
    1f06:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    1f08:	eb 81       	ldd	r30, Y+3	; 0x03
    1f0a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f0c:	83 81       	ldd	r24, Z+3	; 0x03
    1f0e:	94 81       	ldd	r25, Z+4	; 0x04
    1f10:	a5 81       	ldd	r26, Z+5	; 0x05
    1f12:	b6 81       	ldd	r27, Z+6	; 0x06
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	aa 1f       	adc	r26, r26
    1f1a:	bb 1f       	adc	r27, r27
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	aa 1f       	adc	r26, r26
    1f22:	bb 1f       	adc	r27, r27
    1f24:	88 0f       	add	r24, r24
    1f26:	99 1f       	adc	r25, r25
    1f28:	aa 1f       	adc	r26, r26
    1f2a:	bb 1f       	adc	r27, r27
    1f2c:	9c 01       	movw	r18, r24
    1f2e:	ad 01       	movw	r20, r26
    1f30:	80 e4       	ldi	r24, 0x40	; 64
    1f32:	92 e4       	ldi	r25, 0x42	; 66
    1f34:	af e0       	ldi	r26, 0x0F	; 15
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	0e 94 49 10 	call	0x2092	; 0x2092 <__udivmodsi4>
    1f40:	da 01       	movw	r26, r20
    1f42:	c9 01       	movw	r24, r18
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	9a 83       	std	Y+2, r25	; 0x02
    1f48:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1f4a:	e0 e4       	ldi	r30, 0x40	; 64
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	9a 81       	ldd	r25, Y+2	; 0x02
    1f52:	89 2f       	mov	r24, r25
    1f54:	99 27       	eor	r25, r25
    1f56:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1f58:	e9 e2       	ldi	r30, 0x29	; 41
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	80 83       	st	Z, r24
}
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	0f 92       	push	r0
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1f7a:	eb e2       	ldi	r30, 0x2B	; 43
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	88 2f       	mov	r24, r24
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	80 72       	andi	r24, 0x20	; 32
    1f86:	90 70       	andi	r25, 0x00	; 0
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	b9 f3       	breq	.-18     	; 0x1f7a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1f8c:	ec e2       	ldi	r30, 0x2C	; 44
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1fa4:	eb e2       	ldi	r30, 0x2B	; 43
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	88 23       	and	r24, r24
    1fac:	dc f7       	brge	.-10     	; 0x1fa4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1fae:	ec e2       	ldi	r30, 0x2C	; 44
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
}
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <UART_sendString+0x6>
    1fc0:	0f 92       	push	r0
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	9b 83       	std	Y+3, r25	; 0x03
    1fc8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1fca:	19 82       	std	Y+1, r1	; 0x01
    1fcc:	0e c0       	rjmp	.+28     	; 0x1fea <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd8:	fc 01       	movw	r30, r24
    1fda:	e2 0f       	add	r30, r18
    1fdc:	f3 1f       	adc	r31, r19
    1fde:	80 81       	ld	r24, Z
    1fe0:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <UART_sendByte>
		i++;
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	8f 5f       	subi	r24, 0xFF	; 255
    1fe8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	28 2f       	mov	r18, r24
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	e2 0f       	add	r30, r18
    1ff8:	f3 1f       	adc	r31, r19
    1ffa:	80 81       	ld	r24, Z
    1ffc:	88 23       	and	r24, r24
    1ffe:	39 f7       	brne	.-50     	; 0x1fce <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	00 d0       	rcall	.+0      	; 0x2016 <UART_receiveString+0xa>
    2016:	0f 92       	push	r0
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	9b 83       	std	Y+3, r25	; 0x03
    201e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2020:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	9b 81       	ldd	r25, Y+3	; 0x03
    202c:	8c 01       	movw	r16, r24
    202e:	02 0f       	add	r16, r18
    2030:	13 1f       	adc	r17, r19
    2032:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <UART_recieveByte>
    2036:	f8 01       	movw	r30, r16
    2038:	80 83       	st	Z, r24
    203a:	0f c0       	rjmp	.+30     	; 0x205a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	8f 5f       	subi	r24, 0xFF	; 255
    2040:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	9b 81       	ldd	r25, Y+3	; 0x03
    204c:	8c 01       	movw	r16, r24
    204e:	02 0f       	add	r16, r18
    2050:	13 1f       	adc	r17, r19
    2052:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <UART_recieveByte>
    2056:	f8 01       	movw	r30, r16
    2058:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	28 2f       	mov	r18, r24
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	9b 81       	ldd	r25, Y+3	; 0x03
    2064:	fc 01       	movw	r30, r24
    2066:	e2 0f       	add	r30, r18
    2068:	f3 1f       	adc	r31, r19
    206a:	80 81       	ld	r24, Z
    206c:	83 32       	cpi	r24, 0x23	; 35
    206e:	31 f7       	brne	.-52     	; 0x203c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	9b 81       	ldd	r25, Y+3	; 0x03
    207a:	fc 01       	movw	r30, r24
    207c:	e2 0f       	add	r30, r18
    207e:	f3 1f       	adc	r31, r19
    2080:	10 82       	st	Z, r1

}
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	1f 91       	pop	r17
    208e:	0f 91       	pop	r16
    2090:	08 95       	ret

00002092 <__udivmodsi4>:
    2092:	a1 e2       	ldi	r26, 0x21	; 33
    2094:	1a 2e       	mov	r1, r26
    2096:	aa 1b       	sub	r26, r26
    2098:	bb 1b       	sub	r27, r27
    209a:	fd 01       	movw	r30, r26
    209c:	0d c0       	rjmp	.+26     	; 0x20b8 <__udivmodsi4_ep>

0000209e <__udivmodsi4_loop>:
    209e:	aa 1f       	adc	r26, r26
    20a0:	bb 1f       	adc	r27, r27
    20a2:	ee 1f       	adc	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	a2 17       	cp	r26, r18
    20a8:	b3 07       	cpc	r27, r19
    20aa:	e4 07       	cpc	r30, r20
    20ac:	f5 07       	cpc	r31, r21
    20ae:	20 f0       	brcs	.+8      	; 0x20b8 <__udivmodsi4_ep>
    20b0:	a2 1b       	sub	r26, r18
    20b2:	b3 0b       	sbc	r27, r19
    20b4:	e4 0b       	sbc	r30, r20
    20b6:	f5 0b       	sbc	r31, r21

000020b8 <__udivmodsi4_ep>:
    20b8:	66 1f       	adc	r22, r22
    20ba:	77 1f       	adc	r23, r23
    20bc:	88 1f       	adc	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	1a 94       	dec	r1
    20c2:	69 f7       	brne	.-38     	; 0x209e <__udivmodsi4_loop>
    20c4:	60 95       	com	r22
    20c6:	70 95       	com	r23
    20c8:	80 95       	com	r24
    20ca:	90 95       	com	r25
    20cc:	9b 01       	movw	r18, r22
    20ce:	ac 01       	movw	r20, r24
    20d0:	bd 01       	movw	r22, r26
    20d2:	cf 01       	movw	r24, r30
    20d4:	08 95       	ret

000020d6 <__prologue_saves__>:
    20d6:	2f 92       	push	r2
    20d8:	3f 92       	push	r3
    20da:	4f 92       	push	r4
    20dc:	5f 92       	push	r5
    20de:	6f 92       	push	r6
    20e0:	7f 92       	push	r7
    20e2:	8f 92       	push	r8
    20e4:	9f 92       	push	r9
    20e6:	af 92       	push	r10
    20e8:	bf 92       	push	r11
    20ea:	cf 92       	push	r12
    20ec:	df 92       	push	r13
    20ee:	ef 92       	push	r14
    20f0:	ff 92       	push	r15
    20f2:	0f 93       	push	r16
    20f4:	1f 93       	push	r17
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	ca 1b       	sub	r28, r26
    2100:	db 0b       	sbc	r29, r27
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	cd bf       	out	0x3d, r28	; 61
    210c:	09 94       	ijmp

0000210e <__epilogue_restores__>:
    210e:	2a 88       	ldd	r2, Y+18	; 0x12
    2110:	39 88       	ldd	r3, Y+17	; 0x11
    2112:	48 88       	ldd	r4, Y+16	; 0x10
    2114:	5f 84       	ldd	r5, Y+15	; 0x0f
    2116:	6e 84       	ldd	r6, Y+14	; 0x0e
    2118:	7d 84       	ldd	r7, Y+13	; 0x0d
    211a:	8c 84       	ldd	r8, Y+12	; 0x0c
    211c:	9b 84       	ldd	r9, Y+11	; 0x0b
    211e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2120:	b9 84       	ldd	r11, Y+9	; 0x09
    2122:	c8 84       	ldd	r12, Y+8	; 0x08
    2124:	df 80       	ldd	r13, Y+7	; 0x07
    2126:	ee 80       	ldd	r14, Y+6	; 0x06
    2128:	fd 80       	ldd	r15, Y+5	; 0x05
    212a:	0c 81       	ldd	r16, Y+4	; 0x04
    212c:	1b 81       	ldd	r17, Y+3	; 0x03
    212e:	aa 81       	ldd	r26, Y+2	; 0x02
    2130:	b9 81       	ldd	r27, Y+1	; 0x01
    2132:	ce 0f       	add	r28, r30
    2134:	d1 1d       	adc	r29, r1
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	ed 01       	movw	r28, r26
    2142:	08 95       	ret

00002144 <_exit>:
    2144:	f8 94       	cli

00002146 <__stop_program>:
    2146:	ff cf       	rjmp	.-2      	; 0x2146 <__stop_program>
